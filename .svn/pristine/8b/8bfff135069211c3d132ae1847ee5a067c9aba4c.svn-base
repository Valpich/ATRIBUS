package fr.eseo.atribus.dao;

import fr.eseo.atribus.entities.DirecteurEtudes;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DirecteurEtudesDaoImpl implements DirecteurEtudesDao {
  private static final Logger LOGGER = Logger.getLogger(DirecteurEtudesDaoImpl.class.getName());
  private static final String EXCEPTION = "Exception";

  private final DaoFactory daoFactory;

  private static final String SELECT_1 =
      "SELECT directeur_etudes.id AS id_directeur_etudes, utilisateur.* ";
  
  private static final String SELECT_2 =
      " FROM directeur_etudes ";
  
  private static final String SELECT_3 =
      " LEFT JOIN utilisateur ON utilisateur.id = directeur_etudes.id_utilisateur ";
  
  private static final String SQL_SELECT_PAR_LOGIN_HASH = SELECT_1 + SELECT_2 + SELECT_3
      + " WHERE utilisateur.login = ?" + " AND utilisateur.password = ?";

  private static final String SQL_INSERT =
      "INSERT INTO directeur_etudes (id_utilisateur) VALUES (?)";

  private static final String SQL_SELECT_ALL = SELECT_1 + SELECT_2 + SELECT_3;
  
  private static final String SQL_SELECT_PAR_ID_UTILISATEUR = SELECT_1 + SELECT_2
          + SELECT_3
          + " WHERE id_utilisateur = ?";
  
  private static final String SQL_DELETE_PAR_ID_UTILISATEUR =
      "DELETE FROM directeur_etudes WHERE id_utilisateur = ?";



  DirecteurEtudesDaoImpl() {
    final BeanFactoryReference bf =
        SingletonBeanFactoryLocator.getInstance().useBeanFactory("contextDao");
    this.daoFactory = (DaoFactory) bf.getFactory().getBean("daoFactory");
  }


  private DirecteurEtudes trouverParIdUtilisateur(int idUtilisateur) {
    return this.trouver(DirecteurEtudesDaoImpl.SQL_SELECT_PAR_ID_UTILISATEUR, idUtilisateur);
  }
  
  @Override
  public List<DirecteurEtudes> recupererListe() {
    final List<DirecteurEtudes> listeDirecteurEtudes = new ArrayList<>();
    Connection connexion = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;

    try {
      /* Récupération d'une connexion depuis la Factory */
      connexion = this.daoFactory.getConnection();
      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,
          DirecteurEtudesDaoImpl.SQL_SELECT_ALL, false);
      resultSet = preparedStatement.executeQuery();
      /* Parcours de la ligne de données retournée dans le ResultSet */
      while (resultSet.next()) {
        listeDirecteurEtudes.add(DirecteurEtudesDaoImpl.map(resultSet));
      }
    } catch (final SQLException sqle) {
      throw new DaoException(sqle);
    } finally {
      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);
    }

    return listeDirecteurEtudes;
  }

  /* Implémentation de la méthode trouverParLogin() définie dans l'interface UtilisateurBdd */
  @Override
  public DirecteurEtudes trouverParLoginHash(String login, String hash) {
    return this.trouver(DirecteurEtudesDaoImpl.SQL_SELECT_PAR_LOGIN_HASH, login, hash);
  }


  @Override
  public DirecteurEtudes ajouter(DirecteurEtudes directeurEtudes) {
    Connection connexion = null;
    PreparedStatement preparedStatement = null;
    final ResultSet valeursAutoGenerees = null;

    try {
      final BeanFactoryReference bf =
          SingletonBeanFactoryLocator.getInstance().useBeanFactory("beansDao");
      final int idUtilisateur = ((UtilisateurDao) bf.getFactory().getBean("utilisateurDao"))
          .trouverIdParLogin(directeurEtudes.getLogin());
      
      // Si il n'y a pas déja l'utilisateur associé
      if (this.trouverParIdUtilisateur(idUtilisateur) == null) {
        connexion = this.daoFactory.getConnection();
        preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,
            DirecteurEtudesDaoImpl.SQL_INSERT, true, idUtilisateur);

        final int statut = preparedStatement.executeUpdate();
        /* Analyse du statut retourné par la requête d'insertion */
        if (statut == 0) {
          throw new DaoException(
              "Échec de la création du directeur des études, aucune ligne ajoutée dans la table.");
        }
      }
      
    } catch (final SQLException sqle) {
      DirecteurEtudesDaoImpl.LOGGER.log(Level.INFO, "Exception", sqle);
      throw new DaoException(sqle);
    } finally {
      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);
    }

    return directeurEtudes;
  }
  
  
  @Override
  public int supprimer(DirecteurEtudes directeurEtudes) {

    int statut;
    Connection connexion = null;
    PreparedStatement preparedStatement = null;


    try {
      /* Récupération de l'id_utilisateur */
      final BeanFactoryReference bf =
          SingletonBeanFactoryLocator.getInstance().useBeanFactory("beansDao");
      final int idUtilisateur = ((UtilisateurDao) bf.getFactory().getBean("utilisateurDao"))
          .trouverIdParLogin(directeurEtudes.getLogin());

      /* Récupération d'une connexion depuis la Factory */
      connexion = this.daoFactory.getConnection();
      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,
          DirecteurEtudesDaoImpl.SQL_DELETE_PAR_ID_UTILISATEUR, false, idUtilisateur);

      statut = preparedStatement.executeUpdate();

    } catch (final SQLException sqle) {
      DirecteurEtudesDaoImpl.LOGGER.log(Level.INFO, DirecteurEtudesDaoImpl.EXCEPTION, sqle);
      throw new DaoException(sqle);
    } finally {
      DaoUtilitaire.fermeturesSilencieuses(preparedStatement, connexion);
    }

    return statut;
  }


  /*
   * Méthode générique utilisée pour retourner un adminsys depuis la base de données, correspondant
   * à la requête SQL donnée prenant en paramètres les objets passés en argument.
   */
  private DirecteurEtudes trouver(String sql, Object... objets) {
    Connection connexion = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;
    DirecteurEtudes directeurEtudes = null;

    try {
      /* Récupération d'une connexion depuis la Factory */
      connexion = this.daoFactory.getConnection();
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
      preparedStatement =
          DaoUtilitaire.initialisationRequetePreparee(connexion, sql, false, objets);
      resultSet = preparedStatement.executeQuery();
      /* Parcours de la ligne de données retournée dans le ResultSet */
      if (resultSet.next()) {
        directeurEtudes = DirecteurEtudesDaoImpl.map(resultSet);
      }
    } catch (final SQLException sqle) {
      throw new DaoException(sqle);
    } finally {
      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);
    }
    return directeurEtudes;
  }

  /*
   * Simple méthode utilitaire permettant de faire la correspondance (le mapping) entre une ligne
   * issue de la table des adminsyss (un ResultSet) et un bean Utilisateur.
   */
  private static DirecteurEtudes map(ResultSet resultSet) throws SQLException {
    final DirecteurEtudes directeurEtudes = new DirecteurEtudes();
    directeurEtudes.setId(resultSet.getInt("id"));
    directeurEtudes.setIdDirecteurEtudes(resultSet.getInt("id_directeur_etudes"));
    directeurEtudes.setLogin(resultSet.getString("login"));
    directeurEtudes.setPassword(resultSet.getString("password"));
    directeurEtudes.setNom(resultSet.getString("nom"));
    directeurEtudes.setPrenom(resultSet.getString("prenom"));
    directeurEtudes.setEmail(resultSet.getString("email"));
    directeurEtudes.setDateInscription(resultSet.getTimestamp("date_inscription"));
    directeurEtudes.setNotificationActive(resultSet.getBoolean("notification_active"));
    directeurEtudes.setNotificationMail(resultSet.getBoolean("notification_mail"));
    directeurEtudes.setFrequenceNotificationMail(resultSet.getInt("frequence_notification_mail"));
    return directeurEtudes;
  }
}
