<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>AddExerciceForm.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.forms</a> &gt; <span class="el_source">AddExerciceForm.java</span></div><h1>AddExerciceForm.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.forms;

import fr.eseo.atribus.dao.CompetenceDao;
import fr.eseo.atribus.dao.DaoException;
import fr.eseo.atribus.dao.ExamenDao;
import fr.eseo.atribus.dao.ExerciceDao;
import fr.eseo.atribus.entities.Examen;
import fr.eseo.atribus.entities.Exercice;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;

public class AddExerciceForm extends ExerciceFormMethods {
<span class="nc" id="L23">  private static final Logger LOGGER = Logger.getLogger(AddExerciceForm.class.getName());</span>

<span class="nc" id="L25">  public AddExerciceForm() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L27">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
<span class="nc" id="L28">    this.data.setExerciceBdd((ExerciceDao) bf.getFactory().getBean(&quot;exerciceDao&quot;));</span>
<span class="nc" id="L29">    this.data.setCompetenceBdd((CompetenceDao) bf.getFactory().getBean(&quot;competenceDao&quot;));</span>
<span class="nc" id="L30">    this.data.setExamenBdd((ExamenDao) bf.getFactory().getBean(&quot;examenDao&quot;));</span>
<span class="nc" id="L31">  }</span>

  /**
   * Ajout d'une auto evaluation dans la DAO en fonction du formulaire.
   * 
   * @return Examen
   */
  public Exercice ajouterAutoEvaluation(String question, List&lt;String&gt; reponses, String nbPoints,
      List&lt;String&gt; competences, List&lt;String&gt; pourcentages, String examen, String bonneReponses) {
<span class="nc" id="L40">    final Exercice exercice = new Exercice();</span>
    try {
<span class="nc" id="L42">      this.traiterCompetencesPourcentages(competences, pourcentages, exercice);</span>
<span class="nc" id="L43">      this.traiterValeursAuto(question, reponses, nbPoints, exercice, bonneReponses);</span>
<span class="nc" id="L44">      final Examen examenTemp = this.traiterDonneesAuto(examen, exercice);</span>
<span class="nc bnc" id="L45" title="All 2 branches missed.">      if (this.data.getErreurs().isEmpty()) {</span>
<span class="nc" id="L46">        this.data.getExerciceBdd().ajouter(exercice, examenTemp);</span>
<span class="nc" id="L47">        this.data.setResultat(&quot;success&quot;);</span>
      } else {
<span class="nc" id="L49">        this.data.setResultat(&quot;error&quot;);</span>
      }
<span class="nc" id="L51">    } catch (final DaoException ebdd) {</span>
<span class="nc" id="L52">      this.data.setResultat(&quot;errorDao&quot;);</span>
<span class="nc" id="L53">      AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, ebdd);</span>
<span class="nc" id="L54">    }</span>
<span class="nc" id="L55">    return exercice;</span>
  }

  private void traiterValeursAuto(String question, List&lt;String&gt; reponses, String nbPoints,
      Exercice exercice, String bonneReponses) {
<span class="nc" id="L60">    final String reponse = String.join(&quot;/**REPONSES**/&quot;, reponses);</span>
    try {
<span class="nc" id="L62">      this.validationQuestion(question);</span>
<span class="nc" id="L63">      exercice.setQuestion(question);</span>
<span class="nc" id="L64">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L65">      this.setErreur(ExerciceFormData.CHAMP_QUESTION, fve.getMessage());</span>
<span class="nc" id="L66">      AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, fve);</span>
<span class="nc" id="L67">    }</span>
    try {
<span class="nc" id="L69">      this.validationReponseQcm(reponse, bonneReponses);</span>
<span class="nc" id="L70">      exercice.setReponse(reponse);</span>
<span class="nc" id="L71">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L72">      this.setErreur(ExerciceFormData.CHAMP_REPONSE, fve.getMessage());</span>
<span class="nc" id="L73">      AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, fve);</span>
<span class="nc" id="L74">    }</span>
<span class="nc" id="L75">    this.validerPoints(nbPoints, exercice);</span>
<span class="nc" id="L76">    exercice.setReponse(exercice.getReponse()+ &quot;/**VALIDES**/&quot;+bonneReponses);</span>
<span class="nc" id="L77">  }</span>

  private void traiterCompetencesPourcentages(List&lt;String&gt; competences, List&lt;String&gt; pourcentages,
      final Exercice exercice) {
<span class="nc bnc" id="L81" title="All 2 branches missed.">    for (Long i = new Long(0); i &lt; Math.max(pourcentages.size(), competences.size()); i++) {</span>
      try {
<span class="nc" id="L83">        this.validationPourcentage(pourcentages.get(i.intValue()));</span>
<span class="nc bnc" id="L84" title="All 2 branches missed.">        if (exercice.getPourcentages() == null) {</span>
<span class="nc" id="L85">          exercice.setPourcentages(new HashMap&lt;&gt;());</span>
        }
<span class="nc" id="L87">        exercice.getPourcentages().put(new Long(i + 1),</span>
<span class="nc" id="L88">            Integer.parseInt(pourcentages.get(i.intValue())));</span>
<span class="nc" id="L89">      } catch (final FormValidationException fve) {</span>
<span class="nc" id="L90">        this.setErreur(ExerciceFormData.CHAMP_POURCENTAGE, fve.getMessage());</span>
<span class="nc" id="L91">        AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, fve);</span>
<span class="nc" id="L92">      }</span>
      try {
<span class="nc" id="L94">        this.validationCompetence(competences.get(i.intValue()));</span>
<span class="nc bnc" id="L95" title="All 2 branches missed.">        if (exercice.getCompetences() == null) {</span>
<span class="nc" id="L96">          exercice.setCompetences(new HashMap&lt;&gt;());</span>
        }
<span class="nc" id="L98">        exercice.getCompetences().put(new Long(i + 1),</span>
<span class="nc" id="L99">            this.data.getCompetenceBdd().trouverUniqueParNom(competences.get(i.intValue())));</span>
<span class="nc" id="L100">      } catch (final FormValidationException fve) {</span>
<span class="nc" id="L101">        this.setErreur(ExerciceFormData.CHAMP_COMPETENCE, fve.getMessage());</span>
<span class="nc" id="L102">        AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, fve);</span>
<span class="nc" id="L103">      }</span>
    }
<span class="nc" id="L105">  }</span>


  private Examen traiterDonneesAuto(String examen, Exercice exercice) {
<span class="nc" id="L109">    Examen examenDao = null;</span>
    try {
<span class="nc" id="L111">      this.validationExamen(examen);</span>
<span class="nc" id="L112">      examenDao = this.data.getExamenBdd().trouverParNom(examen);</span>
<span class="nc" id="L113">      examenDao.getExercices().add(exercice);</span>
<span class="nc" id="L114">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L115">      this.setErreur(ExerciceFormData.CHAMP_COMPETENCE, fve.getMessage());</span>
<span class="nc" id="L116">      AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, fve);</span>
<span class="nc" id="L117">    }</span>
<span class="nc" id="L118">    return examenDao;</span>
  }

  public Exercice addExercice(HttpServletRequest request) {
<span class="nc" id="L122">    final Map&lt;String, String[]&gt; parameters = request.getParameterMap();</span>
<span class="nc" id="L123">    final Map&lt;Long, String&gt; pourcentages = new HashMap&lt;&gt;();</span>
<span class="nc" id="L124">    final Map&lt;Long, String&gt; competences = new HashMap&lt;&gt;();</span>
<span class="nc" id="L125">    int indexMax = 0;</span>
<span class="nc bnc" id="L126" title="All 2 branches missed.">    for (Iterator&lt;String&gt; iterator = parameters.keySet().iterator(); iterator.hasNext();) {</span>
<span class="nc" id="L127">      final String parameter = iterator.next();</span>
<span class="nc bnc" id="L128" title="All 2 branches missed.">      if (parameter.startsWith(ExerciceFormData.CHAMP_POURCENTAGE)) {</span>
<span class="nc" id="L129">        final Integer index = new Integer(Integer</span>
<span class="nc" id="L130">            .parseInt(parameter.substring(parameter.indexOf(ExerciceFormData.CHAMP_POURCENTAGE)</span>
<span class="nc" id="L131">                + ExerciceFormData.CHAMP_POURCENTAGE.length())));</span>
<span class="nc bnc" id="L132" title="All 2 branches missed.">        if (index &gt; indexMax) {</span>
<span class="nc" id="L133">          indexMax = index;</span>
        }
<span class="nc bnc" id="L135" title="All 2 branches missed.">        for (final String pourcentage : parameters.get(parameter)) {</span>
<span class="nc" id="L136">          pourcentages.put(new Long(index), pourcentage);</span>
        }
      }
<span class="nc bnc" id="L139" title="All 2 branches missed.">      if (parameter.startsWith(ExerciceFormData.CHAMP_COMPETENCE)) {</span>
<span class="nc" id="L140">        final Integer index = new Integer(Integer</span>
<span class="nc" id="L141">            .parseInt(parameter.substring(parameter.indexOf(ExerciceFormData.CHAMP_COMPETENCE)</span>
<span class="nc" id="L142">                + ExerciceFormData.CHAMP_COMPETENCE.length())));</span>
<span class="nc bnc" id="L143" title="All 2 branches missed.">        if (index &gt; indexMax) {</span>
<span class="nc" id="L144">          indexMax = index;</span>
        }
<span class="nc bnc" id="L146" title="All 2 branches missed.">        for (final String competence : parameters.get(parameter)) {</span>
<span class="nc" id="L147">          competences.put(new Long(index), competence);</span>
        }
      }
<span class="nc" id="L150">    }</span>
<span class="nc" id="L151">    final String question =</span>
<span class="nc" id="L152">        ExerciceFormMethods.getValeurChamp(request, ExerciceFormData.CHAMP_QUESTION);</span>
<span class="nc" id="L153">    final String reponse =</span>
<span class="nc" id="L154">        ExerciceFormMethods.getValeurChamp(request, ExerciceFormData.CHAMP_REPONSE);</span>
<span class="nc" id="L155">    final String nbPoints =</span>
<span class="nc" id="L156">        ExerciceFormMethods.getValeurChamp(request, ExerciceFormData.CHAMP_POINTS);</span>
<span class="nc" id="L157">    final String examen =</span>
<span class="nc" id="L158">        ExerciceFormMethods.getValeurChamp(request, ExerciceFormData.CHAMP_EXAMEN);</span>
<span class="nc" id="L159">    final Exercice exercice = new Exercice();</span>
<span class="nc" id="L160">    final Examen exam = new Examen();</span>
<span class="nc" id="L161">    exam.setNom(examen);</span>
    try {
<span class="nc" id="L163">      this.traiterValeurs(question, reponse, nbPoints, exercice);</span>
<span class="nc" id="L164">      this.traiterDonnees(competences, pourcentages, exercice, indexMax);</span>
<span class="nc bnc" id="L165" title="All 2 branches missed.">      if (this.data.getErreurs().isEmpty()) {</span>
<span class="nc" id="L166">        this.data.getExerciceBdd().ajouter(exercice, exam);</span>
<span class="nc" id="L167">        this.data.setResultat(&quot;success&quot;);</span>
      } else {
<span class="nc" id="L169">        this.data.setResultat(&quot;error&quot;);</span>
      }
<span class="nc" id="L171">    } catch (final DaoException ebdd) {</span>
<span class="nc" id="L172">      this.data.setResultat(&quot;errorDao&quot;);</span>
<span class="nc" id="L173">      AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, ebdd);</span>
<span class="nc" id="L174">    }</span>

<span class="nc" id="L176">    return exercice;</span>
  }

  private void traiterDonnees(Map&lt;Long, String&gt; competences, Map&lt;Long, String&gt; pourcentages,
      Exercice exercice, int index) {
<span class="nc bnc" id="L181" title="All 2 branches missed.">    for (Long i = new Long(1); i &lt; index + 1; i++) {</span>
      try {
<span class="nc" id="L183">        this.validationPourcentage(pourcentages.get(i));</span>
<span class="nc bnc" id="L184" title="All 2 branches missed.">        if (exercice.getPourcentages() == null) {</span>
<span class="nc" id="L185">          exercice.setPourcentages(new HashMap&lt;&gt;());</span>
        }
<span class="nc" id="L187">        exercice.getPourcentages().put(new Long(i), Integer.parseInt(pourcentages.get(i)));</span>
<span class="nc" id="L188">      } catch (final FormValidationException fve) {</span>
<span class="nc" id="L189">        this.setErreur(ExerciceFormData.CHAMP_POURCENTAGE, fve.getMessage());</span>
<span class="nc" id="L190">        AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, fve);</span>
<span class="nc" id="L191">      }</span>
    }
<span class="nc bnc" id="L193" title="All 2 branches missed.">    for (Long i = new Long(1); i &lt; index + 1; i++) {</span>
      try {
<span class="nc" id="L195">        this.validationCompetence(competences.get(i));</span>
<span class="nc bnc" id="L196" title="All 2 branches missed.">        if (exercice.getCompetences() == null) {</span>
<span class="nc" id="L197">          exercice.setCompetences(new HashMap&lt;&gt;());</span>
        }
<span class="nc" id="L199">        exercice.getCompetences().put(new Long(i),</span>
<span class="nc" id="L200">            this.data.getCompetenceBdd().trouverUniqueParNom(competences.get(i)));</span>
<span class="nc" id="L201">      } catch (final FormValidationException fve) {</span>
<span class="nc" id="L202">        this.setErreur(ExerciceFormData.CHAMP_COMPETENCE, fve.getMessage());</span>
<span class="nc" id="L203">        AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, fve);</span>
<span class="nc" id="L204">      }</span>
    }
<span class="nc" id="L206">  }</span>

  private void traiterValeurs(String question, String reponse, String nbPoints, Exercice exercice) {
    try {
<span class="nc" id="L210">      this.validationQuestion(question);</span>
<span class="nc" id="L211">      exercice.setQuestion(question);</span>
<span class="nc" id="L212">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L213">      this.setErreur(ExerciceFormData.CHAMP_QUESTION, fve.getMessage());</span>
<span class="nc" id="L214">      AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, fve);</span>
<span class="nc" id="L215">    }</span>
    try {
<span class="nc" id="L217">      this.validationReponse(reponse);</span>
<span class="nc" id="L218">      exercice.setReponse(reponse);</span>
<span class="nc" id="L219">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L220">      this.setErreur(ExerciceFormData.CHAMP_REPONSE, fve.getMessage());</span>
<span class="nc" id="L221">      AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, fve);</span>
<span class="nc" id="L222">    }</span>
<span class="nc" id="L223">    this.validerPoints(nbPoints, exercice);</span>
<span class="nc" id="L224">  }</span>

  private void validerPoints(String nbPoints, Exercice exercice) {
    try {
<span class="nc" id="L228">      this.validationPoints(nbPoints);</span>
<span class="nc" id="L229">      exercice.setNbPoints(Float.parseFloat(nbPoints));</span>
<span class="nc" id="L230">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L231">      this.setErreur(ExerciceFormData.CHAMP_POINTS, fve.getMessage());</span>
<span class="nc" id="L232">      AddExerciceForm.LOGGER.log(Level.INFO, ExerciceFormData.EXCEPTION, fve);</span>
<span class="nc" id="L233">    }</span>
<span class="nc" id="L234">  }</span>

}

</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>