<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>ConnexionForm.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.forms</a> &gt; <span class="el_source">ConnexionForm.java</span></div><h1>ConnexionForm.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.forms;

import fr.eseo.atribus.beans.PasswordStorage;
import fr.eseo.atribus.beans.PasswordStorage.CannotPerformOperationException;
import fr.eseo.atribus.beans.PasswordStorage.InvalidHashException;
import fr.eseo.atribus.dao.AdminSystDao;
import fr.eseo.atribus.dao.DaoException;
import fr.eseo.atribus.dao.DirecteurEtudesDao;
import fr.eseo.atribus.dao.DirecteurProgrammesDao;
import fr.eseo.atribus.dao.EleveDao;
import fr.eseo.atribus.dao.EnseignantDao;
import fr.eseo.atribus.dao.EnseignantRefMatiereDao;
import fr.eseo.atribus.dao.EnseignantRefUeDao;
import fr.eseo.atribus.dao.UtilisateurDao;
import fr.eseo.atribus.entities.AdminSyst;
import fr.eseo.atribus.entities.DirecteurEtudes;
import fr.eseo.atribus.entities.DirecteurProgrammes;
import fr.eseo.atribus.entities.Eleve;
import fr.eseo.atribus.entities.Enseignant;
import fr.eseo.atribus.entities.EnseignantRefMatiere;
import fr.eseo.atribus.entities.EnseignantRefUe;
import fr.eseo.atribus.entities.Utilisateur;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;

public class ConnexionForm {
  public static final String ATT_SESSION_USER = &quot;sessionUtilisateur&quot;;
<span class="nc" id="L38">  private static final Logger LOGGER = Logger.getLogger(ConnexionForm.class.getName());</span>
  private static final String CHAMP_LOGIN = &quot;login&quot;;
  private static final String CHAMP_PASS = &quot;password&quot;;
  private static final String CHECK_LOGIN_MDP = &quot;checkloginpassword&quot;;
  private static final String EXCEPTION = &quot;Exception&quot;;

  private String resultat;
<span class="nc" id="L45">  private final Map&lt;String, String&gt; erreurs = new HashMap&lt;&gt;();</span>

  private final UtilisateurDao utilisateurDao;
  private final AdminSystDao adminSystDao;
  private final DirecteurEtudesDao directeurEtudesDao;
  private final DirecteurProgrammesDao directeurProgrammesDao;
  private final EnseignantDao enseignantDao;
  private final EnseignantRefUeDao enseignantRefUeDao;
  private final EnseignantRefMatiereDao enseignantRefMatiereDao;
  private final EleveDao eleveDao;

<span class="nc" id="L56">  public ConnexionForm() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L58">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Utilisateur */
<span class="nc" id="L60">    this.utilisateurDao = (UtilisateurDao) bf.getFactory().getBean(&quot;utilisateurDao&quot;);</span>
    /* Récupération d'une instance de notre DAO AdminSyst */
<span class="nc" id="L62">    this.adminSystDao = (AdminSystDao) bf.getFactory().getBean(&quot;adminSystDao&quot;);</span>
    /* Récupération d'une instance de notre DAO DirecteurEtudes */
<span class="nc" id="L64">    this.directeurEtudesDao = (DirecteurEtudesDao) bf.getFactory().getBean(&quot;directeurEtudesDao&quot;);</span>
    /* Récupération d'une instance de notre DAO DirecteurProgrammes */
<span class="nc" id="L66">    this.directeurProgrammesDao =</span>
<span class="nc" id="L67">        (DirecteurProgrammesDao) bf.getFactory().getBean(&quot;directeurProgrammesDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Enseignant */
<span class="nc" id="L69">    this.enseignantDao = (EnseignantDao) bf.getFactory().getBean(&quot;enseignantDao&quot;);</span>
    /* Récupération d'une instance de notre DAO EnseignantRefUe */
<span class="nc" id="L71">    this.enseignantRefUeDao = (EnseignantRefUeDao) bf.getFactory().getBean(&quot;enseignantRefUeDao&quot;);</span>
    /* Récupération d'une instance de notre DAO EnseignantRefMatiere */
<span class="nc" id="L73">    this.enseignantRefMatiereDao =</span>
<span class="nc" id="L74">        (EnseignantRefMatiereDao) bf.getFactory().getBean(&quot;enseignantRefMatiereDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Eleve */
<span class="nc" id="L76">    this.eleveDao = (EleveDao) bf.getFactory().getBean(&quot;eleveDao&quot;);</span>
<span class="nc" id="L77">  }</span>

  public String getResultat() {
<span class="nc" id="L80">    return this.resultat;</span>
  }

  public Map&lt;String, String&gt; getErreurs() {
<span class="nc" id="L84">    return this.erreurs;</span>
  }

  public void connecterUtilisateur(HttpServletRequest request) {
<span class="nc" id="L88">    final String login = ConnexionForm.getValeurChamp(request, ConnexionForm.CHAMP_LOGIN);</span>
<span class="nc" id="L89">    final String password = ConnexionForm.getValeurChamp(request, ConnexionForm.CHAMP_PASS);</span>
<span class="nc" id="L90">    final Utilisateur utilisateur = new Utilisateur();</span>

    try {
<span class="nc" id="L93">      this.traiterLogin(login, utilisateur);</span>
<span class="nc" id="L94">      this.traiterPassword(password, utilisateur);</span>

<span class="nc bnc" id="L96" title="All 2 branches missed.">      if (this.erreurs.isEmpty()) {</span>
<span class="nc" id="L97">        this.traiterConnexion(utilisateur, request);</span>
      }

<span class="nc bnc" id="L100" title="All 2 branches missed.">      if (this.erreurs.isEmpty()) {</span>
<span class="nc" id="L101">        this.resultat = &quot;Succès de la connexion.&quot;;</span>
      } else {
<span class="nc" id="L103">        this.resultat = &quot;Echec de la connexion.&quot;;</span>
      }
<span class="nc" id="L105">    } catch (final DaoException bdde) {</span>
<span class="nc" id="L106">      this.resultat = &quot;Échec de l'inscription : une erreur imprévue est survenue,&quot;</span>
          + &quot; merci de réessayer dans quelques instants.&quot;;
<span class="nc" id="L108">      ConnexionForm.LOGGER.log(Level.INFO, EXCEPTION, bdde);</span>
<span class="nc" id="L109">    }</span>

<span class="nc" id="L111">  }</span>

  private void traiterLogin(String login, Utilisateur utilisateur) {
    try {
<span class="nc" id="L115">      this.validationLogin(login);</span>
<span class="nc" id="L116">      utilisateur.setLogin(login);</span>
<span class="nc" id="L117">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L118">      ConnexionForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L119">      this.setErreur(ConnexionForm.CHAMP_LOGIN, fve.getMessage());</span>
<span class="nc" id="L120">    }</span>
<span class="nc" id="L121">  }</span>

  private void traiterPassword(String password, Utilisateur utilisateur) {
    try {
<span class="nc" id="L125">      this.validationPassword(password);</span>
<span class="nc" id="L126">      utilisateur.setPassword(password);</span>
<span class="nc" id="L127">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L128">      ConnexionForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L129">      this.setErreur(ConnexionForm.CHAMP_PASS, fve.getMessage());</span>
<span class="nc" id="L130">    } catch (final Exception fve) {</span>
<span class="nc" id="L131">      ConnexionForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L132">      this.setErreur(ConnexionForm.CHAMP_PASS, &quot;Impossible de générer le hash du mot de passe.&quot;);</span>
<span class="nc" id="L133">    }</span>
<span class="nc" id="L134">  }</span>

  private void traiterConnexion(Utilisateur utilisateur, HttpServletRequest request) {
    try {
<span class="nc" id="L138">      this.validationConnexion(utilisateur, request);</span>
<span class="nc" id="L139">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L140">      ConnexionForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L141">      this.setErreur(ConnexionForm.CHECK_LOGIN_MDP, fve.getMessage());</span>
<span class="nc" id="L142">    }</span>
<span class="nc" id="L143">  }</span>

  private void validationLogin(String login) throws FormValidationException {
<span class="nc bnc" id="L146" title="All 4 branches missed.">    if (login == null || login.length() &lt; 5) {</span>
<span class="nc" id="L147">      throw new FormValidationException(</span>
          &quot;Le nom d'utilisateur doit contenir au moins 5 caractères.&quot;);
    }
<span class="nc" id="L150">  }</span>

  private void validationPassword(String password) throws FormValidationException {
<span class="nc bnc" id="L153" title="All 2 branches missed.">    if (password != null) {</span>
<span class="nc bnc" id="L154" title="All 2 branches missed.">      if (password.length() &lt; 5) {</span>
<span class="nc" id="L155">        throw new FormValidationException(</span>
            &quot;Les mots de passe doivent contenir au moins 5 caractères.&quot;);
      }
    } else {
<span class="nc" id="L159">      throw new FormValidationException(&quot;Merci de saisir un mot de passe.&quot;);</span>
    }
<span class="nc" id="L161">  }</span>

  private void validationConnexion(Utilisateur utilisateur, HttpServletRequest request)
      throws FormValidationException {
<span class="nc" id="L165">    final Utilisateur utilisateurCheck =</span>
<span class="nc" id="L166">        this.utilisateurDao.trouverParLogin(utilisateur.getLogin());</span>
<span class="nc bnc" id="L167" title="All 2 branches missed.">    if (utilisateurCheck != null) {</span>
      try {
<span class="nc bnc" id="L169" title="All 2 branches missed.">        if (!PasswordStorage.verifyPassword(utilisateur.getPassword(),</span>
<span class="nc" id="L170">            utilisateurCheck.getPassword())) {</span>
<span class="nc" id="L171">          throw new FormValidationException(&quot;Couple login/password incorrect.&quot;);</span>
        }

<span class="nc" id="L174">        final List&lt;Utilisateur&gt; listeUtilisateur = new ArrayList&lt;&gt;();</span>
<span class="nc" id="L175">        listeUtilisateur.add(utilisateurCheck);</span>

<span class="nc" id="L177">        this.chercherGroupe(utilisateurCheck, listeUtilisateur);</span>

<span class="nc" id="L179">        request.getSession().setAttribute(ConnexionForm.ATT_SESSION_USER, listeUtilisateur);</span>

<span class="nc" id="L181">      } catch (CannotPerformOperationException | InvalidHashException cpoe) {</span>
<span class="nc" id="L182">        ConnexionForm.LOGGER.log(Level.INFO, &quot;Exception&quot;, cpoe);</span>
<span class="nc" id="L183">        throw new FormValidationException(&quot;Une erreur est survenue avec la fonciton de hachage.&quot;);</span>
<span class="nc" id="L184">      }</span>
    } else {
<span class="nc" id="L186">      throw new FormValidationException(&quot;Couple login/password incorrect.&quot;);</span>
    }
<span class="nc" id="L188">  }</span>

  private void chercherGroupe(final Utilisateur utilisateurCheck,
      final List&lt;Utilisateur&gt; listeUtilisateur) {
    // On cherche un groupe appartenant à l'utilisateur
<span class="nc" id="L193">    final AdminSyst utilisateurCheckAdminSyst = this.adminSystDao</span>
<span class="nc" id="L194">        .trouverParLoginHash(utilisateurCheck.getLogin(), utilisateurCheck.getPassword());</span>
<span class="nc bnc" id="L195" title="All 2 branches missed.">    if (utilisateurCheckAdminSyst != null) {</span>
<span class="nc" id="L196">      listeUtilisateur.add(utilisateurCheckAdminSyst);</span>
    }

<span class="nc" id="L199">    final DirecteurEtudes utilisateurCheckDirecteurEtudes = this.directeurEtudesDao</span>
<span class="nc" id="L200">        .trouverParLoginHash(utilisateurCheck.getLogin(), utilisateurCheck.getPassword());</span>
<span class="nc bnc" id="L201" title="All 2 branches missed.">    if (utilisateurCheckDirecteurEtudes != null) {</span>
<span class="nc" id="L202">      listeUtilisateur.add(utilisateurCheckDirecteurEtudes);</span>
    }

<span class="nc" id="L205">    final DirecteurProgrammes utilisateurCheckDirecteurProgrammes = this.directeurProgrammesDao</span>
<span class="nc" id="L206">        .trouverParLoginHash(utilisateurCheck.getLogin(), utilisateurCheck.getPassword());</span>
<span class="nc bnc" id="L207" title="All 2 branches missed.">    if (utilisateurCheckDirecteurProgrammes != null) {</span>
<span class="nc" id="L208">      listeUtilisateur.add(utilisateurCheckDirecteurProgrammes);</span>
    }

<span class="nc" id="L211">    final Enseignant utilisateurCheckEnseignant = this.enseignantDao</span>
<span class="nc" id="L212">        .trouverParLoginHash(utilisateurCheck.getLogin(), utilisateurCheck.getPassword());</span>
<span class="nc bnc" id="L213" title="All 2 branches missed.">    if (utilisateurCheckEnseignant != null) {</span>
<span class="nc" id="L214">      listeUtilisateur.add(utilisateurCheckEnseignant);</span>
    }

<span class="nc" id="L217">    final EnseignantRefUe utilisateurCheckEnseignantRefUe = this.enseignantRefUeDao</span>
<span class="nc" id="L218">        .trouverParLoginHash(utilisateurCheck.getLogin(), utilisateurCheck.getPassword());</span>
<span class="nc bnc" id="L219" title="All 2 branches missed.">    if (utilisateurCheckEnseignantRefUe != null) {</span>
<span class="nc" id="L220">      listeUtilisateur.add(utilisateurCheckEnseignantRefUe);</span>
    }

<span class="nc" id="L223">    final EnseignantRefMatiere utilisateurCheckEnseignantRefMatiere = this.enseignantRefMatiereDao</span>
<span class="nc" id="L224">        .trouverParLoginHash(utilisateurCheck.getLogin(), utilisateurCheck.getPassword());</span>
<span class="nc bnc" id="L225" title="All 2 branches missed.">    if (utilisateurCheckEnseignantRefMatiere != null) {</span>
<span class="nc" id="L226">      listeUtilisateur.add(utilisateurCheckEnseignantRefMatiere);</span>
    }

<span class="nc" id="L229">    final Eleve utilisateurCheckEl = this.eleveDao.trouverParLoginHash(utilisateurCheck.getLogin(),</span>
<span class="nc" id="L230">        utilisateurCheck.getPassword());</span>
<span class="nc bnc" id="L231" title="All 2 branches missed.">    if (utilisateurCheckEl != null) {</span>
<span class="nc" id="L232">      listeUtilisateur.add(utilisateurCheckEl);</span>
    }
<span class="nc" id="L234">  }</span>

  /*
   * Ajoute un message correspondant au champ spécifié à la map des erreurs.
   */
  private void setErreur(String champ, String message) {
<span class="nc" id="L240">    this.erreurs.put(champ, message);</span>
<span class="nc" id="L241">  }</span>

  /*
   * Méthode utilitaire qui retourne null si un champ est vide, et son contenu sinon.
   */
  private static String getValeurChamp(HttpServletRequest request, String nomChamp) {
<span class="nc" id="L247">    final String valeur = request.getParameter(nomChamp);</span>
<span class="nc bnc" id="L248" title="All 4 branches missed.">    if (valeur == null || valeur.trim().length() == 0) {</span>
<span class="nc" id="L249">      return null;</span>
    } else {
<span class="nc" id="L251">      return valeur.trim();</span>
    }
  }
}

</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>