package fr.eseo.atribus.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotNull;
import static org.testng.Assert.assertNull;

import fr.eseo.atribus.entities.Competence;
import fr.eseo.atribus.entities.Eleve;
import fr.eseo.atribus.entities.Matiere;
import fr.eseo.atribus.entities.UniteEnseignement;

import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.Map;

public class CompetenceDaoImplTest {
  CompetenceDaoImpl competenceDao;
  UeDaoImpl ueDao;
  EleveDaoImpl eleveDao;

  @BeforeClass
  public void beforeClass() {
    competenceDao = new CompetenceDaoImpl();
    ueDao = new UeDaoImpl();
    eleveDao = new EleveDaoImpl();
  }

  @Test(priority = 1)
  public void trouverParId() {
    assertNotNull(competenceDao.trouverParId(1));
  }

  @Test(priority = 2)
  public void trouverParNom() {
    assertNotNull(competenceDao.trouverParNom("Biologie"));
  }


  @Test(priority = 3)
  public void trouverUniqueParNom() {
    assertNotNull(competenceDao.trouverUniqueParNom("Biologie"));
  }

  @Test(priority = 4)
  public void trouverToutesLesCompetences() {
    assertNotNull(competenceDao.trouverToutesLesCompetences());
  }

  @Test(priority = 5)
  public void modifierCompetenceProfondeur() {
    
    Competence competence = new Competence();
    
    competence = this.competenceDao.trouverParId(1);
    
    competenceDao.modifierCompetence(competence, 2);
    
  }

  @Test(priority = 6)
  public void modifierCompetenceNom() {
    
    Competence competence = new Competence();
    
    competence = competenceDao.trouverParId(1);
    competenceDao.modifierCompetence(competence, "Test");
    
    assertEquals(competenceDao.trouverParId(1).getNom(), "Test", "Le nom à été modifié");
    
    competence = competenceDao.trouverParId(1);
    competenceDao.modifierCompetence(competence, "Travail en équipe");
    
    assertEquals(competenceDao.trouverParId(1).getNom(), "Travail en équipe",
        "Le nom à été modifié");
    
  }


  @Test(priority = 7)
  public void trouverParProfondeur() {
    assertNotNull(competenceDao.trouverParProfondeur(1));
  }

  @Test(priority = 8)
  public void ajouterCompetence() {
    
    Competence competence = new Competence();
    
    competence.setNom("CompetenceTest");
    competence.setIdParent(1);
    competence.setProfondeur(1);
    
    competenceDao.ajouterCompetence(competence);
    
    assertNotNull(competenceDao.trouverParId(competence.getId()));
    
  }

  @Test(priority = 9)
  public void supprimerCompetence() {
    
    Competence competence = new Competence();

    competence = competenceDao.trouverUniqueParNom("CompetenceTest");
    assertNotNull(this.competenceDao.trouverParNom("CompetenceTest"));
    
    competenceDao.supprimerCompetenceParNom(competence.getNom());
    assertNull(this.competenceDao.trouverUniqueParNom("CompetenceTest"));
 
  }

  @Test(priority = 10)
  public void recupererAssociationCompetenceUe() {
    assertNotNull(competenceDao.recupererAssociationCompetenceUe(1));
  }
  
  @Test(priority = 11)
  public void trouverIdParNomTest() {
    int id = this.competenceDao.trouverIdParNom("Travail en équipe");
    assertEquals(id, 1);
  }
  
  @Test(priority = 12)
  public void modifierCompetenceDeux() {
    
    final Competence nouvelleCompetence = new Competence();
    final Competence ancienneCompetence = new Competence();
    
    nouvelleCompetence.setNom("Travail en équipe");
    nouvelleCompetence.setIdParent(1);
    nouvelleCompetence.setProfondeur(1);
    
    ancienneCompetence.setId(1);
    this.competenceDao.modifierCompetence(nouvelleCompetence, ancienneCompetence);
    
    int profondeur = this.competenceDao.trouverUniqueParNom("Travail en équipe").getProfondeur();
    
    assertEquals(profondeur, 1);
    
  }
  
  @Test(priority = 13)
  public void associerCompetenceNiveauUe() {
    
    final Competence competence = new Competence();
    final UniteEnseignement ue = new UniteEnseignement();
    
    competence.setId(1);
    ue.setNom("Mathématiques");
    
    boolean excpt = false;
    
    try {
      this.competenceDao.associerCompetenceNiveauUe(competence, ue);
    } catch (DaoException exception) {
      excpt = true;
    }
    
    assertEquals(excpt, true);

  }
  
  @Test(priority = 14)
  public void recupererProfilEleve() {
    
    Map<Competence, Integer> profil;
    Eleve eleve = this.eleveDao.trouverParId(1);
    
    profil = this.competenceDao.recupererProfilEleve(eleve);
    
    assertNotNull(profil);
    
    
  }
  
  @Test(priority = 15)
  public void recupererCompetenceUe() {
    
    final UniteEnseignement ue = new UniteEnseignement();
    
    ue.setId(1);
    
    assertNotNull(this.competenceDao.listeCompetencesUe(ue));
    
  }
  
  @Test(priority = 15)
  public void recupererCompetenceMatiere() {
    
    final Matiere matiere = new Matiere();
    
    matiere.setId(1);
    
    assertNotNull(this.competenceDao.listeCompetencesMatiere(matiere));
          
  }
  
}
