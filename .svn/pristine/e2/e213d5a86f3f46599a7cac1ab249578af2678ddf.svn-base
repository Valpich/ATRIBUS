<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>EleveDaoImpl.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.dao</a> &gt; <span class="el_source">EleveDaoImpl.java</span></div><h1>EleveDaoImpl.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.dao;

import fr.eseo.atribus.entities.Competence;
import fr.eseo.atribus.entities.CompetenceEleve;
import fr.eseo.atribus.entities.Eleve;
import fr.eseo.atribus.entities.Promotion;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class EleveDaoImpl implements EleveDao {
<span class="nc" id="L21">  private static final Logger LOGGER = Logger.getLogger(EleveDaoImpl.class.getName());</span>
  private static final String EXCEPTION = &quot;Exception&quot;;

  private final DaoFactory daoFactory;
  private static final String SEL =
      &quot;SELECT eleve.id AS id_eleve, eleve.id_promotion AS id_promotion,utilisateur.*&quot;;
  private static final String SEL_DEUX =
      &quot; FROM eleve LEFT JOIN utilisateur ON utilisateur.id = eleve.id_utilisateur&quot;;
  private static final String SQL_SELECT_PAR_LOGIN_HASH =
      SEL + SEL_DEUX + &quot; WHERE utilisateur.login = ?&quot; + &quot; AND utilisateur.password = ?&quot;;
  private static final String SQL_INSERT = &quot;INSERT INTO eleve (id_utilisateur) VALUES (?)&quot;;
  private static final String SQL_SELECT_PAR_ID = SEL + SEL_DEUX + &quot; WHERE eleve.id = ?&quot;;
  private static final String SQL_SELECT_PAR_NOM = SEL + SEL_DEUX + &quot; WHERE utilisateur.nom = ?&quot;;
  private static final String SQL_SELECT_ALL = SEL + SEL_DEUX;
  
  private static final String SQL_SELECT_PAR_ID_UTILISATEUR =
      SEL + SEL_DEUX + &quot; WHERE id_utilisateur = ?&quot;;
  
  private static final String SQL_DELETE_PAR_ID_UTILISATEUR =
      &quot;DELETE FROM eleve WHERE id_utilisateur = ?&quot;;
  
  private static final String SQL_RECUPERER_COMP_ELEVE =
      &quot;SELECT * FROM eleve_associe_competence WHERE id_eleve = ?&quot;;
  
  private static final String SQL_RECUPERER_ID_USER =
      &quot;SELECT * FROM eleve WHERE id_utilisateur = ?&quot;;
  
  private static final String BEANSDAO = &quot;beansDao&quot;;

<span class="nc" id="L50">  EleveDaoImpl() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L52">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;contextDao&quot;);</span>
<span class="nc" id="L53">    this.daoFactory = (DaoFactory) bf.getFactory().getBean(&quot;daoFactory&quot;);</span>
<span class="nc" id="L54">  }</span>

  /* Implémentation de la méthode trouverParLogin() définie dans l'interface EleveBdd */
  @Override
  public Eleve trouverParLoginHash(String login, String hash) {
<span class="nc" id="L59">    return this.trouver(EleveDaoImpl.SQL_SELECT_PAR_LOGIN_HASH, login, hash);</span>
  }

  /* Implémentation de la méthode trouverParId() définie dans l'interface EleveBdd */
  @Override
  public Eleve trouverParId(int id) {
<span class="nc" id="L65">    return this.trouver(EleveDaoImpl.SQL_SELECT_PAR_ID, id);</span>
  }

  /* Implémentation de la méthode trouverParNom() définie dans l'interface EleveBdd */
  @Override
  public Eleve trouverParNom(String nom) {
<span class="nc" id="L71">    return this.trouver(EleveDaoImpl.SQL_SELECT_PAR_NOM, nom);</span>
  }
  
  private Eleve trouverParIdUtilisateur(int idUtilisateur) {
<span class="nc" id="L75">    return this.trouver(EleveDaoImpl.SQL_SELECT_PAR_ID_UTILISATEUR, idUtilisateur);</span>
  }

  @Override
  public List&lt;Eleve&gt; recupererListe() {
<span class="nc" id="L80">    final List&lt;Eleve&gt; listeEleve = new ArrayList&lt;&gt;();</span>
<span class="nc" id="L81">    Connection connexion = null;</span>
<span class="nc" id="L82">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L83">    ResultSet resultSet = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L87">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L88">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
          EleveDaoImpl.SQL_SELECT_ALL, false);
<span class="nc" id="L90">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L92" title="All 2 branches missed.">      while (resultSet.next()) {</span>
<span class="nc" id="L93">        listeEleve.add(map(resultSet));</span>
      }
<span class="nc" id="L95">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L96">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L98">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L99">    }</span>

<span class="nc" id="L101">    return listeEleve;</span>
  }
  
  /**
   * Récupérè l'ID utilisateur d'un élève.
   * @param eleve un eleve
   * @return retourne une l'ID utilisateur
   */
  @Override
  public int recupererIdUtilisateur(Eleve eleve) {
    
<span class="nc" id="L112">    Connection connexion = null;</span>
<span class="nc" id="L113">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L114">    ResultSet resultSet = null;</span>
    
    int idUtilisateur;

    try {
     
<span class="nc" id="L120">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L121">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L122">          EleveDaoImpl.SQL_RECUPERER_ID_USER, false, eleve.getId());</span>
<span class="nc" id="L123">      resultSet = preparedStatement.executeQuery();</span>
     
<span class="nc bnc" id="L125" title="All 2 branches missed.">      if (resultSet.next()) {</span>
<span class="nc" id="L126">        idUtilisateur = resultSet.getInt(&quot;id&quot;);</span>
      } else {
<span class="nc" id="L128">        idUtilisateur = 0;</span>
      }
<span class="nc" id="L130">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L131">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L133">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L134">    }</span>
    
<span class="nc" id="L136">    return idUtilisateur;</span>
    
  }

  @Override
  public Eleve ajouter(Eleve eleve) {
<span class="nc" id="L142">    Connection connexion = null;</span>
<span class="nc" id="L143">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L144">    final ResultSet valeursAutoGenerees = null;</span>

    try {
      final BeanFactoryReference bf =
<span class="nc" id="L148">          SingletonBeanFactoryLocator.getInstance().useBeanFactory(BEANSDAO);</span>
<span class="nc" id="L149">      final int idUtilisateur = ((UtilisateurDao) bf.getFactory().getBean(&quot;utilisateurDao&quot;))</span>
<span class="nc" id="L150">          .trouverIdParLogin(eleve.getLogin());</span>
      
      // Si il n'y a pas déja l'utilisateur associé
<span class="nc bnc" id="L153" title="All 2 branches missed.">      if (this.trouverParIdUtilisateur(idUtilisateur) == null) {</span>
<span class="nc" id="L154">        connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L155">        preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L156">            EleveDaoImpl.SQL_INSERT, true, idUtilisateur);</span>

<span class="nc" id="L158">        final int statut = preparedStatement.executeUpdate();</span>
        /* Analyse du statut retourné par la requête d'insertion */
<span class="nc bnc" id="L160" title="All 2 branches missed.">        if (statut == 0) {</span>
<span class="nc" id="L161">          throw new DaoException(</span>
              &quot;Échec de la création de l'eleve, aucune ligne ajoutée dans la table.&quot;);
        }
      }
      
      /* Récupération de l'id auto-généré par la requête d'insertion */
<span class="nc" id="L167">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L168">      EleveDaoImpl.LOGGER.log(Level.INFO, &quot;Exception&quot;, sqle);</span>
<span class="nc" id="L169">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L171">      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);</span>
<span class="nc" id="L172">    }</span>

<span class="nc" id="L174">    return eleve;</span>
  }
  
  
  @Override
  public int supprimer(Eleve eleve) {

    int statut;
<span class="nc" id="L182">    Connection connexion = null;</span>
<span class="nc" id="L183">    PreparedStatement preparedStatement = null;</span>


    try {
      /* Récupération de l'id_utilisateur */
      final BeanFactoryReference bf =
<span class="nc" id="L189">          SingletonBeanFactoryLocator.getInstance().useBeanFactory(BEANSDAO);</span>
<span class="nc" id="L190">      final int idUtilisateur = ((UtilisateurDao) bf.getFactory().getBean(&quot;utilisateurDao&quot;))</span>
<span class="nc" id="L191">          .trouverIdParLogin(eleve.getLogin());</span>

      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L194">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L195">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L196">          EleveDaoImpl.SQL_DELETE_PAR_ID_UTILISATEUR, false, idUtilisateur);</span>

<span class="nc" id="L198">      statut = preparedStatement.executeUpdate();</span>

<span class="nc" id="L200">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L201">      EleveDaoImpl.LOGGER.log(Level.INFO, EleveDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L202">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L204">      DaoUtilitaire.fermeturesSilencieuses(preparedStatement, connexion);</span>
<span class="nc" id="L205">    }</span>

<span class="nc" id="L207">    return statut;</span>
  }

  /*
   * Méthode générique utilisée pour retourner un adminsys depuis la base de données, correspondant
   * à la requête SQL donnée prenant en paramètres les objets passés en argument.
   */
  private Eleve trouver(String sql, Object... objets) {
<span class="nc" id="L215">    Connection connexion = null;</span>
<span class="nc" id="L216">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L217">    ResultSet resultSet = null;</span>
<span class="nc" id="L218">    Eleve eleve = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L222">      connexion = this.daoFactory.getConnection();</span>
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
<span class="nc" id="L227">      preparedStatement =</span>
<span class="nc" id="L228">          DaoUtilitaire.initialisationRequetePreparee(connexion, sql, false, objets);</span>
<span class="nc" id="L229">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L231" title="All 2 branches missed.">      if (resultSet.next()) {</span>
<span class="nc" id="L232">        eleve = map(resultSet);</span>
      }
<span class="nc" id="L234">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L235">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L237">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L238">    }</span>
<span class="nc" id="L239">    return eleve;</span>
  }
  
  /**
   * Liste les compétences d'un élève.
   * @param eleve un élève
   * @return une liste de compétence élève
   */
  @Override
  public List&lt;CompetenceEleve&gt; listerCompetenceEleve(Eleve eleve) {
    
<span class="nc" id="L250">    List&lt;CompetenceEleve&gt; listeCompetenceEleve = null;</span>
<span class="nc" id="L251">    CompetenceEleve competenceEleve = null;</span>
<span class="nc" id="L252">    Competence competence = null;</span>
<span class="nc" id="L253">    Connection connexion = null;</span>
<span class="nc" id="L254">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L255">    ResultSet resultSet = null;</span>
    
    try {
      
      final BeanFactoryReference bf =
<span class="nc" id="L260">          SingletonBeanFactoryLocator.getInstance().useBeanFactory(BEANSDAO);</span>
      
<span class="nc" id="L262">      CompetenceDao competenceDao = (CompetenceDao) bf.getFactory().getBean(&quot;competenceDao&quot;);</span>
      
<span class="nc" id="L264">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L265">      listeCompetenceEleve = new ArrayList&lt;&gt;();</span>
      
<span class="nc" id="L267">      preparedStatement =</span>
<span class="nc" id="L268">          DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L269">              EleveDaoImpl.SQL_RECUPERER_COMP_ELEVE, true, eleve.getId());</span>
      
<span class="nc" id="L271">      resultSet = preparedStatement.executeQuery();</span>
      
<span class="nc bnc" id="L273" title="All 2 branches missed.">      while (resultSet.next()) {</span>

<span class="nc" id="L275">        competence = competenceDao.trouverParId(resultSet.getInt(&quot;id_competence&quot;));</span>
        
<span class="nc" id="L277">        competenceEleve = new CompetenceEleve(competence);</span>
<span class="nc" id="L278">        competenceEleve.setNiveauCompetenceEleve(resultSet.getInt(&quot;niveau&quot;));</span>

<span class="nc" id="L280">        listeCompetenceEleve.add(competenceEleve);</span>

      }
      
<span class="nc" id="L284">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L285">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L287">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L288">    }</span>
    
<span class="nc" id="L290">    return listeCompetenceEleve;</span>
    
  }

  /*
   * Simple méthode utilitaire permettant de faire la correspondance (le mapping) entre une ligne
   * issue de la table des adminsyss (un ResultSet) et un bean Utilisateur.
   */
  private Eleve map(ResultSet resultSet) throws SQLException {
<span class="nc" id="L299">    final Eleve eleve = new Eleve();</span>
<span class="nc" id="L300">    eleve.setId(resultSet.getInt(&quot;id&quot;));</span>
<span class="nc" id="L301">    eleve.setIdEleve(resultSet.getInt(&quot;id_eleve&quot;));</span>
<span class="nc" id="L302">    eleve.setLogin(resultSet.getString(&quot;login&quot;));</span>
<span class="nc" id="L303">    eleve.setPassword(resultSet.getString(&quot;password&quot;));</span>
<span class="nc" id="L304">    eleve.setNom(resultSet.getString(&quot;nom&quot;));</span>
<span class="nc" id="L305">    eleve.setPrenom(resultSet.getString(&quot;prenom&quot;));</span>
<span class="nc" id="L306">    eleve.setEmail(resultSet.getString(&quot;email&quot;));</span>
<span class="nc" id="L307">    eleve.setDateInscription(resultSet.getTimestamp(&quot;date_inscription&quot;));</span>
    final BeanFactoryReference bf =
<span class="nc" id="L309">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(BEANSDAO);</span>
<span class="nc" id="L310">    PromotionDao promotionDao = (PromotionDao) bf.getFactory().getBean(&quot;promotionDao&quot;);</span>
<span class="nc" id="L311">    List&lt;Promotion&gt; promotions = promotionDao.trouverToutesLesPromotions();</span>
<span class="nc bnc" id="L312" title="All 2 branches missed.">    for (Promotion promotion : promotions) {</span>
<span class="nc bnc" id="L313" title="All 2 branches missed.">      if (promotion.getId() == resultSet.getInt(&quot;id_promotion&quot;)) {</span>
<span class="nc" id="L314">        eleve.setPromotion(promotion);</span>
      }
<span class="nc" id="L316">    }</span>
<span class="nc" id="L317">    eleve.setNotificationActive(resultSet.getBoolean(&quot;notification_active&quot;));</span>
<span class="nc" id="L318">    eleve.setNotificationMail(resultSet.getBoolean(&quot;notification_mail&quot;));</span>
<span class="nc" id="L319">    eleve.setFrequenceNotificationMail(resultSet.getInt(&quot;frequence_notification_mail&quot;));</span>
<span class="nc" id="L320">    return eleve;</span>
  }
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>