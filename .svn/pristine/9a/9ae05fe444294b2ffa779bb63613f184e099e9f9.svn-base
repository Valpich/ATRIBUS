<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>ModifierCompetenceForm.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.forms</a> &gt; <span class="el_source">ModifierCompetenceForm.java</span></div><h1>ModifierCompetenceForm.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.forms;

import fr.eseo.atribus.dao.CompetenceDao;
import fr.eseo.atribus.dao.DaoException;
import fr.eseo.atribus.entities.Competence;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;

public class ModifierCompetenceForm {
<span class="nc" id="L19">  private static final Logger LOGGER = Logger.getLogger(ModifierCompetenceForm.class.getName());</span>
  private static final String CHAMP_NOM = &quot;NouveauNomCompetence&quot;;
  private static final String CHAMP_NIVEAU = &quot;nouveauNiveau&quot;;
  private static final String EXCEPTION = &quot;Exception&quot;;

  private final CompetenceDao competenceDao;

  private String resultat;
<span class="nc" id="L27">  private final Map&lt;String, String&gt; erreurs = new HashMap&lt;&gt;();</span>

<span class="nc" id="L29">  public ModifierCompetenceForm() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L31">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Competence */
<span class="nc" id="L33">    this.competenceDao = (CompetenceDao) bf.getFactory().getBean(&quot;competenceDao&quot;);</span>
<span class="nc" id="L34">  }</span>

  public String getResultat() {
<span class="nc" id="L37">    return this.resultat;</span>
  }

  public Map&lt;String, String&gt; getErreurs() {
<span class="nc" id="L41">    return this.erreurs;</span>
  }

  public void modifierCompetence(HttpServletRequest request) {
<span class="nc" id="L45">    request.getSession();</span>
<span class="nc" id="L46">    final String nouveauNom =</span>
<span class="nc" id="L47">        ModifierCompetenceForm.getValeurChamp(request, ModifierCompetenceForm.CHAMP_NOM);</span>
<span class="nc" id="L48">    final String niveau =</span>
<span class="nc" id="L49">        ModifierCompetenceForm.getValeurChamp(request, ModifierCompetenceForm.CHAMP_NIVEAU);</span>

<span class="nc" id="L51">    final int idComp = Integer.parseInt(request.getParameter(&quot;competenceId&quot;));</span>

<span class="nc" id="L53">    final Competence competence = this.competenceDao.trouverParId(idComp);</span>
    /**
     * final int idComp = new Integer((Integer) session.getAttribute(&quot;idComp&quot;));
     * 
     * final Competence competence = this.competenceDao.trouverParId(idComp);
     */

    try {
<span class="nc bnc" id="L61" title="All 2 branches missed.">      if (niveau != null) {</span>
<span class="nc" id="L62">        this.traiterNiveau(niveau);</span>
      }
<span class="nc bnc" id="L64" title="All 2 branches missed.">      if (nouveauNom != null) {</span>
<span class="nc" id="L65">        this.traiterNouveauNom(nouveauNom);</span>
      }

<span class="nc bnc" id="L68" title="All 2 branches missed.">      if (this.erreurs.isEmpty()) {</span>
<span class="nc bnc" id="L69" title="All 2 branches missed.">        if (niveau != null) {</span>
<span class="nc" id="L70">          this.competenceDao.modifierCompetence(competence, Integer.parseInt(niveau));</span>
        }
<span class="nc bnc" id="L72" title="All 2 branches missed.">        if (nouveauNom != null) {</span>
<span class="nc" id="L73">          this.competenceDao.modifierCompetence(competence, nouveauNom);</span>
        }
<span class="nc" id="L75">        this.resultat = &quot;Succès de l'inscription.&quot;;</span>
      } else {
<span class="nc" id="L77">        this.resultat = &quot;Échec de l'inscription.&quot;;</span>
      }
<span class="nc" id="L79">    } catch (final DaoException bdde) {</span>
<span class="nc" id="L80">      this.resultat =</span>
          &quot;Échec de l'inscription : une erreur imprévue est survenue, merci de réessayer dans quelques instants.&quot;;
<span class="nc" id="L82">      ModifierCompetenceForm.LOGGER.log(Level.INFO, EXCEPTION, bdde);</span>
<span class="nc" id="L83">    }</span>
<span class="nc" id="L84">  }</span>

  private static String getValeurChamp(HttpServletRequest request, String nomChamp) {
<span class="nc" id="L87">    final String valeur = request.getParameter(nomChamp);</span>
<span class="nc bnc" id="L88" title="All 4 branches missed.">    if (valeur == null || valeur.trim().length() == 0) {</span>
<span class="nc" id="L89">      return null;</span>
    } else {
<span class="nc" id="L91">      return valeur.trim();</span>
    }
  }

  private void validationNiveau(String niveau) throws FormValidationException {
<span class="nc bnc" id="L96" title="All 2 branches missed.">    if (!niveau.matches(&quot;([0-9]+)&quot;)) {</span>
<span class="nc" id="L97">      throw new FormValidationException(&quot;Merci de saisir un niveau valide.&quot;);</span>
    }

<span class="nc" id="L100">  }</span>

  private void validationNouveauNom(String nouveauNom) throws FormValidationException {

<span class="nc bnc" id="L104" title="All 4 branches missed.">    if (!(nouveauNom.length() &lt; 100 &amp;&amp; nouveauNom.length() &gt; 4)) {</span>
<span class="nc" id="L105">      throw new FormValidationException(&quot;Merci de saisir un nom valide.&quot;);</span>
    }
<span class="nc" id="L107">  }</span>

  private void traiterNouveauNom(String nouveauNom) {
    try {
<span class="nc" id="L111">      this.validationNouveauNom(nouveauNom);</span>
<span class="nc" id="L112">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L113">      ModifierCompetenceForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L114">      this.setErreur(ModifierCompetenceForm.CHAMP_NOM, fve.getMessage());</span>
<span class="nc" id="L115">    }</span>
<span class="nc" id="L116">  }</span>

  private void traiterNiveau(String niveau) {
    try {
<span class="nc" id="L120">      this.validationNiveau(niveau);</span>
<span class="nc" id="L121">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L122">      ModifierCompetenceForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L123">      this.setErreur(ModifierCompetenceForm.CHAMP_NIVEAU, fve.getMessage());</span>
<span class="nc" id="L124">    }</span>
<span class="nc" id="L125">  }</span>

  private void setErreur(String champ, String message) {
<span class="nc" id="L128">    this.erreurs.put(champ, message);</span>
<span class="nc" id="L129">  }</span>

  public List&lt;Competence&gt; trouverParNom(String nom) {
<span class="nc" id="L132">    return this.competenceDao.trouverParNom(nom);</span>

  }
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>