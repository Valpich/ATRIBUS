<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>MatiereDaoImpl.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.dao</a> &gt; <span class="el_source">MatiereDaoImpl.java</span></div><h1>MatiereDaoImpl.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.dao;

import fr.eseo.atribus.entities.CompetenceValidable;
import fr.eseo.atribus.entities.EnseignantRefMatiere;
import fr.eseo.atribus.entities.Matiere;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



public class MatiereDaoImpl implements MatiereDao {
  private final DaoFactory daoFactory;
  private static final String SQL_INSERT =
      &quot;INSERT INTO matiere (nom, coefficient,id_enseignant_ref,id_unite_enseignement) VALUES (?,?,?,?)&quot;;
  private static final String SQL_SELECT_PAR_NOM = &quot;SELECT * FROM matiere WHERE nom =?&quot;;
  private static final String SQL_SELECT_PAR_ID = &quot;SELECT * FROM matiere WHERE id =?&quot;;
  private static final String SQL_SELECT_ALL = &quot;SELECT * FROM matiere&quot;;
  private static final String SQL_SELECT_MATIERE_PAR_UE = &quot;SELECT * FROM matiere where id_unite_enseignement is not null&quot;;
  
  private static final String SQL_SELECT_MATIERE_ASSOCIATION =
      &quot;SELECT * FROM matiere_associe_competence WHERE id_matiere = ?&quot;;

<span class="nc" id="L33">  MatiereDaoImpl() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L35">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;contextDao&quot;);</span>
<span class="nc" id="L36">    this.daoFactory = (DaoFactory) bf.getFactory().getBean(&quot;daoFactory&quot;);</span>
<span class="nc" id="L37">  }</span>

  /* Implémentation de la méthode trouverParNom() définie dans l'interface MatiereBDD */
  @Override
  public Matiere trouverParNom(String nom) {
<span class="nc" id="L42">    return this.trouver(MatiereDaoImpl.SQL_SELECT_PAR_NOM, nom);</span>
  }

  /* Implémentation de la méthode trouverParId() définie dans l'interface MatiereBDD */
  @Override
  public Matiere trouverParId(int id) {
<span class="nc" id="L48">    return this.trouver(MatiereDaoImpl.SQL_SELECT_PAR_ID, id);</span>
  }

  /* Implémentation de la méthode trouverParNom() définie dans l'interface MatiereBDD */
  @Override
  public int trouverIdParNom(String nom) {
<span class="nc" id="L54">    return DaoUtilitaire.trouverId(this.daoFactory, MatiereDaoImpl.SQL_SELECT_PAR_NOM, nom);</span>
  }

  @Override
  public void ajouter(Matiere matiere, EnseignantRefMatiere utilisateur) {
<span class="nc" id="L59">    Connection connexion = null;</span>
<span class="nc" id="L60">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L61">    ResultSet valeursAutoGenerees = null;</span>
    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L64">      connexion = this.daoFactory.getConnection();</span>

<span class="nc" id="L66">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L67">          MatiereDaoImpl.SQL_INSERT, true, matiere.getNom(), matiere.getCoefficient(),</span>
          null, 
<span class="nc" id="L69">          matiere.getUe().getId());</span>

<span class="nc" id="L71">      final int statut = preparedStatement.executeUpdate();</span>

      /* Analyse du statut retourné par la requête d'insertion */
<span class="nc bnc" id="L74" title="All 2 branches missed.">      if (statut == 0) {</span>
<span class="nc" id="L75">        throw new DaoException(</span>
            &quot;Échec de la création de la matière, aucune ligne ajoutée dans la table.&quot;);
      }

      /* Récupération de l'id auto-généré par la requête d'insertion */
<span class="nc" id="L80">      valeursAutoGenerees = preparedStatement.getGeneratedKeys();</span>
<span class="nc bnc" id="L81" title="All 2 branches missed.">      if (valeursAutoGenerees.next()) {</span>
        /* Puis initialisation de la propriété id du bean Matiere avec sa valeur */
<span class="nc" id="L83">        matiere.setId(valeursAutoGenerees.getInt(1));</span>
      } else {
<span class="nc" id="L85">        throw new DaoException(</span>
            &quot;Échec de la création de la matière en base, aucun ID auto-généré retourné.&quot;);
      }
<span class="nc" id="L88">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L89">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L91">      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);</span>
<span class="nc" id="L92">    }</span>

<span class="nc" id="L94">  }</span>

  /*
   * Méthode générique utilisée pour retourner un utilisateur depuis la base de données,
   * correspondant à la requête SQL donnée prenant en paramètres les objets passés en argument.
   */
  private Matiere trouver(String sql, Object... objets) {
<span class="nc" id="L101">    Connection connexion = null;</span>
<span class="nc" id="L102">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L103">    ResultSet resultSet = null;</span>
<span class="nc" id="L104">    Matiere matiere = null;</span>
    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L107">      connexion = this.daoFactory.getConnection();</span>
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
<span class="nc" id="L112">      preparedStatement =</span>
<span class="nc" id="L113">          DaoUtilitaire.initialisationRequetePreparee(connexion, sql, false, objets);</span>
<span class="nc" id="L114">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L116" title="All 2 branches missed.">      if (resultSet.next()) {</span>
<span class="nc" id="L117">        matiere = this.map(resultSet);</span>
      }
<span class="nc" id="L119">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L120">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L122">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L123">    }</span>
<span class="nc" id="L124">    return matiere;</span>
  }

  @Override
  public List&lt;Matiere&gt; trouverToutesLesMatieres() {
<span class="nc" id="L129">    Connection connexion = null;</span>
<span class="nc" id="L130">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L131">    ResultSet resultSet = null;</span>
<span class="nc" id="L132">    ArrayList&lt;Matiere&gt; matieres = null;</span>
    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L135">      connexion = this.daoFactory.getConnection();</span>
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
<span class="nc" id="L140">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
          MatiereDaoImpl.SQL_SELECT_ALL, false);
<span class="nc" id="L142">      resultSet = preparedStatement.executeQuery();</span>
<span class="nc" id="L143">      matieres = new ArrayList&lt;&gt;();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L145" title="All 2 branches missed.">      while (resultSet.next()) {</span>
<span class="nc" id="L146">        matieres.add(this.map(resultSet));</span>
      }
<span class="nc" id="L148">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L149">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L151">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L152">    }</span>
<span class="nc" id="L153">    return matieres;</span>
  }

  private Map&lt;Integer, Boolean&gt; trouverToutesLesAssociations(Matiere matiere) {
<span class="nc" id="L157">    Connection connexion = null;</span>
<span class="nc" id="L158">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L159">    ResultSet resultSet = null;</span>
<span class="nc" id="L160">    Map&lt;Integer, Boolean&gt; idsEtValide = null;</span>
    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L163">      connexion = this.daoFactory.getConnection();</span>
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
<span class="nc" id="L168">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L169">          MatiereDaoImpl.SQL_SELECT_MATIERE_ASSOCIATION, false, matiere.getId());</span>
<span class="nc" id="L170">      resultSet = preparedStatement.executeQuery();</span>
<span class="nc" id="L171">      idsEtValide = new HashMap&lt;&gt;();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L173" title="All 2 branches missed.">      while (resultSet.next()) {</span>
<span class="nc" id="L174">        idsEtValide.put(resultSet.getInt(&quot;id_competence&quot;), resultSet.getBoolean(&quot;valide&quot;));</span>
      }
<span class="nc" id="L176">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L177">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L179">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L180">    }</span>
<span class="nc" id="L181">    return idsEtValide;</span>
  }

  /*
   * Simple méthode utilitaire permettant de faire la correspondance (le mapping) entre une ligne
   * issue de la table des utilisateurs (un ResultSet) et un bean Matiere.
   */
  private Matiere map(ResultSet resultSet) throws SQLException {
<span class="nc" id="L189">    final Matiere matiere = new Matiere();</span>
<span class="nc" id="L190">    matiere.setNom(resultSet.getString(&quot;nom&quot;));</span>
<span class="nc" id="L191">    matiere.setCoefficient(resultSet.getInt(&quot;coefficient&quot;));</span>
<span class="nc" id="L192">    matiere.setId(resultSet.getInt(&quot;id&quot;));</span>
    final BeanFactoryReference bf =
<span class="nc" id="L194">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
<span class="nc" id="L195">    final UeDao ueDao = (UeDao) bf.getFactory().getBean(&quot;ueDao&quot;);</span>
<span class="nc" id="L196">    final CompetenceDao competenceDao = (CompetenceDao) bf.getFactory().getBean(&quot;competenceDao&quot;);</span>
<span class="nc" id="L197">    matiere.setUe(ueDao.trouverUeParId(resultSet.getInt(&quot;id_unite_enseignement&quot;)));</span>
<span class="nc" id="L198">    matiere.getUe().setCompetences(</span>
<span class="nc" id="L199">        competenceDao.recupererAssociationCompetenceUe(resultSet.getInt(&quot;id_unite_enseignement&quot;)));</span>
<span class="nc" id="L200">    matiere.setCompetences(new ArrayList&lt;&gt;());</span>
<span class="nc bnc" id="L201" title="All 2 branches missed.">    for (Map.Entry&lt;Integer, Boolean&gt; entry : trouverToutesLesAssociations(matiere).entrySet()) {</span>
<span class="nc" id="L202">      CompetenceValidable comp =</span>
<span class="nc" id="L203">          new CompetenceValidable(competenceDao.trouverParId(entry.getKey()));</span>
<span class="nc" id="L204">      comp.setValide(entry.getValue());</span>
<span class="nc" id="L205">      matiere.getCompetences().add(comp);</span>
<span class="nc" id="L206">    }</span>
<span class="nc" id="L207">    return matiere;</span>
  }

  @Override
  public List&lt;Matiere&gt; trouverMatiereParUe() {
<span class="nc" id="L212">    Connection connexion = null;</span>
<span class="nc" id="L213">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L214">    ResultSet resultSet = null;</span>
<span class="nc" id="L215">    ArrayList&lt;Matiere&gt; matieres = null;</span>
    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L218">      connexion = this.daoFactory.getConnection();</span>
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
<span class="nc" id="L223">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
          MatiereDaoImpl.SQL_SELECT_ALL, false);
<span class="nc" id="L225">      resultSet = preparedStatement.executeQuery();</span>
<span class="nc" id="L226">      matieres = new ArrayList&lt;&gt;();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L228" title="All 2 branches missed.">      while (resultSet.next()) {</span>
<span class="nc" id="L229">        matieres.add(this.map(resultSet));</span>
      }
<span class="nc" id="L231">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L232">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L234">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L235">    }</span>
<span class="nc" id="L236">    return matieres;</span>
    
  }

}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>