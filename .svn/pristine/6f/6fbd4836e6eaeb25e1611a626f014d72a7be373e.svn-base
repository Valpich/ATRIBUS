<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>AddMatiereForm.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.forms</a> &gt; <span class="el_source">AddMatiereForm.java</span></div><h1>AddMatiereForm.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.forms;

import fr.eseo.atribus.dao.DaoException;
import fr.eseo.atribus.dao.EnseignantRefMatiereDao;
import fr.eseo.atribus.dao.MatiereDao;
import fr.eseo.atribus.dao.SemestreDao;
import fr.eseo.atribus.dao.UeDao;
import fr.eseo.atribus.entities.EnseignantRefMatiere;
import fr.eseo.atribus.entities.Matiere;
import fr.eseo.atribus.entities.Semestre;
import fr.eseo.atribus.entities.UniteEnseignement;
import fr.eseo.atribus.entities.Utilisateur;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

public class AddMatiereForm {
<span class="nc" id="L27">  private static final Logger LOGGER = Logger.getLogger(AddMatiereForm.class.getName());</span>

  private static final String CHAMP_NOM = &quot;nom&quot;;
  private static final String CHAMP_COEFFICIENT = &quot;coefficient_matiere&quot;;
  private static final String CHAMP_SEMESTRE = &quot;listeSemestre&quot;;
  private static final String CHAMP_UE = &quot;listeUe&quot;;
  private static final String EXCEPTION = &quot;Exception&quot;;
  private static final String CHAMP_ENSEIGNANT_REF = &quot;listeEnseignant&quot;;
  public static final String ATT_SESSION_USER = &quot;sessionUtilisateur&quot;;
  private String resultat;
<span class="nc" id="L37">  private final Map&lt;String, String&gt; erreurs = new HashMap&lt;&gt;();</span>

  private final MatiereDao matiereDao;
  private final SemestreDao semestreDao;
  private final UeDao ueDao;
  private final EnseignantRefMatiereDao enseignantDao;


<span class="nc" id="L45">  public AddMatiereForm() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L47">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Matiere */
<span class="nc" id="L49">    this.matiereDao = (MatiereDao) bf.getFactory().getBean(&quot;matiereDao&quot;);</span>

    /* Récupération d'une instance de notre DAO Semestre */
<span class="nc" id="L52">    this.semestreDao = (SemestreDao) bf.getFactory().getBean(&quot;semestreDao&quot;);</span>

    /* Récupération d'une instance de notre DAO Ue */
<span class="nc" id="L55">    this.ueDao = (UeDao) bf.getFactory().getBean(&quot;ueDao&quot;);</span>

    /* Récupération d'une instance de notre DAO EnseignantRefMatiere */
<span class="nc" id="L58">    this.enseignantDao =</span>
<span class="nc" id="L59">        (EnseignantRefMatiereDao) bf.getFactory().getBean(&quot;enseignantRefMatiereDao&quot;);</span>

<span class="nc" id="L61">  }</span>

  public String getResultat() {
<span class="nc" id="L64">    return this.resultat;</span>
  }

  public Map&lt;String, String&gt; getErreurs() {
<span class="nc" id="L68">    return this.erreurs;</span>
  }

  public Matiere addMatiere(HttpServletRequest request) {
<span class="nc" id="L72">    final String nom = AddMatiereForm.getValeurChamp(request, AddMatiereForm.CHAMP_NOM);</span>
<span class="nc" id="L73">    final String coefficient =</span>
<span class="nc" id="L74">        AddMatiereForm.getValeurChamp(request, AddMatiereForm.CHAMP_COEFFICIENT);</span>
<span class="nc" id="L75">    final String semestre = AddMatiereForm.getValeurChamp(request, AddMatiereForm.CHAMP_SEMESTRE);</span>
<span class="nc" id="L76">    final String nomUe = AddMatiereForm.getValeurChamp(request, AddMatiereForm.CHAMP_UE);</span>
<span class="nc" id="L77">    AddMatiereForm.getValeurChamp(request, AddMatiereForm.CHAMP_ENSEIGNANT_REF);</span>

<span class="nc" id="L79">    final Matiere matiere = new Matiere();</span>
<span class="nc" id="L80">    EnseignantRefMatiere utilisateur = null;</span>

<span class="nc" id="L82">    final HttpServletRequest requete = request;</span>
<span class="nc" id="L83">    final HttpSession session = requete.getSession();</span>
    @SuppressWarnings(&quot;unchecked&quot;)
<span class="nc" id="L85">    final List&lt;Utilisateur&gt; listeUtilisateur =</span>
<span class="nc" id="L86">        (List&lt;Utilisateur&gt;) session.getAttribute(ATT_SESSION_USER);</span>
<span class="nc bnc" id="L87" title="All 2 branches missed.">    for (int i = 0; i &lt; listeUtilisateur.size(); i++) {</span>
<span class="nc bnc" id="L88" title="All 2 branches missed.">      if (listeUtilisateur.get(i).getClass().equals(EnseignantRefMatiere.class)) {</span>
<span class="nc" id="L89">        utilisateur = (EnseignantRefMatiere) listeUtilisateur.get(i);</span>
      }
    }

    try {
<span class="nc" id="L94">      this.traiterNom(nom, matiere);</span>
<span class="nc" id="L95">      this.traiterSemestre(semestre, matiere);</span>
<span class="nc" id="L96">      this.traiterCoefficient(coefficient, matiere);</span>
<span class="nc" id="L97">      this.traiterUe(nomUe, matiere);</span>
<span class="nc bnc" id="L98" title="All 2 branches missed.">      if (this.erreurs.isEmpty()) {</span>
<span class="nc" id="L99">        this.matiereDao.ajouter(matiere, utilisateur);</span>
<span class="nc" id="L100">        this.resultat = &quot;Succès de l'ajout.&quot;;</span>
      } else {
<span class="nc" id="L102">        this.resultat = &quot;Échec de l'ajout.&quot;;</span>
      }
<span class="nc" id="L104">    } catch (final DaoException bdde) {</span>
<span class="nc" id="L105">      this.resultat = &quot;Échec de l'ajout : une erreur imprévue est survenue,&quot;</span>
          + &quot; merci de réessayer dans quelques instants.&quot;;
<span class="nc" id="L107">      AddMatiereForm.LOGGER.log(Level.INFO, EXCEPTION, bdde);</span>
<span class="nc" id="L108">    }</span>
<span class="nc" id="L109">    return matiere;</span>
  }

  private void traiterUe(String ue, Matiere matiere) {
    try {
<span class="nc bnc" id="L114" title="All 2 branches missed.">      if (ue != null) {</span>
<span class="nc" id="L115">        matiere.setUe(this.ueDao.trouverUeParNom(ue));</span>
      } else {
<span class="nc" id="L117">        matiere.setUe(null);</span>
      }
<span class="nc" id="L119">    } catch (final Exception exc) {</span>
<span class="nc" id="L120">      AddMatiereForm.LOGGER.log(Level.INFO, EXCEPTION, exc);</span>
<span class="nc" id="L121">      this.setErreur(AddMatiereForm.CHAMP_UE, exc.getMessage());</span>
<span class="nc" id="L122">    }</span>
<span class="nc" id="L123">  }</span>
  
/**
  private void traiterEnseignant(String enseignant, EnseignantRefMatiere enseignantRef) {
    try {
      if (enseignant != null) {
        // enseignantRef = this.enseignantDao.

      }
    } catch (final Exception exc) {
      AddMatiereForm.LOGGER.log(Level.INFO, EXCEPTION, exc);
      this.setErreur(AddMatiereForm.CHAMP_ENSEIGNANT_REF, exc.getMessage());
    }

  }
*/
  private void traiterCoefficient(String coefficient, Matiere matiere) {
    try {
<span class="nc bnc" id="L141" title="All 2 branches missed.">      if (coefficient != null) {</span>
<span class="nc" id="L142">        matiere.setCoefficient(Float.parseFloat(coefficient));</span>
      } else {
<span class="nc" id="L144">        matiere.setCoefficient(0);</span>
      }
<span class="nc" id="L146">    } catch (final Exception exc) {</span>
<span class="nc" id="L147">      this.setErreur(AddMatiereForm.CHAMP_COEFFICIENT, exc.getMessage());</span>
<span class="nc" id="L148">      AddMatiereForm.LOGGER.log(Level.INFO, EXCEPTION, exc);</span>
<span class="nc" id="L149">    }</span>
<span class="nc" id="L150">  }</span>

  private void traiterNom(String nom, Matiere matiere) {
    try {
<span class="nc" id="L154">      this.validationNom(nom);</span>
<span class="nc" id="L155">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L156">      this.setErreur(AddMatiereForm.CHAMP_NOM, fve.getMessage());</span>
<span class="nc" id="L157">      AddMatiereForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L158">    }</span>
<span class="nc" id="L159">    matiere.setNom(nom);</span>
<span class="nc" id="L160">  }</span>

  private void validationNom(String nom) throws FormValidationException {
<span class="nc bnc" id="L163" title="All 2 branches missed.">    if (nom == null) {</span>
<span class="nc" id="L164">      throw new FormValidationException(</span>
          &quot;Le nom de la matière doit contenir au maximum 20 caractères.&quot;);
<span class="nc bnc" id="L166" title="All 2 branches missed.">    } else if (this.matiereDao.trouverParNom(nom) != null) {</span>
<span class="nc" id="L167">      throw new FormValidationException(</span>
          &quot;Cette matière existe déjà, merci d'en choisir un autre nom.&quot;);
    }
<span class="nc" id="L170">  }</span>

  private void traiterSemestre(String semestre, Matiere matiere) {
    try {
<span class="nc bnc" id="L174" title="All 2 branches missed.">      if (semestre != null) {</span>
        // TROUVER le semestre en BDD
        /** matiere.setSemestre(Integer.parseInt(semestre)); TOD : remplacer */
      } else {
<span class="nc" id="L178">        matiere.setSemestre(null);</span>
      }
<span class="nc" id="L180">    } catch (final Exception exc) {</span>
<span class="nc" id="L181">      this.setErreur(AddMatiereForm.CHAMP_SEMESTRE, exc.getMessage());</span>
<span class="nc" id="L182">      AddMatiereForm.LOGGER.log(Level.INFO, EXCEPTION, exc);</span>

<span class="nc" id="L184">    }</span>
<span class="nc" id="L185">  }</span>

  /*
   * Ajoute un message correspondant au champ spécifié à la map des erreurs.
   */
  private void setErreur(String champ, String message) {
<span class="nc" id="L191">    this.erreurs.put(champ, message);</span>
<span class="nc" id="L192">  }</span>

  /*
   * Méthode utilitaire qui retourne null si un champ est vide, et son contenu sinon.
   */
  private static String getValeurChamp(HttpServletRequest request, String nomChamp) {
<span class="nc" id="L198">    final String valeur = request.getParameter(nomChamp);</span>
<span class="nc bnc" id="L199" title="All 4 branches missed.">    if (valeur == null || valeur.trim().length() == 0) {</span>
<span class="nc" id="L200">      return null;</span>
    } else {
<span class="nc" id="L202">      return valeur.trim();</span>
    }
  }

  public List&lt;UniteEnseignement&gt; getListUe() {
<span class="nc" id="L207">    return this.ueDao.listerUe();</span>
  }

  public List&lt;Semestre&gt; getListSemestre() {
<span class="nc" id="L211">    return this.semestreDao.listerSemestre();</span>
  }

  public List&lt;EnseignantRefMatiere&gt; getListEnseignantRef() {
<span class="nc" id="L215">    return this.enseignantDao.recupererListe();</span>
  }

}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>