<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>NotificationUpdater.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.timers</a> &gt; <span class="el_source">NotificationUpdater.java</span></div><h1>NotificationUpdater.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.timers;

import fr.eseo.atribus.dao.NotificationDao;
import fr.eseo.atribus.entities.Utilisateur;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.util.Set;
import java.util.logging.Logger;

import javax.servlet.ServletContext;

@Service
public class NotificationUpdater {
<span class="nc" id="L19">  private static final Logger LOGGER = Logger.getLogger(NotificationUpdater.class.getName());</span>

  @Autowired(required = true)
  ServletContext servletContext;
  
  NotificationDao notificationDao;
  
<span class="nc" id="L26">  public NotificationUpdater() {</span>
<span class="nc" id="L27">    NotificationUpdater.LOGGER.info(&quot;Instantiation du rafraichisseur de notifications&quot;);</span>
    final BeanFactoryReference bf =
<span class="nc" id="L29">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Notification */
<span class="nc" id="L31">    this.notificationDao = (NotificationDao) bf.getFactory().getBean(&quot;notificationDao&quot;);</span>
<span class="nc" id="L32">  }</span>
  
  public ServletContext getServletContext() {
<span class="nc" id="L35">    return servletContext;</span>
  }

  public void setServletContext(ServletContext servletContext) {
<span class="nc" id="L39">    this.servletContext = servletContext;</span>
<span class="nc" id="L40">  }</span>

  /**
   * Mise à jour automatique des notifications toutes les secondes.
   */
  @SuppressWarnings(&quot;unchecked&quot;)
  @Scheduled(fixedDelay = 1000)
  public void executer() {
<span class="nc bnc" id="L48" title="All 2 branches missed.">    for (Utilisateur utilisateur : (Set&lt;Utilisateur&gt;) servletContext.getAttribute(&quot;utilisateurs&quot;)) {</span>
<span class="nc" id="L49">      utilisateur.setNotifications(notificationDao.trouverToutesLesNotification(utilisateur));</span>
<span class="nc" id="L50">    }</span>
<span class="nc" id="L51">  }</span>
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>