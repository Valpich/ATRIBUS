<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>FiltreUtilisateur.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.filters</a> &gt; <span class="el_source">FiltreUtilisateur.java</span></div><h1>FiltreUtilisateur.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.filters;

import fr.eseo.atribus.entities.Utilisateur;

import java.io.IOException;
import java.util.List;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 * Servlet Filter implementation class FiltreDirecteurEtude.
 */
public class FiltreUtilisateur implements Filter {
  public static final String ACCES_PUBLIC = &quot;/connexion&quot;;
  public static final String ATT_SESSION_USER = &quot;sessionUtilisateur&quot;;

  /**
   * Default constructor.
   */
  public FiltreUtilisateur() {
<span class="nc" id="L29">    super();</span>
<span class="nc" id="L30">  }</span>

  /**
   * @see Filter#destroy().
   */
  @Override
  public void destroy() {
<span class="nc" id="L37">    return;</span>
  }

  /**
   * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain).
   */
  @Override
  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
      throws IOException, ServletException {
<span class="nc" id="L46">    final HttpServletRequest requete = (HttpServletRequest) request;</span>
<span class="nc" id="L47">    final HttpServletResponse reponse = (HttpServletResponse) response;</span>

    /* Récupération de la session depuis la requête */
<span class="nc" id="L50">    final HttpSession session = requete.getSession();</span>

    /**
     * Si l'objet utilisateur n'existe pas dans la session en cours, alors l'utilisateur n'est pas
     * connecté.
     */
<span class="nc bnc" id="L56" title="All 2 branches missed.">    if (session.getAttribute(FiltreUtilisateur.ATT_SESSION_USER) == null) {</span>
<span class="nc" id="L57">      boolean autorisation = false;</span>
<span class="nc" id="L58">      if (((HttpServletRequest) request).getRequestURI()</span>
<span class="nc bnc" id="L59" title="All 2 branches missed.">          .startsWith(requete.getContextPath() + &quot;/connexion&quot;)</span>
<span class="nc" id="L60">          || ((HttpServletRequest) request).getRequestURI()</span>
<span class="nc bnc" id="L61" title="All 2 branches missed.">              .startsWith(requete.getContextPath() + &quot;/resources&quot;)) {</span>
<span class="nc" id="L62">        autorisation = true;</span>
      }
<span class="nc bnc" id="L64" title="All 2 branches missed.">      if (autorisation) {</span>
<span class="nc" id="L65">        chain.doFilter(request, response);</span>
      } else {
<span class="nc" id="L67">        session.invalidate();</span>
<span class="nc" id="L68">        reponse.sendRedirect(requete.getContextPath() + FiltreUtilisateur.ACCES_PUBLIC);</span>
      }
<span class="nc" id="L70">    } else {</span>
      @SuppressWarnings(&quot;unchecked&quot;)
<span class="nc" id="L72">      final List&lt;Utilisateur&gt; listeUtilisateur =</span>
<span class="nc" id="L73">          (List&lt;Utilisateur&gt;) session.getAttribute(FiltreUtilisateur.ATT_SESSION_USER);</span>
<span class="nc" id="L74">      boolean autorisation = false;</span>
<span class="nc bnc" id="L75" title="All 2 branches missed.">      for (int i = 0; i &lt; listeUtilisateur.size(); i++) {</span>
<span class="nc bnc" id="L76" title="All 2 branches missed.">        if (listeUtilisateur.get(i).getClass().equals(Utilisateur.class)) {</span>
<span class="nc" id="L77">          autorisation = true;</span>
        }
      }
<span class="nc bnc" id="L80" title="All 2 branches missed.">      if (autorisation) {</span>
<span class="nc" id="L81">        chain.doFilter(request, response);</span>
      } else {
<span class="nc" id="L83">        session.invalidate();</span>
<span class="nc" id="L84">        reponse.sendRedirect(requete.getContextPath() + FiltreUtilisateur.ACCES_PUBLIC);</span>
      }
    }
<span class="nc" id="L87">  }</span>

  /**
   * @see Filter#init(FilterConfig).
   */
  @Override
  public void init(FilterConfig fiConfig) throws ServletException {
<span class="nc" id="L94">    return;</span>
  }

}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>