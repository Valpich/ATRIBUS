<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>DirecteurProgrammesDaoImpl.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.dao</a> &gt; <span class="el_source">DirecteurProgrammesDaoImpl.java</span></div><h1>DirecteurProgrammesDaoImpl.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.dao;

import fr.eseo.atribus.entities.DirecteurProgrammes;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DirecteurProgrammesDaoImpl implements DirecteurProgrammesDao {
<span class="nc" id="L18">  private static final Logger LOGGER = Logger.getLogger(DirecteurProgrammesDaoImpl.class.getName());</span>
  private static final String EXCEPTION = &quot;Exception&quot;;
  private final DaoFactory daoFactory;
  
  private static final String SELECT_1 =
      &quot;SELECT directeur_programmes.id AS id_directeur_programmes, utilisateur.* &quot;;
  
  private static final String SELECT_2 = &quot; FROM directeur_programmes &quot;;
  
  private static final String SELECT_3 =
      &quot; LEFT JOIN utilisateur ON utilisateur.id = directeur_programmes.id_utilisateur &quot;;

  private static final String SQL_SELECT_PAR_LOGIN_HASH = SELECT_1 + SELECT_2 + SELECT_3
          + &quot; WHERE utilisateur.login = ?&quot; + &quot; AND utilisateur.password = ?&quot;;

  private static final String SQL_INSERT =
      &quot;INSERT INTO directeur_programmes (id_utilisateur) VALUES (?)&quot;;

  private static final String SQL_SELECT_ALL = SELECT_1 + SELECT_2 + SELECT_3;
  
  private static final String SQL_SELECT_PAR_ID_UTILISATEUR = SELECT_1 + SELECT_2 + SELECT_3
          + &quot; WHERE id_utilisateur = ?&quot;;

  private static final String SQL_DELETE_PAR_ID_UTILISATEUR =
      &quot;DELETE FROM directeur_programmes WHERE id_utilisateur = ?&quot;;

<span class="nc" id="L44">  DirecteurProgrammesDaoImpl() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L46">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;contextDao&quot;);</span>
<span class="nc" id="L47">    this.daoFactory = (DaoFactory) bf.getFactory().getBean(&quot;daoFactory&quot;);</span>
<span class="nc" id="L48">  }</span>

  @Override
  public List&lt;DirecteurProgrammes&gt; recupererListe() {
<span class="nc" id="L52">    final List&lt;DirecteurProgrammes&gt; listeDirecteurProgrammes = new ArrayList&lt;&gt;();</span>
<span class="nc" id="L53">    Connection connexion = null;</span>
<span class="nc" id="L54">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L55">    ResultSet resultSet = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L59">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L60">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
          DirecteurProgrammesDaoImpl.SQL_SELECT_ALL, false);
<span class="nc" id="L62">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L64" title="All 2 branches missed.">      while (resultSet.next()) {</span>
<span class="nc" id="L65">        listeDirecteurProgrammes.add(DirecteurProgrammesDaoImpl.map(resultSet));</span>
      }
<span class="nc" id="L67">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L68">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L70">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L71">    }</span>

<span class="nc" id="L73">    return listeDirecteurProgrammes;</span>
  }

  /* Implémentation de la méthode trouverParLogin() définie dans l'interface UtilisateurBdd */
  @Override
  public DirecteurProgrammes trouverParLoginHash(String login, String hash) {
<span class="nc" id="L79">    return this.trouver(DirecteurProgrammesDaoImpl.SQL_SELECT_PAR_LOGIN_HASH, login, hash);</span>
  }
  
  private DirecteurProgrammes trouverParIdUtilisateur(int idUtilisateur) {
<span class="nc" id="L83">    return this.trouver(DirecteurProgrammesDaoImpl.SQL_SELECT_PAR_ID_UTILISATEUR, idUtilisateur);</span>
  }

  @Override
  public DirecteurProgrammes ajouter(DirecteurProgrammes directeurProgrammes) {
<span class="nc" id="L88">    Connection connexion = null;</span>
<span class="nc" id="L89">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L90">    final ResultSet valeursAutoGenerees = null;</span>

    try {
      final BeanFactoryReference bf =
<span class="nc" id="L94">          SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
<span class="nc" id="L95">      final int idUtilisateur = ((UtilisateurDao) bf.getFactory().getBean(&quot;utilisateurDao&quot;))</span>
<span class="nc" id="L96">          .trouverIdParLogin(directeurProgrammes.getLogin());</span>
      
      // Si il n'y a pas déja l'utilisateur associé
<span class="nc bnc" id="L99" title="All 2 branches missed.">      if (this.trouverParIdUtilisateur(idUtilisateur) == null) {</span>
<span class="nc" id="L100">        connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L101">        preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L102">            DirecteurProgrammesDaoImpl.SQL_INSERT, true, idUtilisateur);</span>

<span class="nc" id="L104">        final int statut = preparedStatement.executeUpdate();</span>
        /* Analyse du statut retourné par la requête d'insertion */
<span class="nc bnc" id="L106" title="All 2 branches missed.">        if (statut == 0) {</span>
<span class="nc" id="L107">          throw new DaoException(</span>
              &quot;Échec de la création du directeurProgrammes, aucune ligne ajoutée dans la table.&quot;);
        }
      }
      
      /* Récupération de l'id auto-généré par la requête d'insertion */
<span class="nc" id="L113">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L114">      DirecteurProgrammesDaoImpl.LOGGER.log(Level.INFO, &quot;Exception&quot;, sqle);</span>
<span class="nc" id="L115">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L117">      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);</span>
<span class="nc" id="L118">    }</span>

<span class="nc" id="L120">    return directeurProgrammes;</span>
  }
  
  @Override
  public int supprimer(DirecteurProgrammes directeurProgrammes) {

    int statut;
<span class="nc" id="L127">    Connection connexion = null;</span>
<span class="nc" id="L128">    PreparedStatement preparedStatement = null;</span>


    try {
      /* Récupération de l'id_utilisateur */
      final BeanFactoryReference bf =
<span class="nc" id="L134">          SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
<span class="nc" id="L135">      final int idUtilisateur = ((UtilisateurDao) bf.getFactory().getBean(&quot;utilisateurDao&quot;))</span>
<span class="nc" id="L136">          .trouverIdParLogin(directeurProgrammes.getLogin());</span>

      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L139">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L140">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L141">          DirecteurProgrammesDaoImpl.SQL_DELETE_PAR_ID_UTILISATEUR, false, idUtilisateur);</span>

<span class="nc" id="L143">      statut = preparedStatement.executeUpdate();</span>

<span class="nc" id="L145">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L146">      DirecteurProgrammesDaoImpl.LOGGER.log(Level.INFO, DirecteurProgrammesDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L147">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L149">      DaoUtilitaire.fermeturesSilencieuses(preparedStatement, connexion);</span>
<span class="nc" id="L150">    }</span>

<span class="nc" id="L152">    return statut;</span>
  }


  /*
   * Méthode générique utilisée pour retourner un adminsys depuis la base de données, correspondant
   * à la requête SQL donnée prenant en paramètres les objets passés en argument.
   */
  private DirecteurProgrammes trouver(String sql, Object... objets) {
<span class="nc" id="L161">    Connection connexion = null;</span>
<span class="nc" id="L162">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L163">    ResultSet resultSet = null;</span>
<span class="nc" id="L164">    DirecteurProgrammes directeurProgrammes = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L168">      connexion = this.daoFactory.getConnection();</span>
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
<span class="nc" id="L173">      preparedStatement =</span>
<span class="nc" id="L174">          DaoUtilitaire.initialisationRequetePreparee(connexion, sql, false, objets);</span>
<span class="nc" id="L175">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L177" title="All 2 branches missed.">      if (resultSet.next()) {</span>
<span class="nc" id="L178">        directeurProgrammes = DirecteurProgrammesDaoImpl.map(resultSet);</span>
      }
<span class="nc" id="L180">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L181">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L183">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L184">    }</span>
<span class="nc" id="L185">    return directeurProgrammes;</span>
  }

  /*
   * Simple méthode utilitaire permettant de faire la correspondance (le mapping) entre une ligne
   * issue de la table des adminsyss (un ResultSet) et un bean Utilisateur.
   */
  private static DirecteurProgrammes map(ResultSet resultSet) throws SQLException {
<span class="nc" id="L193">    final DirecteurProgrammes directeurProgrammes = new DirecteurProgrammes();</span>
<span class="nc" id="L194">    directeurProgrammes.setId(resultSet.getInt(&quot;id&quot;));</span>
<span class="nc" id="L195">    directeurProgrammes.setIdDirecteurProgrammes(resultSet.getInt(&quot;id_directeur_programmes&quot;));</span>
<span class="nc" id="L196">    directeurProgrammes.setLogin(resultSet.getString(&quot;login&quot;));</span>
<span class="nc" id="L197">    directeurProgrammes.setPassword(resultSet.getString(&quot;password&quot;));</span>
<span class="nc" id="L198">    directeurProgrammes.setNom(resultSet.getString(&quot;nom&quot;));</span>
<span class="nc" id="L199">    directeurProgrammes.setPrenom(resultSet.getString(&quot;prenom&quot;));</span>
<span class="nc" id="L200">    directeurProgrammes.setEmail(resultSet.getString(&quot;email&quot;));</span>
<span class="nc" id="L201">    directeurProgrammes.setDateInscription(resultSet.getTimestamp(&quot;date_inscription&quot;));</span>
<span class="nc" id="L202">    directeurProgrammes.setNotificationActive(resultSet.getBoolean(&quot;notification_active&quot;));</span>
<span class="nc" id="L203">    directeurProgrammes.setNotificationMail(resultSet.getBoolean(&quot;notification_mail&quot;));</span>
<span class="nc" id="L204">    directeurProgrammes</span>
<span class="nc" id="L205">        .setFrequenceNotificationMail(resultSet.getInt(&quot;frequence_notification_mail&quot;));</span>
<span class="nc" id="L206">    return directeurProgrammes;</span>
  }
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>