package fr.eseo.atribus.forms;

import fr.eseo.atribus.dao.DaoException;
import fr.eseo.atribus.entities.Eleve;
import fr.eseo.atribus.entities.Examen;
import fr.eseo.atribus.entities.Exercice;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.regex.Pattern;

public class RepondreAutoEvaluationForm extends ExamenForm {

  public RepondreAutoEvaluationForm() {
    super();
  }

  public int repondre(Eleve eleve, List<String> reponses, String examenString,
      Boolean autoEvaluation) {
    final Examen examen = this.examenDao.trouverParNom(examenString);
    try {
      Map<Exercice, List<String>> reponsesParser = new HashMap<>();
      if (examen == null || !examen.getAutoEvaluation()) {
        this.erreurs.put("mauvaisAutoEval", "Auto evaluation invalide");
      } else {
        for (Exercice exercice : examen.getExercices()) {
          reponsesParser.put(exercice, new ArrayList<>());
        }
        this.traiterDonnees(eleve, reponses, examen, reponsesParser);
      }
      if (this.erreurs.isEmpty()) {
        this.evaluationDao.repondre(eleve, reponsesParser, examen, autoEvaluation);
        this.resultat = "Succès de l'ajout des réponses l'auto evaluation.";
        return 1;
      } else {
        this.resultat = "Échec de l'ajout des réponses l'auto evaluation.";
      }
    } catch (final DaoException ebdd) {
      this.resultat =
          "Échec de l'ajout des réponses de l'auto evaluation : une erreur imprévue est survenue,"
              + " merci de réessayer dans quelques instants.";
      RepondreAutoEvaluationForm.LOGGER.log(Level.INFO, EXCEPTION, ebdd);
    }
    return -1;
  }

  private void traiterDonnees(Eleve eleve, List<String> reponses, Examen examen,
      Map<Exercice, List<String>> reponsesParser) {
    for (String string : reponses) {
      List<String> parsing = new ArrayList<>(Arrays.asList(string.split(Pattern.quote("/////"))));
      for (Exercice exercice : examen.getExercices()) {
        if (exercice.getQuestion().equals(parsing.get(0))) {
          reponsesParser.get(exercice).add(parsing.get(1));
        }
      }
    }
    try {
      this.validationEleve(eleve);
    } catch (final FormValidationException fve) {
      RepondreAutoEvaluationForm.LOGGER.log(Level.INFO, EXCEPTION, fve);
      this.setErreur("eleve", fve.getMessage());
    }
  }

}

