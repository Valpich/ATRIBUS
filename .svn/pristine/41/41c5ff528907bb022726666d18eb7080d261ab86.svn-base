package fr.eseo.atribus.filters;

import fr.eseo.atribus.entities.Utilisateur;

import org.mockito.Mockito;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.support.AnnotationConfigContextLoader;
import org.springframework.test.context.web.WebAppConfiguration;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionContext;

@SuppressWarnings("deprecation")
@Test
@ContextConfiguration(loader = AnnotationConfigContextLoader.class)
@WebAppConfiguration
public class FiltreLimiteurRequeteApplicationTest {

  @BeforeClass
  public void beforeClass() {}

  @Test(priority = 1)
  public void testConstructeurVide() {
    final FiltreLimiteurRequeteApplication filtrelimiteurrequeteapplication =
        new FiltreLimiteurRequeteApplication();
    Assert.assertNotNull(filtrelimiteurrequeteapplication);
  }

  @Test(priority = 2)
  public void testMethodeDestroy() {
    final FiltreLimiteurRequeteApplication filtrelimiteurrequeteapplication =
        new FiltreLimiteurRequeteApplication();
    Assert.assertNotNull(filtrelimiteurrequeteapplication);
    filtrelimiteurrequeteapplication.destroy();
  }

  @Test(priority = 3)
  public void testMethodeDoFilterServletRequestServletResponseFilterChain() {
    final HttpServletRequest httpServletRequest = Mockito.mock(HttpServletRequest.class);
    final HttpServletResponse httpServletResponse = Mockito.mock(HttpServletResponse.class);
    final FilterChain filterChain = Mockito.mock(FilterChain.class);
    Field attribut;
    Field attributDeux;
    final MockHttpSession mockHttpSession = new MockHttpSession();
    Mockito.when(httpServletRequest.getSession()).thenReturn(mockHttpSession);

    // Erreur sans application connecté
    final FiltreLimiteurRequeteApplication filtrelimiteurrequeteapplication =
        new FiltreLimiteurRequeteApplication();
    try {
      attribut = new FiltreLimiteurRequeteApplication().getClass().getDeclaredField("actuel");
      attributDeux = new FiltreLimiteurRequeteApplication().getClass().getDeclaredField("verrou");
      attribut.setAccessible(true);
      attributDeux.setAccessible(true);
      try {
        attribut.set(filtrelimiteurrequeteapplication, 100);
        attributDeux.set(filtrelimiteurrequeteapplication, new Boolean(false));
        try {
          filtrelimiteurrequeteapplication.doFilter(httpServletRequest, httpServletResponse,
              filterChain);
          Assert.assertEquals(attribut.getInt(filtrelimiteurrequeteapplication), 100, "test");
        } catch (final IOException ioe) {
          ioe.printStackTrace();
        } catch (final ServletException sev) {
          sev.printStackTrace();
        }
      } catch (final IllegalArgumentException iae) {
        iae.printStackTrace();
      } catch (final IllegalAccessException iae) {
        iae.printStackTrace();
      }

    } catch (final NoSuchFieldException nsfe) {
      nsfe.printStackTrace();
    } catch (final SecurityException sec) {
      sec.printStackTrace();
    }

    // Erreur avec un application connecté
    mockHttpSession.setAttribute("application", new Utilisateur());
    Mockito.when(httpServletRequest.getSession()).thenReturn(mockHttpSession);

    try {
      attribut = new FiltreLimiteurRequeteApplication().getClass().getDeclaredField("actuel");
      attributDeux = new FiltreLimiteurRequeteApplication().getClass().getDeclaredField("verrou");
      attribut.setAccessible(true);
      attributDeux.setAccessible(true);
      try {
        attribut.set(filtrelimiteurrequeteapplication, 100);
        attributDeux.set(filtrelimiteurrequeteapplication, new Boolean(false));
        try {
          filtrelimiteurrequeteapplication.doFilter(httpServletRequest, httpServletResponse,
              filterChain);
          Assert.assertEquals(attribut.getInt(filtrelimiteurrequeteapplication), 100, "test");
        } catch (final IOException ioe) {
          ioe.printStackTrace();
        } catch (final ServletException sev) {
          sev.printStackTrace();
        }
      } catch (final IllegalArgumentException iae) {
        iae.printStackTrace();
      } catch (final IllegalAccessException iae) {
        iae.printStackTrace();
      }

    } catch (final NoSuchFieldException nsfe) {
      nsfe.printStackTrace();
    } catch (final SecurityException sec) {
      sec.printStackTrace();
    }

    // Pas d'erreur avec un application connecté
    mockHttpSession.setAttribute("application", new Utilisateur());
    Mockito.when(httpServletRequest.getSession()).thenReturn(mockHttpSession);

    try {
      attribut = new FiltreLimiteurRequeteApplication().getClass().getDeclaredField("actuel");
      attributDeux = new FiltreLimiteurRequeteApplication().getClass().getDeclaredField("verrou");
      attribut.setAccessible(true);
      attributDeux.setAccessible(true);
      try {
        attribut.set(filtrelimiteurrequeteapplication, 3);
        attributDeux.set(filtrelimiteurrequeteapplication, new Boolean(false));
        try {
          filtrelimiteurrequeteapplication.doFilter(httpServletRequest, httpServletResponse,
              filterChain);
          Assert.assertEquals(attribut.getInt(filtrelimiteurrequeteapplication), 3, "test");
        } catch (final IOException ioe) {
          ioe.printStackTrace();
        } catch (final ServletException sev) {
          sev.printStackTrace();
        }
      } catch (final IllegalArgumentException iae) {
        iae.printStackTrace();
      } catch (final IllegalAccessException iae) {
        iae.printStackTrace();
      }

    } catch (final NoSuchFieldException nsfe) {
      nsfe.printStackTrace();
    } catch (final SecurityException sec) {
      sec.printStackTrace();
    }



  }


  @Test(priority = 4)
  public void testMethodeInitFilterConfig() {
    final FilterConfig config = Mockito.mock(FilterConfig.class);
    final FiltreLimiteurRequeteApplication filtrelimiteurrequeteapplication =
        new FiltreLimiteurRequeteApplication();
    Assert.assertNotNull(filtrelimiteurrequeteapplication);
    try {
      filtrelimiteurrequeteapplication.init(config);
    } catch (final ServletException sev) {
      sev.printStackTrace();
    }
  }

  @AfterClass
  public void afterClass() {}

  private class MockHttpSession implements HttpSession {
    Map<String, Object> map = new HashMap<>();

    @Override
    public Object getAttribute(String name) {
      return this.map.get(name);
    }

    @Override
    public void setAttribute(String name, Object value) {
      this.map.put(name, value);
    }

    @Override
    public Enumeration<String> getAttributeNames() {
      return null;
    }

    @Override
    public long getCreationTime() {
      return 0;
    }

    @Override
    public String getId() {
      return null;
    }

    @Override
    public long getLastAccessedTime() {
      return 0;
    }

    @Override
    public int getMaxInactiveInterval() {
      return 0;
    }

    @Override
    public ServletContext getServletContext() {
      return null;
    }

    @SuppressWarnings("deprecation")
    @Override
    public HttpSessionContext getSessionContext() {
      return null;
    }

    @Override
    public Object getValue(String arg0) {
      return null;
    }

    @Override
    public String[] getValueNames() {
      return null;
    }

    @Override
    public void invalidate() {}

    @Override
    public boolean isNew() {
      return false;
    }

    @Override
    public void putValue(String arg0, Object arg1) {}

    @Override
    public void removeAttribute(String arg0) {}

    @Override
    public void removeValue(String arg0) {}

    @Override
    public void setMaxInactiveInterval(int arg0) {}

  }

}
