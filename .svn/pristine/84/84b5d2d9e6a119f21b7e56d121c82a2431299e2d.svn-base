<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>TimerConversionNotificationEnMail.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.timers</a> &gt; <span class="el_source">TimerConversionNotificationEnMail.java</span></div><h1>TimerConversionNotificationEnMail.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.timers;

import fr.eseo.atribus.beans.Mail;
import fr.eseo.atribus.dao.NotificationDao;
import fr.eseo.atribus.dao.UtilisateurDao;
import fr.eseo.atribus.entities.Notification;
import fr.eseo.atribus.entities.Utilisateur;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.mail.MessagingException;
import javax.servlet.ServletContext;

@Service
public class TimerConversionNotificationEnMail {
<span class="nc" id="L26">  private static final Logger LOGGER =</span>
<span class="nc" id="L27">      Logger.getLogger(TimerConversionNotificationEnMail.class.getName());</span>

  @Autowired(required = true)
  ServletContext servletContext;
  @Autowired(required = true)
  Mail mail;

  NotificationDao notificationDao;
  UtilisateurDao utilisateurDao;
  
<span class="nc" id="L37">  public TimerConversionNotificationEnMail() {</span>
<span class="nc" id="L38">    TimerConversionNotificationEnMail.LOGGER</span>
<span class="nc" id="L39">        .info(&quot;Instantiation du convertisseur de notifications vers des mails&quot;);</span>
    final BeanFactoryReference bf =
<span class="nc" id="L41">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Notification */
<span class="nc" id="L43">    this.notificationDao = (NotificationDao) bf.getFactory().getBean(&quot;notificationDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Competence */
<span class="nc" id="L45">    this.utilisateurDao = (UtilisateurDao) bf.getFactory().getBean(&quot;utilisateurDao&quot;);</span>
<span class="nc" id="L46">  }</span>
  
  public ServletContext getServletContext() {
<span class="nc" id="L49">    return servletContext;</span>
  }

  public void setServletContext(ServletContext servletContext) {
<span class="nc" id="L53">    this.servletContext = servletContext;</span>
<span class="nc" id="L54">  }</span>

  public Mail getMail() {
<span class="nc" id="L57">    return mail;</span>
  }

  public void setMail(Mail mail) {
<span class="nc" id="L61">    this.mail = mail;</span>
<span class="nc" id="L62">  }</span>

  /**
   * Conversion automatique des notifications en mail toutes les heures.
   */
  @Scheduled(fixedDelay = 60 * 60 * 1000)
  public void executer() {
<span class="nc" id="L69">    List&lt;Utilisateur&gt; utilisateurs = this.utilisateurDao.recupererListe();</span>
<span class="nc bnc" id="L70" title="All 2 branches missed.">    for (Utilisateur utilisateur : utilisateurs) {</span>
<span class="nc bnc" id="L71" title="All 4 branches missed.">      if (utilisateur.getFrequenceNotificationMail() != 0 &amp;&amp; !utilisateur.isNotificationMail()) {</span>
<span class="nc bnc" id="L72" title="All 2 branches missed.">        for (Notification notification : utilisateur.getNotifications()) {</span>
<span class="nc" id="L73">          envoyerSiRequis(utilisateur, notification);</span>
<span class="nc" id="L74">        }</span>
      }
<span class="nc" id="L76">    }</span>
<span class="nc" id="L77">  }</span>

  private void envoyerSiRequis(Utilisateur utilisateur, Notification notification) {
<span class="nc bnc" id="L80" title="All 4 branches missed.">    switch (utilisateur.getFrequenceNotificationMail()) {</span>
      case 1:
<span class="nc" id="L82">        miseAJourHeure(utilisateur, notification);</span>
<span class="nc" id="L83">        break;</span>
      case 2:
<span class="nc" id="L85">        miseAJourJournaliere(utilisateur, notification);</span>
<span class="nc" id="L86">        break;</span>
      case 3:
<span class="nc" id="L88">        miseAJourHebdomadaire(utilisateur, notification);</span>
<span class="nc" id="L89">        break;</span>
      default:
        break;
    }
<span class="nc" id="L93">  }</span>

  private void miseAJourHebdomadaire(Utilisateur utilisateur, Notification notification) {
<span class="nc" id="L96">    Calendar cal = Calendar.getInstance();</span>
<span class="nc" id="L97">    cal.setTime(notification.getDateCreation());</span>
<span class="nc" id="L98">    int jourNotification = cal.get(Calendar.DAY_OF_YEAR);</span>
<span class="nc" id="L99">    Calendar calActuel = Calendar.getInstance();</span>
<span class="nc" id="L100">    calActuel.setTime(new Date());</span>
<span class="nc" id="L101">    int jourActuel = calActuel.get(Calendar.DAY_OF_YEAR);</span>
<span class="nc bnc" id="L102" title="All 2 branches missed.">    if (jourNotification - jourActuel &lt;= -7) {</span>
<span class="nc" id="L103">      this.conversion(notification, utilisateur);</span>
    }
<span class="nc" id="L105">  }</span>

  private void miseAJourJournaliere(Utilisateur utilisateur, Notification notification) {
<span class="nc" id="L108">    Calendar cal = Calendar.getInstance();</span>
<span class="nc" id="L109">    cal.setTime(notification.getDateCreation());</span>
<span class="nc" id="L110">    int jourNotification = cal.get(Calendar.DAY_OF_YEAR);</span>
<span class="nc" id="L111">    Calendar calActuel = Calendar.getInstance();</span>
<span class="nc" id="L112">    calActuel.setTime(new Date());</span>
<span class="nc" id="L113">    int jourActuel = calActuel.get(Calendar.DAY_OF_YEAR);</span>
<span class="nc bnc" id="L114" title="All 2 branches missed.">    if (jourNotification - jourActuel &lt; -1) {</span>
<span class="nc" id="L115">      this.conversion(notification, utilisateur);</span>
    }
<span class="nc" id="L117">  }</span>

  private void miseAJourHeure(Utilisateur utilisateur, Notification notification) {
<span class="nc" id="L120">    Calendar cal = Calendar.getInstance();</span>
<span class="nc" id="L121">    cal.setTime(notification.getDateCreation());</span>
<span class="nc" id="L122">    int heureNotification = cal.get(Calendar.HOUR_OF_DAY);</span>
<span class="nc" id="L123">    Calendar calActuel = Calendar.getInstance();</span>
<span class="nc" id="L124">    calActuel.setTime(new Date());</span>
<span class="nc" id="L125">    int heureActuelle = calActuel.get(Calendar.HOUR_OF_DAY);</span>
<span class="nc bnc" id="L126" title="All 2 branches missed.">    if (heureNotification - heureActuelle &lt;= -1) {</span>
<span class="nc" id="L127">      this.conversion(notification, utilisateur);</span>
    }
<span class="nc" id="L129">  }</span>

  private void conversion(Notification notification, Utilisateur utilisateur) {
    try {
<span class="nc" id="L133">      mail.mailAutomatique(utilisateur.getEmail(),</span>
<span class="nc" id="L134">          &quot;Notification de &quot; + notification.getNomEmetteur() + &quot;.&quot;, notification.getMessage());</span>
<span class="nc" id="L135">      this.notificationDao.supprimer(notification);</span>
<span class="nc" id="L136">    } catch (final MessagingException mesesx) {</span>
<span class="nc" id="L137">      TimerConversionNotificationEnMail.LOGGER.log(Level.INFO, &quot;Exception&quot;, mesesx);</span>
<span class="nc" id="L138">    }</span>
<span class="nc" id="L139">  }</span>
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>