package fr.eseo.atribus.controller;

import fr.eseo.atribus.beans.ExporteurCsv;
import fr.eseo.atribus.dao.EleveDao;
import fr.eseo.atribus.dao.EvaluationDao;
import fr.eseo.atribus.dao.ExamenDao;
import fr.eseo.atribus.dao.MatiereDao;
import fr.eseo.atribus.entities.Competence;
import fr.eseo.atribus.entities.Eleve;
import fr.eseo.atribus.entities.Enseignant;
import fr.eseo.atribus.entities.EnseignantRefMatiere;
import fr.eseo.atribus.entities.Evaluation;
import fr.eseo.atribus.entities.Examen;
import fr.eseo.atribus.entities.Exercice;
import fr.eseo.atribus.entities.Matiere;
import fr.eseo.atribus.entities.Utilisateur;
import fr.eseo.atribus.filters.FiltreUtilisateur;
import fr.eseo.atribus.forms.AddExamenForm;
import fr.eseo.atribus.forms.ModifierExamenForm;
import fr.eseo.atribus.forms.RepondreAutoEvaluationForm;
import fr.eseo.atribus.forms.RepondreExamenForm;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

/**
 * Servlet implementation class ExamenController.
 */
@Controller
public class ExamenController {
  public static final String CONF_BDD_FACTORY = "DaoFactory";
  public static final String ATT_EXAMEN = "examen";
  public static final String ATT_CHOIX_EXAMEN = "choixExamen";
  public static final String ATT_NOM_EXAMEN = "nomExamen";
  public static final String ATT_EXAMENS = "examens";
  public static final String ATT_EVALUATIONS = "evaluations";
  public static final String ATT_FORM = "form";
  public static final String ATT_COMPETENCES = "competences";
  public static final String ATT_COMPETENCES_VIDE = "competencesVide";
  public static final String ATT_MATIERES = "matieres";
  public static final String VUE = "EnseignantRefMatiere/addExamen";
  public static final String VUE_CONSULTER = "Eleve/consulterCompetencesExamen";
  public static final String VUE_MODIFIER = "EnseignantRefMatiere/modifierExamen";
  public static final String VUE_CORRIGER = "Enseignant/corrigerExamen";
  public static final String VUE_PASSER = "Eleve/passerExamen";
  public static final String VUE_PASSER_AUTO = "Eleve/passerAutoEvaluation";
  public static final String VUE_SUPPRIMER = "EnseignantRefMatiere/supprimerExamen";
  public static final String VUE_HISTORIQUE_AUTO = "EnseignantRefMatiere/historiqueAutoEvaluation";
  public static final String ATT_SESSION_USER = "sessionUtilisateur";
  public static final String VUE_CONSULTER_NOTES = "Eleve/consulterNotes";
  public static final String VUE_AUCUNE_NOTE = "Eleve/aucuneNote";
  public static final String VUE_CONSULT_AUTOEVAL = "Eleve/consulterAutoEvaluation";
  public static final String VUE_REDIRECT_INDEX = "redirect:/index";
  public static final String REPONSES = "/**REPONSES**/";
  public static final String VALIDES = "/**VALIDES**/";
  private static final Logger LOGGER = Logger.getLogger(ExamenController.class.getName());

  private ExamenDao examenDao;
  private MatiereDao matiereDao;
  private EvaluationDao evaluationDao;
  private EleveDao eleveDao;

  /**
   * Initialisation.
   */
  @PostConstruct
  public void init() {
    final BeanFactoryReference bf =
        SingletonBeanFactoryLocator.getInstance().useBeanFactory("beansDao");
    /* Récupération d'une instance de notre DAO Examen */
    this.examenDao = (ExamenDao) bf.getFactory().getBean("examenDao");
    /* Récupération d'une instance de notre DAO Matiere */
    this.matiereDao = (MatiereDao) bf.getFactory().getBean("matiereDao");
    /* Récupération d'une instance de notre DAO Eveluation */
    this.evaluationDao = (EvaluationDao) bf.getFactory().getBean("evaluationDao");
    /* Récupération d'une instance de notre DAO Eleve */
    this.eleveDao = (EleveDao) bf.getFactory().getBean("eleveDao");
  }


  @RequestMapping(value = "/EnseignantRefMatiere/AjouterExamen", method = RequestMethod.GET)
  protected ModelAndView afficherAjouterExamen() {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    // On charge la liste des matieres
    attributsRequete.put(ExamenController.ATT_MATIERES, this.matiereDao.trouverToutesLesMatieres());
    return new ModelAndView(VUE, attributsRequete);
  }

  @RequestMapping(value = "/EnseignantRefMatiere/AjouterExamen", method = RequestMethod.POST)
  protected ModelAndView ajouterExamen(HttpServletRequest request) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    // On charge la liste des matieres
    attributsRequete.put(ExamenController.ATT_MATIERES, this.matiereDao.trouverToutesLesMatieres());

    /* Préparation de l'objet formulaire */
    final AddExamenForm form = new AddExamenForm();

    /* Appel au traitement et à la validation de la requête, et récupération du bean en résultant */
    final Examen examen = form.addExamen(request);

    /* Stockage du formulaire et du bean dans l'objet request */
    attributsRequete.put(ExamenController.ATT_FORM, form);
    attributsRequete.put(ExamenController.ATT_EXAMEN, examen);

    return new ModelAndView(VUE, attributsRequete);
  }

  @RequestMapping(value = "/EnseignantRefMatiere/ModifierExamen", method = RequestMethod.GET)
  protected ModelAndView afficherModifierExamen() {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    // On charge la liste des examens
    attributsRequete.put(ExamenController.ATT_EXAMENS, this.examenDao.trouverTousLesExamens());
    return new ModelAndView(VUE_MODIFIER, attributsRequete);
  }

  @RequestMapping(value = "/EnseignantRefMatiere/ModifierExamen", method = RequestMethod.POST)
  protected ModelAndView modifierExamen(HttpServletRequest request) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    // On charge la liste des matieres
    attributsRequete.put(ExamenController.ATT_MATIERES, this.matiereDao.trouverToutesLesMatieres());
    // On charge la liste des examens
    attributsRequete.put(ExamenController.ATT_EXAMENS, this.examenDao.trouverTousLesExamens());
    final String nomExamen = ExamenController.getValeurChamp(request, ATT_CHOIX_EXAMEN);
    final String nomExamenModifier = ExamenController.getValeurChamp(request, ATT_NOM_EXAMEN);
    final HttpSession session = request.getSession();
    if (nomExamen == null) {
      if (nomExamenModifier == null) {
        session.removeAttribute(ExamenController.ATT_EXAMEN);
        return new ModelAndView(VUE_MODIFIER, attributsRequete);
      } else {
        /* Préparation de l'objet formulaire */
        final ModifierExamenForm form = new ModifierExamenForm();
        form.modifierExamen(request);
        /* Stockage du formulaire et du bean dans l'objet request */
        attributsRequete.put(ExamenController.ATT_FORM, form);
        attributsRequete.put(ExamenController.ATT_EXAMENS, this.examenDao.trouverTousLesExamens());
        session.removeAttribute(ExamenController.ATT_EXAMEN);
        return new ModelAndView(VUE_MODIFIER, attributsRequete);
      }
    } else {
      session.setAttribute(ExamenController.ATT_EXAMEN, this.examenDao.trouverParNom(nomExamen));
      attributsRequete.put(ExamenController.ATT_EXAMEN, this.examenDao.trouverParNom(nomExamen));
    }
    return new ModelAndView(VUE_MODIFIER, attributsRequete);
  }

  @RequestMapping(value = "/EnseignantRefMatiere/HistoriqueAutoEvaluation",
      method = RequestMethod.GET)
  protected ModelAndView afficherHistoriqueAutoEvaluation() {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    List<Examen> examens = this.examenDao.trouverTousLesExamens();
    List<Examen> autoEvaluations = new ArrayList<>();
    for (Examen examen : examens) {
      if (examen.getAutoEvaluation() && !examen.getExercices().isEmpty()) {
        autoEvaluations.add(examen);
      }
    }
    // On charge la liste des examens
    attributsRequete.put(ExamenController.ATT_EXAMENS, autoEvaluations);
    return new ModelAndView(VUE_HISTORIQUE_AUTO, attributsRequete);
  }

  @RequestMapping(value = "/EnseignantRefMatiere/HistoriqueAutoEvaluation",
      method = RequestMethod.POST)
  protected ModelAndView historiqueAutoEvaluation(@RequestParam("choixExamen") String choixExamen,
      @RequestParam("dateDebut") @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateDebut,
      @RequestParam("dateFin") @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateFin) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    List<Examen> examens = this.examenDao.trouverTousLesExamens();
    List<Examen> autoEvaluations = new ArrayList<>();
    for (Examen examen : examens) {
      if (examen.getAutoEvaluation() && !examen.getExercices().isEmpty()) {
        autoEvaluations.add(examen);
      }
    }
    Examen examen = null;
    for (Examen exam : autoEvaluations) {
      if (exam.getNom().equals(choixExamen)) {
        examen = exam;
      }
    }
    int nombreUtilisation = this.examenDao.calculerHistorique(examen, dateDebut, dateFin);
    // On charge la liste des examens
    attributsRequete.put(ExamenController.ATT_EXAMENS, autoEvaluations);
    attributsRequete.put(ExamenController.ATT_EXAMEN, examen);
    attributsRequete.put("dateDebut", dateDebut);
    attributsRequete.put("dateFin", dateFin);
    attributsRequete.put("quantite", nombreUtilisation);
    return new ModelAndView(VUE_HISTORIQUE_AUTO, attributsRequete);
  }

  @RequestMapping(value = "/Eleve/PasserExamen", method = RequestMethod.GET)
  protected ModelAndView afficherPasserExamen() {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    // On charge la liste des examens
    List<Examen> examens = this.examenDao.trouverTousLesExamens();
    List<Examen> evaluations = new ArrayList<>();
    for (Examen examen : examens) {
      if (!examen.getAutoEvaluation()) {
        evaluations.add(examen);
      }
    }
    attributsRequete.put(ExamenController.ATT_EXAMENS, evaluations);
    return new ModelAndView(VUE_PASSER, attributsRequete);
  }

  @RequestMapping(value = "/Eleve/PasserExamen", method = RequestMethod.POST)
  protected ModelAndView passerExamen(@RequestParam("choixExamen") String choixExamen) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    // On charge la liste des examens
    Examen examen = this.examenDao.trouverParNom(choixExamen);
    if (!examen.getAutoEvaluation()) {
      // Empeche la triche en ne transmettant pas les réponses aux élèves dans la requête !
      for (Exercice exercice : examen.getExercices()) {
        exercice.setReponse(null);
      }
      attributsRequete.put(ExamenController.ATT_EXAMEN, examen);
      return new ModelAndView(VUE_PASSER, attributsRequete);
    }
    return new ModelAndView(VUE_REDIRECT_INDEX);
  }

  @RequestMapping(value = "/Eleve/ValiderExamen", method = RequestMethod.POST)
  protected ModelAndView validerExamen(HttpServletRequest request,
      @RequestParam("choixExamen") String choixExamen,
      @RequestParam("reponses") List<String> reponses) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    final List<Utilisateur> listeUtilisateur = recupererSession(request);
    Eleve eleve = recupererEleve(listeUtilisateur);
    if (eleve != null) {
      final RepondreExamenForm form = new RepondreExamenForm();
      form.repondre(eleve, reponses, choixExamen, false);
      attributsRequete.put(ATT_FORM, form);
      return new ModelAndView(VUE_PASSER, attributsRequete);
    } else {
      return new ModelAndView(VUE_REDIRECT_INDEX);
    }
  }

  @RequestMapping(value = "/Eleve/PasserAutoEvaluation", method = RequestMethod.GET)
  protected ModelAndView afficherPasserAutoEvaluation() {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    List<Examen> examens = this.examenDao.trouverTousLesExamens();
    List<Examen> autoEvaluations = new ArrayList<>();
    for (Examen examen : examens) {
      if (examen.getAutoEvaluation()) {
        autoEvaluations.add(examen);
      }
    }
    // On charge la liste des examens
    attributsRequete.put(ExamenController.ATT_EXAMENS, autoEvaluations);
    return new ModelAndView(VUE_PASSER_AUTO, attributsRequete);
  }

  @RequestMapping(value = "/Eleve/PasserAutoEvaluation", method = RequestMethod.POST)
  protected ModelAndView passerAutoEvaluation(@RequestParam("choixAutoEval") String choixExamen) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    // On charge la liste des examens
    Examen examen = this.examenDao.trouverParNom(choixExamen);
    if (examen.getAutoEvaluation()) {
      final HashMap<String, List<String>> reponses = new HashMap<>();
      final HashMap<String, List<String>> reponsesValides = new HashMap<>();
      parserReponsesQcm(examen, reponses, reponsesValides);
      attributsRequete.put(ExamenController.ATT_EXAMEN, examen);
      attributsRequete.put("reponsesQCM", reponses);
      return new ModelAndView(VUE_PASSER_AUTO, attributsRequete);
    }
    return new ModelAndView(VUE_REDIRECT_INDEX);
  }

  @RequestMapping(value = "/Eleve/ValiderAutoEvaluation", method = RequestMethod.POST)
  protected ModelAndView validerAutoEvaluation(HttpServletRequest request,
      @RequestParam("choixAutoEval") String choixExamen,
      @RequestParam("checkboxrep") List<String> reponses) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    final List<Utilisateur> listeUtilisateur = recupererSession(request);
    Eleve eleve = recupererEleve(listeUtilisateur);
    if (eleve != null) {
      final RepondreAutoEvaluationForm form = new RepondreAutoEvaluationForm();
      form.repondre(eleve, reponses, choixExamen, true);
      attributsRequete.put(ATT_FORM, form);
      return new ModelAndView(VUE_PASSER, attributsRequete);
    } else {
      return new ModelAndView(VUE_REDIRECT_INDEX);
    }
  }

  private void parserReponsesQcm(Examen examen, final HashMap<String, List<String>> reponses,
      final HashMap<String, List<String>> reponsesValides) {
    for (Exercice exercice : examen.getExercices()) {
      ArrayList<String> rep = new ArrayList<>();
      int index;
      String tmpRep = exercice.getReponse();
      if (tmpRep.contains(REPONSES)) {
        rep.add(tmpRep.substring(0, tmpRep.indexOf(REPONSES)));
        index = tmpRep.indexOf(REPONSES) + REPONSES.length();
        tmpRep = tmpRep.substring(index);
      } else {
        rep.add(tmpRep.substring(0, tmpRep.indexOf(VALIDES)));
        index = tmpRep.indexOf(VALIDES) + VALIDES.length();
        tmpRep = tmpRep.substring(index);
      }
      boolean parsingReponse = true;
      while (parsingReponse) {
        if (tmpRep.contains(REPONSES)) {
          rep.add(tmpRep.substring(0, tmpRep.indexOf(REPONSES)));
          index = tmpRep.indexOf(REPONSES) + REPONSES.length();
          tmpRep = tmpRep.substring(index);
        } else {
          parsingReponse = false;
          rep.add(tmpRep.substring(0, tmpRep.indexOf(VALIDES)));
          index = tmpRep.indexOf(VALIDES) + VALIDES.length();
          tmpRep = tmpRep.substring(index);
        }
      }
      reponses.put(exercice.getQuestion(), rep);
      reponsesValides.put(exercice.getQuestion(),
          new ArrayList<String>(Arrays.asList(tmpRep.split("/"))));
    }
  }

  @RequestMapping(value = "/Eleve/ConsulterAutoEvaluation", method = RequestMethod.GET)
  protected ModelAndView afficherConsulterAutoEvaluation(HttpServletRequest request) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    final List<Examen> examens = this.examenDao.trouverTousLesExamens();
    final List<Utilisateur> listeUtilisateur = recupererSession(request);
    Eleve eleve = recupererEleve(listeUtilisateur);
    if (eleve != null) {
      final List<Examen> listeAutoEval = recupererAutoEvalEleve(examens, eleve);
      // On charge la liste des auto evaluation
      attributsRequete.put(ExamenController.ATT_EXAMENS, listeAutoEval);
    }
    return new ModelAndView(VUE_CONSULT_AUTOEVAL, attributsRequete);
  }


  private List<Examen> recupererAutoEvalEleve(final List<Examen> examens, Eleve eleve) {
    final List<Examen> listeAutoEval = new ArrayList<>();
    for (Examen examen : examens) {
      for (Exercice exercice : examen.getExercices()) {
        recupererAutoEvalEleve(eleve, listeAutoEval, examen, exercice);
      }
    }
    return listeAutoEval;
  }

  @RequestMapping(value = "/Eleve/ConsulterAutoEvaluation", method = RequestMethod.POST)
  protected ModelAndView consulterAutoEvaluation(HttpServletRequest request,
      @RequestParam("choixExamen") String choixExamen) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    final List<Examen> examens = this.examenDao.trouverTousLesExamens();
    final List<Utilisateur> listeUtilisateur = recupererSession(request);
    Eleve eleve = recupererEleve(listeUtilisateur);
    if (eleve != null) {
      final List<Examen> listeAutoEval = recupererAutoEvalEleve(examens, eleve);
      Examen exam = this.examenDao.trouverParNom(choixExamen);
      boolean verificationChoix = false;
      for (Examen examen : listeAutoEval) {
        if (examen.getId() == exam.getId()) {
          verificationChoix = true;
        }   
      }
      if (verificationChoix) {
        attributsRequete.put(ExamenController.ATT_EXAMEN, exam);
        final Map<Exercice, List<String>> reponsesEleve = mapperVersEleve(eleve, exam);
        final HashMap<String, List<String>> reponses = new HashMap<>();
        final HashMap<String, List<String>> reponsesValides = new HashMap<>();
        parserReponsesQcm(exam, reponses, reponsesValides);
        attributsRequete.put("reponsesQCM", reponses);
        attributsRequete.put("reponsesValides", reponsesValides);
        attributsRequete.put("reponsesEleve", reponsesEleve);
        return new ModelAndView(VUE_CONSULT_AUTOEVAL, attributsRequete);
      }
    }
    return new ModelAndView(VUE_REDIRECT_INDEX);
  }


  @SuppressWarnings("unchecked")
  private List<Utilisateur> recupererSession(HttpServletRequest request) {
    return  (List<Utilisateur>) request.getSession().getAttribute(ATT_SESSION_USER);
  }


  private Eleve recupererEleve(final List<Utilisateur> listeUtilisateur) {
    Eleve eleve = null;
    for (final Utilisateur utilisateur : listeUtilisateur) {
      if (utilisateur.getClass().equals(Eleve.class)) {
        eleve = (Eleve) utilisateur;
      }
    }
    return eleve;
  }


  private Map<Exercice, List<String>> mapperVersEleve(Eleve eleve, Examen exam) {
    final Map<Exercice, List<String>> reponsesEleve = new HashMap<>();
    for (Exercice exercice : exam.getExercices()) {
      reponsesEleve.put(exercice, new ArrayList<>());
      for (Evaluation evaluation : this.evaluationDao.trouverToutesLesEvaluationsEleve(eleve)) {
        if (evaluation.getExercice().getId() == exercice.getId()) {
          ajouterReponseEleveListe(reponsesEleve, exercice, evaluation);
        }
      }
    }
    return reponsesEleve;
  }


  private void ajouterReponseEleveListe(final Map<Exercice, List<String>> reponsesEleve,
      Exercice exercice, Evaluation evaluation) {
    for (String rep : evaluation.getReponse().split("/")) {
      if (!rep.isEmpty()) {
        reponsesEleve.get(exercice).add(rep);
      }
    }
  }

  private void recupererAutoEvalEleve(Eleve eleve, final List<Examen> listeAutoEval, Examen examen,
      Exercice exercice) {
    for (Evaluation evaluation : this.evaluationDao.trouverToutesLesEvaluationsEleve(eleve)) {
      if (evaluation.getExercice().getId() == exercice.getId() && examen.getAutoEvaluation()
          && !listeAutoEval.contains(examen)) {
        listeAutoEval.add(examen);
      }
    }
  }

  @RequestMapping(value = "/Enseignant/CorrigerExamen", method = RequestMethod.GET)
  protected ModelAndView afficherCorrigerExamen(HttpServletRequest request) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    final List<Examen> examens = this.examenDao.trouverTousLesExamens();
    final List<Utilisateur> listeUtilisateur = recupererSession(request);
    Enseignant enseignant = null;
    enseignant = recupererEnseignant(listeUtilisateur, enseignant);
    if (enseignant != null) {
      final List<Examen> listeExamens = this.recupererListeExamensMatiere(examens, enseignant);
      // On charge la liste des examens
      attributsRequete.put(ExamenController.ATT_EXAMENS, listeExamens);
    }
    return new ModelAndView(VUE_CORRIGER, attributsRequete);
  }

  @RequestMapping(value = "/Enseignant/CorrigerExamen", method = RequestMethod.POST)
  protected ModelAndView corrigerExamen(HttpServletRequest request,
      @RequestParam("choixExamen") String choixExamen) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    final List<Utilisateur> listeUtilisateur = recupererSession(request);
    Enseignant enseignant = null;
    enseignant = recupererEnseignant(listeUtilisateur, enseignant);
    if (enseignant != null) {
      final Examen examen = this.examenDao.trouverParNom(choixExamen);
      final List<Evaluation> evaluations = this.recupererEvaluations(examen, enseignant);
      attributsRequete.put(ExamenController.ATT_EXAMEN, this.examenDao.trouverParNom(choixExamen));
      attributsRequete.put(ExamenController.ATT_EVALUATIONS, evaluations);
      final UUID idExamen = UUID.randomUUID();
      attributsRequete.put(ExamenController.ATT_CHOIX_EXAMEN, idExamen);
      request.getSession().setAttribute(ExamenController.ATT_CHOIX_EXAMEN, idExamen);
      request.getSession().setAttribute(ExamenController.ATT_EVALUATIONS, evaluations);
    }
    return new ModelAndView(VUE_CORRIGER, attributsRequete);
  }


  private Enseignant recupererEnseignant(final List<Utilisateur> listeUtilisateur,
      Enseignant enseignant) {
    
    for (final Utilisateur utilisateur : listeUtilisateur) {
      if (utilisateur.getClass().equals(Enseignant.class)) {
        return (Enseignant) utilisateur;
      }
    }
    return enseignant;
  }

  @RequestMapping(value = "/Enseignant/ValiderCorrigerExamen", method = RequestMethod.POST)
  protected ModelAndView corrigerExamen(HttpServletRequest request,
      @RequestParam("points") List<String> points, @RequestParam("choixExamen") String idExamen) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    final List<Utilisateur> listeUtilisateur = recupererSession(request);
    Enseignant enseignant = null;
    enseignant = recupererEnseignant(listeUtilisateur, enseignant);
    if (enseignant != null && idExamen != null) {
      final UUID idExamenSession =
          (UUID) request.getSession().getAttribute(ExamenController.ATT_CHOIX_EXAMEN);
      if (idExamen.equals(idExamenSession.toString())) {
        @SuppressWarnings("unchecked")
        final List<Evaluation> evaluations =
            (List<Evaluation>) request.getSession().getAttribute(ExamenController.ATT_EVALUATIONS);
        this.majEvaluations(points, evaluations);
        attributsRequete.put("resultatModifications", evaluations);
        request.getSession().removeAttribute(ExamenController.ATT_EVALUATIONS);
        request.getSession().removeAttribute(ExamenController.ATT_CHOIX_EXAMEN);
      } else {
        return new ModelAndView(VUE_CORRIGER, attributsRequete);
      }
    }
    return new ModelAndView(VUE_CORRIGER, attributsRequete);
  }

  @RequestMapping(value = "/EnseignantRefMatiere/SupprimerExamen", method = RequestMethod.GET)
  protected ModelAndView afficherSupprimerExamen(HttpServletRequest request) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    final List<Examen> examensTrier = new ArrayList<>();
    final List<Utilisateur> listeUtilisateur = recupererSession(request);
    EnseignantRefMatiere erm = recupererErm(listeUtilisateur);
    this.trierExamens(erm, this.examenDao.trouverTousLesExamens(), examensTrier);
    // On charge la liste des examens
    attributsRequete.put(ExerciceController.ATT_EXAMENS, examensTrier);
    return new ModelAndView(VUE_SUPPRIMER, attributsRequete);
  }


  private EnseignantRefMatiere recupererErm(final List<Utilisateur> listeUtilisateur) {
    EnseignantRefMatiere erm = null;
    for (final Utilisateur utilisateur : listeUtilisateur) {
      if (utilisateur.getClass().equals(EnseignantRefMatiere.class)) {
        erm = (EnseignantRefMatiere) utilisateur;
      }
    }
    return erm;
  }
  
  @RequestMapping(value = "/EnseignantRefMatiere/SupprimerExamen", method = RequestMethod.POST)
  protected ModelAndView supprimerExamen(HttpServletRequest request,
      @RequestParam("choixExamen") String choixExamen) {
    final List<Utilisateur> listeUtilisateur = recupererSession(request);
    EnseignantRefMatiere erm = recupererErm(listeUtilisateur);
    if (choixExamen != null) {
      // On charge la liste des examens
      final List<Examen> examens = this.examenDao.trouverTousLesExamens();
      final List<Examen> examensTrier = new ArrayList<>();
      this.trierExamens(erm, examens, examensTrier);
      for (final Examen exam : examensTrier) {
        if (choixExamen.equals(exam.getNom())) {
          this.examenDao.supprimer(exam);
        }
      }
    }
    return this.afficherSupprimerExamen(request);
  }

  @RequestMapping(value = "/Eleve/ConsulterCompetencesExamen", method = RequestMethod.GET)
  protected ModelAndView afficherConsulterCompetencesExamen() {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    // On charge la liste des examens
    attributsRequete.put(ExamenController.ATT_EXAMENS, this.examenDao.trouverTousLesExamens());
    return new ModelAndView(VUE_CONSULTER, attributsRequete);
  }

  @RequestMapping(value = "/Eleve/ConsulterCompetencesExamen", method = RequestMethod.POST)
  protected ModelAndView afficherResultatConsulterCompetencesExamen(
      @RequestParam("choixExamen") String choixExamen) {
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    // On charge la liste des examens
    final Examen examen = this.examenDao.trouverParNom(choixExamen);
    final List<Competence> competences = new ArrayList<>();
    for (final Exercice exercice : examen.getExercices()) {
      @SuppressWarnings("rawtypes")
      final Iterator it = exercice.getCompetences().entrySet().iterator();
      this.trierCompetences(competences, it);
    }
    if (competences.isEmpty()) {
      attributsRequete.put(ExamenController.ATT_COMPETENCES_VIDE, " ");
    } else {
      attributsRequete.put(ExamenController.ATT_COMPETENCES, competences);
    }
    return new ModelAndView(VUE_CONSULTER, attributsRequete);
  }

  @RequestMapping(value = "/Eleve/ConsulterNotes", method = RequestMethod.GET)
  protected ModelAndView consulterNotes(HttpServletRequest request) {
    final HttpSession session = request.getSession();
    final HashMap<String, Object> attributsRequete = new HashMap<>();
    @SuppressWarnings("unchecked")
    final List<Utilisateur> listeUtilisateur =
        (List<Utilisateur>) session.getAttribute(FiltreUtilisateur.ATT_SESSION_USER);
    Eleve eleve = recupererEleve(listeUtilisateur);

    final Map<Eleve, Map<Examen, Float>> notesEleveExamens = new HashMap<>();
    notesEleves(notesEleveExamens, this.eleveDao.recupererListe(),
        this.evaluationDao.trouverToutesLesEvaluations(), this.examenDao.trouverTousLesExamens());
    Map<Examen, Float> map = new HashMap<>();
    if (eleve != null) {
      for (Entry<Eleve, Map<Examen, Float>> entry : notesEleveExamens.entrySet()) {
        if (entry.getKey().getId() == eleve.getId()) {
          map = entry.getValue();
        }
      }
    }
    attributsRequete.put("notesEleve", map);
    return new ModelAndView(VUE_CONSULTER_NOTES, attributsRequete);

  }

  @RequestMapping(value = "/DirecteurEtudes/ConsulterProgres", method = RequestMethod.GET)
  protected ModelAndView afficherConsulterProgres() {

    final HashMap<String, Object> attributsRequete = new HashMap<>();
    attributsRequete.put("eleves", this.eleveDao.recupererListe());

    return new ModelAndView("DirecteurEtudes/consulterProgres", attributsRequete);
  }

  @RequestMapping(value = "/DirecteurEtudes/ConsulterProgres", method = RequestMethod.POST)
  protected ModelAndView consulterProgres(@RequestParam("idEleve") Integer idEleve) {

    final HashMap<String, Object> attributsRequete = new HashMap<>();
    List<Evaluation> evaluationList = this.evaluationDao.trouverToutesLesEvaluations();
    List<Evaluation> evaluations = new ArrayList<>();
    Eleve eleve;

    
    eleve = this.eleveDao.trouverParId(idEleve);
    eleve.setId(this.eleveDao.recupererIdUtilisateur(eleve));

    for (Evaluation eval : evaluationList) {
      if (eval.getEleve().getId() == eleve.getId()) {
        evaluations.add(eval);
      }
    }

    eleve.setCompetenceEleve(this.eleveDao.listerCompetenceEleve(eleve));
    
    attributsRequete.put("eleveProgres", eleve); 
    attributsRequete.put("competenceEleve", eleve.getCompetenceEleve());

    return new ModelAndView("DirecteurEtudes/progresChart", attributsRequete);

  }

  private void trierCompetences(List<Competence> competences,
      @SuppressWarnings("rawtypes") Iterator it) {
    while (it.hasNext()) {
      @SuppressWarnings("rawtypes")
      final Map.Entry pair = (Map.Entry) it.next();
      boolean present = false;
      for (final Competence competence : competences) {
        if (competence.getNom().contentEquals(((Competence) pair.getValue()).getNom())) {
          present = true;
        }
      }
      if (!present) {
        competences.add((Competence) pair.getValue());
      }
    }
  }

  private void trierExamens(EnseignantRefMatiere erm, final List<Examen> examens,
      final List<Examen> examensTrier) {
    if (erm != null) {
      for (final Examen examen : examens) {
        if (examen.getMatiere().getId() == erm.getMatiere().getId()) {
          examensTrier.add(examen);
        }
      }
    }
  }


  private void majEvaluations(List<String> points, List<Evaluation> evaluations) {
    int compteur = 0;
    for (final Evaluation evaluation : evaluations) {
      try {
        evaluation.setNote(Float.parseFloat(points.get(compteur)));
      } catch (final Exception exc) {
        ExamenController.LOGGER.log(Level.INFO, "Exception", exc);
      }
      compteur++;
    }
    this.evaluationDao.majEvaluation(evaluations);
  }


  private List<Evaluation> recupererEvaluations(Examen examen, Enseignant enseignant) {
    final List<Evaluation> listeEvaluations = new ArrayList<>();
    for (final Evaluation evaluation : this.evaluationDao.trouverToutesLesEvaluations()) {
      for (final Matiere matiere : enseignant.getEnseigneMatiere()) {
        if (examen.getMatiere().getId() == matiere.getId()) {
          this.extraireExercice(examen, listeEvaluations, evaluation);
        }
      }
    }
    return listeEvaluations;
  }


  private void extraireExercice(Examen examen, List<Evaluation> listeEvaluations,
      Evaluation evaluation) {
    for (final Exercice exercice : examen.getExercices()) {
      if (evaluation.getExercice().getId() == exercice.getId()) {
        listeEvaluations.add(evaluation);
      }
    }
  }

  private List<Examen> recupererListeExamensMatiere(List<Examen> examens, Enseignant enseignant) {
    final List<Examen> listeExamens = new ArrayList<>();
    for (final Examen examen : examens) {
      for (final Matiere matiere : enseignant.getEnseigneMatiere()) {
        if (examen.getMatiere().getId() == matiere.getId()) {
          listeExamens.add(examen);
        }
      }
    }
    return listeExamens;
  }


  private static void notesEleves(Map<Eleve, Map<Examen, Float>> notesEleveExamens,
      List<Eleve> eleves, List<Evaluation> evaluations, List<Examen> examens) {

    parcourirMapping(eleves, evaluations, examens, notesEleveExamens);
  }

  private static void parcourirMapping(List<Eleve> eleves, List<Evaluation> evaluations,
      List<Examen> examens, Map<Eleve, Map<Examen, Float>> notesEleveExamens) {
    for (final Eleve eleve : eleves) {
      for (final Examen examen : examens) {
        if (!examen.getAutoEvaluation()) {
          ExporteurCsv.mapping(evaluations, notesEleveExamens, eleve, examen);
        }
      }
    }
  }


  /*
   * Méthode utilitaire qui retourne null si un champ est vide, et son contenu sinon.
   */
  private static String getValeurChamp(HttpServletRequest request, String nomChamp) {
    final String valeur = request.getParameter(nomChamp);
    if (valeur == null || valeur.trim().length() == 0) {
      return null;
    } else {
      return valeur.trim();
    }
  }
}
