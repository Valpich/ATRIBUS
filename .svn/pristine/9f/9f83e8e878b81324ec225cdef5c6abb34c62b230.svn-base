<?xml version="1.0" encoding="UTF-8"?>

<project name="ATRIBUS" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
	<!-- Declare a folder (sub folder of the project root), to store testng 
		results -->
	<property name="test_results" location="testng" />
	<!-- Declare the path (relative to the basedir) where the compiled classes 
		will be stored -->
	<path id="classpath">
		<pathelement location="build/classes/" />
		<!-- Libraries inside project lib folder -->
		<fileset dir="./WebContent/WEB-INF/lib" includes="*.jar" />
	</path>

	<!-- Define the testng ant task -->
	<taskdef name="testng" classname="org.testng.TestNGAntTask">
		<classpath>
			<!-- On your servers, the testng.jar file is stored in the ant/lib file -->
			<pathelement location="ant/lib/testng.jar" />
		</classpath>
	</taskdef>

	<!-- Define the jacoco ant task -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<!-- On your servers, the jacocoant.jar file is stored in the ant/lib file -->
		<classpath path="jacocoant.jar" />
	</taskdef>
	<copydir src="test-output" dest="test-output-integration" />

	<target name="clean">
		<delete dir="build" />
		<delete dir="test-output" />
		<delete dir="testng" />
	</target>

	<target name="compile_src_debug">
		<mkdir dir="build/classes" />
		<mkdir dir="target" />
		<copy file="spring-dao.xml" todir="build/classes" />
		<copy file="spring-daoBeans.xml" todir="build/classes" />
		<copy file="beanRefFactory.xml" todir="build/classes" />
		<copy file="src/fr/eseo/atribus/dao/bdd.properties" todir="build/classes/fr/eseo/atribus/dao" />
		<copy file="src/ldap.properties" todir="build/classes" />
		<copy file="src/mail.properties" todir="build/classes" />
		<copy file="src/messagesParDefaut.properties" todir="build/classes" />
		<copy file="src/dispatcher-servlet.xml" todir="build/classes" />
		<javac debug="on" debuglevel="lines,vars,source" srcdir="src" destdir="build/classes">
			<classpath>
				<fileset dir="WebContent/WEB-INF/lib/">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- target used to compile the test source code for be an artist, depends 
		upon the source code being compiled for testing (with debug information) -->
	<target name="compile_tests_debug" depends="compile_src_debug">
		<copy file="spring-dao.xml" todir="build/classes" />
		<copy file="spring-daoBeans.xml" todir="build/classes" />
		<copy file="beanRefFactory.xml" todir="build/classes" />
		<copy file="src/ldap.properties" todir="build/classes" />
		<copy file="src/mail.properties" todir="build/classes" />
		<copy file="src/messagesParDefaut.properties" todir="build/classes" />
		<copy file="src/dispatcher-servlet.xml" todir="build/classes" />
		<copy file="src/fr/eseo/atribus/dao/bdd.properties" todir="build/classes/fr/eseo/atribus/dao" />
		<copy file="src/upload.properties" todir="build/classes/" />
		<copy file="src/upload.properties" todir="" />
		<javac debug="on" debuglevel="lines,vars,source" srcdir="tests" destdir="build/classes">
			<classpath refid="classpath" />
		</javac>
	</target>

	<!-- dummy target that compiles both source and tests ready to test -->
	<target name="compile_for_tests" depends="compile_src_debug,compile_tests_debug">
		<copy file="spring-dao.xml" todir="build/classes" />
		<copy file="spring-daoBeans.xml" todir="build/classes" />
		<copy file="beanRefFactory.xml" todir="build/classes" />
		<copy file="src/ldap.properties" todir="build/classes" />
		<copy file="src/mail.properties" todir="build/classes" />
		<copy file="src/messagesParDefaut.properties" todir="build/classes" />
		<copy file="src/dispatcher-servlet.xml" todir="build/classes" />
		<copy file="src/upload.properties" todir="build/classes/" />
		<copy file="src/upload.properties" todir="" />
	</target>

	<!-- target that runs the testng ant task, and which generates a code coverage 
		analysis by jacoco NOTE: If you use junit, you must fork the jvm. TestNG 
		forks automatically. -->
	<target name="test_execution" depends="compile_for_tests">
		<copy file="spring-dao.xml" todir="build/classes" />
		<copy file="spring-daoBeans.xml" todir="build/classes" />
		<copy file="beanRefFactory.xml" todir="build/classes" />
		<copy file="src/ldap.properties" todir="build/classes" />
		<copy file="src/mail.properties" todir="build/classes" />
		<copy file="src/messagesParDefaut.properties" todir="build/classes" />
		<copy file="src/dispatcher-servlet.xml" todir="build/classes" />
		<copy file="src/fr/eseo/atribus/dao/bdd.properties" todir="build/classes/fr/eseo/atribus/dao" />
		<copy file="src/upload.properties" todir="build/classes/" />
		<copy file="src/upload.properties" todir="" />
		<jacoco:coverage destfile="target/jacoco.exec">
			<testng outputdir="${test_results}">
				<classpath refid="classpath" />
				<xmlfileset dir="." includes="testng.xml" />
			</testng>
		</jacoco:coverage>
	</target>
	<!-- Example using Junit <target name="test_execution" depends="compile_for_tests"> 
		<jacoco:coverage destfile="target/jacoco.exec"> <junit fork="true" forkmode="once" 
		> <testname="?????"/> <classpath> <pathelement location="????"/> </classpath> 
		</junit> </jacoco:coverage> </target> -->

	<target name="analysis" depends="clean,test_execution" />
	<!-- target used to compile the source code for be an artist for executing 
		tests -->
	<target name="compile_src_production">
		<mkdir dir="build/classes" />
		<mkdir dir="target" />
		<copy file="spring-dao.xml" todir="build/classes" />
		<copy file="src/ldap.properties" todir="build/classes" />
		<copy file="src/mail.properties" todir="build/classes" />
		<copy file="src/messagesParDefaut.properties" todir="build/classes" />
		<copy file="src/dispatcher-servlet.xml" todir="build/classes" />
		<copy file="src/fr/eseo/atribus/dao/bdd.properties" todir="build/classes/fr/eseo/atribus/dao" />
		<copy file="src/upload.properties" todir="build/classes/" />
		<copy file="src/upload.properties" todir="" />
		<copy file="spring-daoBeans.xml" todir="build/classes" />
		<copy file="beanRefFactory.xml" todir="build/classes" />
		<javac srcdir="src" destdir="build/classes" />
	</target>

	<!-- target used to create a jar file of built production code -->
	<target name="export_jar" depends="clean,compile_src_production">
		<mkdir dir="build/output" />

		<jar destfile="build/output/atribus.jar" basedir="build/classes">
			<manifest>
				<attribute name="Implementation-Title" value="ATRIBUS" />
			</manifest>
		</jar>
	</target>

</project>