package fr.eseo.atribus.controller;



import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import fr.eseo.atribus.dao.CompetenceDao;
import fr.eseo.atribus.dao.MatiereDao;
import fr.eseo.atribus.dao.UeDao;
import fr.eseo.atribus.entities.CompetenceValidable;
import fr.eseo.atribus.entities.Matiere;
import fr.eseo.atribus.entities.UniteEnseignement;

import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.UUID;

public class UeControllerTest {

  private MockMvc mockMvc;
  private UeDao ueDao;
  private CompetenceDao competenceDao;
  private MatiereDao matiereDao;

  /**
   * Méthode d'initialisation.
   */
  @BeforeClass
  public void setup() {

    final UeController ueController = new UeController();
    final InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();

    viewResolver.setPrefix("/WEB-INF/");
    viewResolver.setSuffix(".jsp");
    MockitoAnnotations.initMocks(this);

    ueController.init();

    this.mockMvc =
        MockMvcBuilders.standaloneSetup(ueController).setViewResolvers(viewResolver).build();
    final BeanFactoryReference bf =
        SingletonBeanFactoryLocator.getInstance().useBeanFactory("beansDao");
    this.ueDao = (UeDao) bf.getFactory().getBean("ueDao");
    this.competenceDao = (CompetenceDao) bf.getFactory().getBean("competenceDao");
    this.matiereDao = (MatiereDao) bf.getFactory().getBean("matiereDao");
  }

  @Test
  public void ajouterUeGet() throws Exception {

    this.mockMvc.perform(get("/DirecteurProgrammes/AjouterUE")).andExpect(status().isOk())
        .andExpect(view().name("DirecteurProgrammes/ajoutUe"));

  }

  @Test
  public void ajouterUePost() throws Exception {

    final Random rand = new Random();
    final int nombreAleatoire = rand.nextInt(10000);

    this.mockMvc
        .perform(post("/DirecteurProgrammes/AjouterUE").param("nbCreditsEcts", "1")
            .param("nbHeures", "3").param("nomUe", "UeTest " + nombreAleatoire)
            .param("semestre", "7").param("choixIdEnseignant", "3"))
        .andDo(print()).andExpect(status().isOk())
        .andExpect(view().name("DirecteurProgrammes/ajoutUe"));

    // On test l'ajout d'un UE avec les mauvais paramètres

    this.mockMvc
        .perform(post("/DirecteurProgrammes/AjouterUE").param("nbCreditsEcts", "a")
            .param("nbHeures", "a").param("nomUe", "ue").param("semestre", "8")
            .param("choixIdEnseignant", "1"))
        .andDo(print()).andExpect(status().isOk())
        .andExpect(view().name("DirecteurProgrammes/ajoutUe"));

  }

  @Test
  public void validerCompetencesUeGet() throws Exception {

    this.mockMvc.perform(get("/DirecteurProgrammes/ValiderCompetences")).andExpect(status().isOk())
        .andExpect(view().name("DirecteurProgrammes/validerCompetences"));

  }

  @Test
  public void validerCompetencesUePost() throws Exception {
    this.competenceDao.trouverParId(1);
    this.mockMvc
        .perform(post("/DirecteurProgrammes/ValiderCompetences").param("table_records", "1"))
        .andExpect(status().isOk())
        .andExpect(view().name("DirecteurProgrammes/validerCompetences"));

  }

  @Test
  public void afficherCompetenceUeGet() throws Exception {

    this.mockMvc.perform(get("/EnseignantRefMatiere/AfficherCompetenceUE"))
        .andExpect(status().isOk())
        .andExpect(view().name("EnseignantRefMatiere/afficherCompetenceUe"));

  }

  @Test
  public void afficherCompetenceUePost() throws Exception {

    this.mockMvc
        .perform(post("/EnseignantRefMatiere/AfficherCompetenceUE").param("nomUe", "Mathématiques"))
        .andExpect(status().isOk())
        .andExpect(view().name("EnseignantRefMatiere/afficherCompetenceUe"));

  }

  @Test
  public void afficherCompetenceMatiereGet() throws Exception {

    this.mockMvc.perform(get("/Enseignant/AfficherCompetenceMatiere")).andExpect(status().isOk())
        .andExpect(view().name("Enseignant/afficherCompetenceMatiere"));

  }

  @Test
  public void afficherCompetenceMatierePost() throws Exception {

    this.mockMvc
        .perform(post("/Enseignant/AfficherCompetenceMatiere").param("nomMatiere", "Probabilités"))
        .andExpect(status().isOk()).andExpect(view().name("Enseignant/afficherCompetenceMatiere"));

  }

  @Test
  public void afficherModifierUeSelectionUe() throws Exception {

    this.mockMvc.perform(get("/DirecteurProgrammes/ModifierUE")).andExpect(status().isOk())
        .andExpect(view().name("DirecteurProgrammes/modifierUe"));
  }

  @Test
  public void affichersAsocierMatiereUe() throws Exception {

    this.mockMvc.perform(get("/EnseignantRefUE/AssocierMatiereUe")).andExpect(status().isOk())
        .andExpect(view().name("EnseignantRefUE/modifierMatieresUe"));
  }

  @Test
  public void afficherAssocierMatiereUe() throws Exception {

    this.mockMvc.perform(get("/EnseignantRefUE/ModifierMatiereUE")).andExpect(status().isOk())
        .andExpect(view().name("EnseignantRefUE/modifierMatieresUe"));
  }

  @Test
  public void modifierMatiereUe() throws Exception {

    this.mockMvc
        .perform(post("/EnseignantRefUE/ModifierMatiereUE").param("ue", "3").param("choixUe",
            "Mathématiques"))
        .andExpect(status().isOk()).andExpect(view().name("EnseignantRefUE/modifierMatieresUe"));
  }

  @Test
  public void supprimerMatiereUe() throws Exception {

    this.mockMvc
        .perform(post("/EnseignantRefUE/ModifierMatiereUE").param("idUe", "0")
            .param("idMatiere", "0").param("supprimer", "Mathématiques"))
        .andExpect(status().isOk()).andExpect(view().name("EnseignantRefUE/modifierMatieresUe"));
  }

  @Test
  public void modifierModMatiereUe() throws Exception {

    this.mockMvc
        .perform(post("/EnseignantRefUE/ModifierMatiereUE").param("modifier", "Mathématiques")
            .param("idMatiere", "1"))
        .andExpect(status().isOk()).andExpect(view().name("EnseignantRefUE/modifierMatieresUe"));
  }

  @Test
  public void validerModifierModMatiereUe() throws Exception {
    UniteEnseignement ue = this.ueDao.listerUe().get(0);
    List<Matiere> matieres = this.matiereDao.listerMatiereParUe(Integer.toString(ue.getId()));
    this.mockMvc
        .perform(post("/EnseignantRefUE/ModifierMatiereUE")
            .param("validerModifierMatiere", "Mathématiques").param("coefficient", "1").param("idMatiereAModifier",
                Integer.toString(matieres.get(0).getId())).param("nomNouvelleMatiere",UUID.randomUUID().toString()).param("idEnseignantNouvelleMatiere", "1").param("idNouvelleUe", "1"))
        .andExpect(status().isOk()).andExpect(view().name("EnseignantRefUE/modifierMatieresUe"));
  }
 
  @Test
  public void modifierUe() throws Exception {
    UniteEnseignement ue = this.ueDao.listerUe().get(0);
    List<Matiere> matieres = this.matiereDao.listerMatiereParUe(Integer.toString(ue.getId()));
    this.mockMvc
    .perform(post("/DirecteurProgrammes/ModifierUE")
        .param("choixUe", "1").param("idUe", "1"))
    .andExpect(status().isOk()).andExpect(view().name("DirecteurProgrammes/modifierUe"));
    this.mockMvc
        .perform(post("/DirecteurProgrammes/ModifierUE")
            .param("ectsNouvelleUe", "1").param("nbHeuresNouvelleUe", "1").param("semestreNouvelleUe",
                "1").param("nomNouvelleUe",UUID.randomUUID().toString()).param("idEnseignantNouvelleMatiere", "1").param("idUe", "1"))
        .andExpect(status().isOk()).andExpect(view().name("DirecteurProgrammes/modifierUe"));
  }

  /**
   * @Test public void modifierUeSelectionUe() throws Exception {
   * 
   *       mockMvc .perform(post("/DirecteurProgrammes/ModifierUE").param("nomUe", "Anglais"))
   *       .andExpect(status().isOk()).andExpect(view().name("DirecteurProgrammes/modifierUe"));
   * 
   *       }
   */
}
