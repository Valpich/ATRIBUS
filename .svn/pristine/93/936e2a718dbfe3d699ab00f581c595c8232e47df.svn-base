<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>EnseignantDaoImpl.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.dao</a> &gt; <span class="el_source">EnseignantDaoImpl.java</span></div><h1>EnseignantDaoImpl.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.dao;

import fr.eseo.atribus.entities.Enseignant;
import fr.eseo.atribus.entities.Matiere;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class EnseignantDaoImpl implements EnseignantDao {
<span class="nc" id="L19">  private static final Logger LOGGER = Logger.getLogger(EnseignantDaoImpl.class.getName());</span>
  private static final String EXCEPTION = &quot;Exception&quot;;

  private final DaoFactory daoFactory;
  
  private static final String SELECT_1 = &quot;SELECT enseignant.id AS id_enseignant, utilisateur.* &quot;;
  
  private static final String SELECT_2 = &quot; FROM enseignant &quot;;
  
  private static final String SELECT_3 =
      &quot; LEFT JOIN utilisateur ON utilisateur.id = enseignant.id_utilisateur &quot;;
  
  private static final String SQL_SELECT_PAR_LOGIN_HASH = SELECT_1 + SELECT_2 + SELECT_3
      + &quot; WHERE utilisateur.login = ?&quot; + &quot; AND utilisateur.password = ?&quot;;

  private static final String SQL_INSERT = &quot;INSERT INTO enseignant (id_utilisateur) VALUES (?)&quot;;

  private static final String SQL_SELECT_PAR_LOGIN = &quot;SELECT enseignant.id, utilisateur.login &quot;
      + SELECT_2 + SELECT_3 + &quot;WHERE login = ?&quot;;

  private static final String SQL_SELECT_ALL = SELECT_1 + SELECT_2 + SELECT_3;

  private static final String SQL_TROUVER_ASS_MATIERES =
      &quot;SELECT id_matiere FROM enseignant_enseigne_matiere WHERE id_enseignant = ?&quot;;
  
  private static final String SQL_SELECT_PAR_NOM = &quot;SELECT * FROM enseignant WHERE nom = ?&quot;;

  
  private static final String SQL_SELECT_PAR_ID_UTILISATEUR = SELECT_1 + SELECT_2 + SELECT_3
          + &quot; WHERE id_utilisateur = ?&quot;;
  
  private static final String SQL_DELETE_PAR_ID_UTILISATEUR =
      &quot;DELETE FROM enseignant WHERE id_utilisateur = ?&quot;;
  
  private static final String BEANS_DAO = &quot;beansDao&quot;;

  
<span class="nc" id="L56">  EnseignantDaoImpl() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L58">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;contextDao&quot;);</span>
<span class="nc" id="L59">    this.daoFactory = (DaoFactory) bf.getFactory().getBean(&quot;daoFactory&quot;);</span>
<span class="nc" id="L60">  }</span>

  @Override
  public List&lt;Enseignant&gt; recupererListe() {
<span class="nc" id="L64">    final List&lt;Enseignant&gt; listeEnseignant = new ArrayList&lt;&gt;();</span>
<span class="nc" id="L65">    Connection connexion = null;</span>
<span class="nc" id="L66">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L67">    ResultSet resultSet = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L71">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L72">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
          EnseignantDaoImpl.SQL_SELECT_ALL, false);
<span class="nc" id="L74">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L76" title="All 2 branches missed.">      while (resultSet.next()) {</span>
<span class="nc" id="L77">        listeEnseignant.add(this.map(resultSet));</span>
      }
<span class="nc" id="L79">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L80">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L82">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L83">    }</span>

<span class="nc" id="L85">    return listeEnseignant;</span>
  }

  @Override /* Trouve l'id de l'enseignant (ne pas confondre avec l'id de l'utilisateur */
  public int trouverIdParLogin(String login) {
<span class="nc" id="L90">    return DaoUtilitaire.trouverId(this.daoFactory, EnseignantDaoImpl.SQL_SELECT_PAR_LOGIN, login);</span>
  }

  /* Implémentation de la méthode trouverParLogin() définie dans l'interface UtilisateurBdd */
  @Override
  public Enseignant trouverParLoginHash(String login, String hash) {
<span class="nc" id="L96">    return this.trouver(EnseignantDaoImpl.SQL_SELECT_PAR_LOGIN_HASH, login, hash);</span>
  }
  
  @Override
  public Enseignant trouverParIdUtilisateur(int idUtilisateur) {
<span class="nc" id="L101">    return this.trouver(EnseignantDaoImpl.SQL_SELECT_PAR_ID_UTILISATEUR, idUtilisateur);</span>
  }
  
  @Override
  public Enseignant trouverParNom(String nom) {
<span class="nc" id="L106">    return this.trouver(EnseignantDaoImpl.SQL_SELECT_PAR_NOM, nom);</span>
  }
  
  @Override
  public List&lt;Enseignant&gt; trouverTousLesEnseignants() {
<span class="nc" id="L111">    List&lt;Enseignant&gt; listeEnseignant = new ArrayList&lt;&gt;();</span>
<span class="nc" id="L112">    Connection connexion = null;</span>
<span class="nc" id="L113">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L114">    ResultSet resultSet = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L118">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L119">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
          EnseignantDaoImpl.SQL_SELECT_ALL, false);
<span class="nc" id="L121">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L123" title="All 2 branches missed.">      while (resultSet.next()) {</span>
<span class="nc" id="L124">        listeEnseignant.add(map(resultSet));</span>
      }
<span class="nc" id="L126">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L127">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L129">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L130">    }</span>

<span class="nc" id="L132">    return listeEnseignant;</span>
  }

  @Override
  public Enseignant ajouter(Enseignant enseignant) {
<span class="nc" id="L137">    Connection connexion = null;</span>
<span class="nc" id="L138">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L139">    final ResultSet valeursAutoGenerees = null;</span>

    try {
      final BeanFactoryReference bf =
<span class="nc" id="L143">          SingletonBeanFactoryLocator.getInstance().useBeanFactory(EnseignantDaoImpl.BEANS_DAO);</span>
<span class="nc" id="L144">      final int idUtilisateur = ((UtilisateurDao) bf.getFactory().getBean(&quot;utilisateurDao&quot;))</span>
<span class="nc" id="L145">          .trouverIdParLogin(enseignant.getLogin());</span>
      
      // Si il n'y a pas déja l'utilisateur associé
<span class="nc bnc" id="L148" title="All 2 branches missed.">      if (this.trouverParIdUtilisateur(idUtilisateur) == null) {</span>
<span class="nc" id="L149">        connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L150">        preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L151">            EnseignantDaoImpl.SQL_INSERT, true, idUtilisateur);</span>

<span class="nc" id="L153">        final int statut = preparedStatement.executeUpdate();</span>
        /* Analyse du statut retourné par la requête d'insertion */
<span class="nc bnc" id="L155" title="All 2 branches missed.">        if (statut == 0) {</span>
<span class="nc" id="L156">          throw new DaoException(</span>
              &quot;Échec de la création de l'enseignant, aucune ligne ajoutée dans la table.&quot;);
        }
      }
      
<span class="nc" id="L161">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L162">      EnseignantDaoImpl.LOGGER.log(Level.INFO, EnseignantDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L163">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L165">      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);</span>
<span class="nc" id="L166">    }</span>
<span class="nc" id="L167">    return enseignant;</span>
  }
  
  @Override
  public int supprimer(Enseignant enseignant) {

    int statut;
<span class="nc" id="L174">    Connection connexion = null;</span>
<span class="nc" id="L175">    PreparedStatement preparedStatement = null;</span>


    try {
      /* Récupération de l'id_utilisateur */
      final BeanFactoryReference bf =
<span class="nc" id="L181">          SingletonBeanFactoryLocator.getInstance().useBeanFactory(EnseignantDaoImpl.BEANS_DAO);</span>
<span class="nc" id="L182">      final int idUtilisateur = ((UtilisateurDao) bf.getFactory().getBean(&quot;utilisateurDao&quot;))</span>
<span class="nc" id="L183">          .trouverIdParLogin(enseignant.getLogin());</span>

      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L186">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L187">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L188">          EnseignantDaoImpl.SQL_DELETE_PAR_ID_UTILISATEUR, false, idUtilisateur);</span>

<span class="nc" id="L190">      statut = preparedStatement.executeUpdate();</span>

<span class="nc" id="L192">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L193">      EnseignantDaoImpl.LOGGER.log(Level.INFO, EnseignantDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L194">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L196">      DaoUtilitaire.fermeturesSilencieuses(preparedStatement, connexion);</span>
<span class="nc" id="L197">    }</span>

<span class="nc" id="L199">    return statut;</span>
  }


  /*
   * Méthode générique utilisée pour retourner un adminsys depuis la base de données, correspondant
   * à la requête SQL donnée prenant en paramètres les objets passés en argument.
   */
  private Enseignant trouver(String sql, Object... objets) {
<span class="nc" id="L208">    Connection connexion = null;</span>
<span class="nc" id="L209">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L210">    ResultSet resultSet = null;</span>
<span class="nc" id="L211">    Enseignant enseignant = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L215">      connexion = this.daoFactory.getConnection();</span>
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
<span class="nc" id="L220">      preparedStatement =</span>
<span class="nc" id="L221">          DaoUtilitaire.initialisationRequetePreparee(connexion, sql, false, objets);</span>
<span class="nc" id="L222">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L224" title="All 2 branches missed.">      if (resultSet.next()) {</span>
<span class="nc" id="L225">        enseignant = this.map(resultSet);</span>
      }
<span class="nc" id="L227">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L228">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L230">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L231">    }</span>
<span class="nc" id="L232">    return enseignant;</span>
  }

  @Override
  public List&lt;Matiere&gt; trouverMatieres(Enseignant enseignant) {
<span class="nc" id="L237">    Connection connexion = null;</span>
<span class="nc" id="L238">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L239">    final ResultSet valeursAutoGenerees = null;</span>
<span class="nc" id="L240">    final List&lt;Matiere&gt; matieres = new ArrayList&lt;&gt;();</span>
    final BeanFactoryReference bf =
<span class="nc" id="L242">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(EnseignantDaoImpl.BEANS_DAO);</span>
<span class="nc" id="L243">    final MatiereDao matiereDao = (MatiereDao) bf.getFactory().getBean(&quot;matiereDao&quot;);</span>
    try {
<span class="nc" id="L245">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L246">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L247">          EnseignantDaoImpl.SQL_TROUVER_ASS_MATIERES, true, enseignant.getIdEnseignant());</span>
<span class="nc" id="L248">      final ResultSet resultSet = preparedStatement.executeQuery();</span>
      /* Analyse du statut retourné par la requête d'insertion */
<span class="nc bnc" id="L250" title="All 2 branches missed.">      while (resultSet.next()) {</span>
<span class="nc" id="L251">        matieres.add(matiereDao.trouverParId(resultSet.getInt(&quot;id_matiere&quot;)));</span>
      }
<span class="nc" id="L253">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L254">      EnseignantDaoImpl.LOGGER.log(Level.INFO, EnseignantDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L255">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L257">      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);</span>
<span class="nc" id="L258">    }</span>
<span class="nc" id="L259">    return matieres;</span>
  }


  /*
   * Simple méthode utilitaire permettant de faire la correspondance (le mapping) entre une ligne
   * issue de la table des adminsyss (un ResultSet) et un bean Utilisateur.
   */
  private Enseignant map(ResultSet resultSet) throws SQLException {
<span class="nc" id="L268">    final Enseignant enseignant = new Enseignant();</span>
<span class="nc" id="L269">    enseignant.setId(resultSet.getInt(&quot;id&quot;));</span>
<span class="nc" id="L270">    enseignant.setIdEnseignant(resultSet.getInt(&quot;id_enseignant&quot;));</span>
<span class="nc" id="L271">    enseignant.setLogin(resultSet.getString(&quot;login&quot;));</span>
<span class="nc" id="L272">    enseignant.setPassword(resultSet.getString(&quot;password&quot;));</span>
<span class="nc" id="L273">    enseignant.setNom(resultSet.getString(&quot;nom&quot;));</span>
<span class="nc" id="L274">    enseignant.setPrenom(resultSet.getString(&quot;prenom&quot;));</span>
<span class="nc" id="L275">    enseignant.setEmail(resultSet.getString(&quot;email&quot;));</span>
<span class="nc" id="L276">    enseignant.setDateInscription(resultSet.getTimestamp(&quot;date_inscription&quot;));</span>
<span class="nc" id="L277">    enseignant.setEnseigneMatiere(this.trouverMatieres(enseignant));</span>
<span class="nc" id="L278">    enseignant.setNotificationActive(resultSet.getBoolean(&quot;notification_active&quot;));</span>
<span class="nc" id="L279">    enseignant.setNotificationMail(resultSet.getBoolean(&quot;notification_mail&quot;));</span>
<span class="nc" id="L280">    enseignant.setFrequenceNotificationMail(resultSet.getInt(&quot;frequence_notification_mail&quot;));</span>
<span class="nc" id="L281">    return enseignant;</span>
  }

  
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>