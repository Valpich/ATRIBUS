<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>MailController.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.controller</a> &gt; <span class="el_source">MailController.java</span></div><h1>MailController.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.controller;

import fr.eseo.atribus.dao.CompetenceDao;
import fr.eseo.atribus.dao.EleveDao;
import fr.eseo.atribus.entities.Competence;
import fr.eseo.atribus.entities.DirecteurEtudes;
import fr.eseo.atribus.entities.Eleve;
import fr.eseo.atribus.entities.Enseignant;
import fr.eseo.atribus.entities.EnseignantRefMatiere;
import fr.eseo.atribus.entities.EnseignantRefUe;
import fr.eseo.atribus.entities.Utilisateur;
import fr.eseo.atribus.forms.ConvoquerEtudiantForm;
import fr.eseo.atribus.forms.SuggererAjouterCompetenceForm;
import fr.eseo.atribus.forms.SuggererNouvelleCompetenceForm;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

@Controller
<span class="nc" id="L31">public class MailController {</span>
  public static final String ATT_FORM = &quot;form&quot;;
  public static final String ATT_SESSION_USER = &quot;sessionUtilisateur&quot;;
  private static final String VUE_SUGGERER_AJOUTER = &quot;suggererCompetenceExistantes&quot;;
  private static final String VUE_SUGGERER_NOUVELLE = &quot;suggererNouvelleCompetence&quot;;
  private static final String VUE_CONVOQUER = &quot;DirecteurEtudes/convoquerEtudiant&quot;;
  private static final String BEANS_DAO = &quot;beansDao&quot;;
  private static final String ELEVES = &quot;eleves&quot;;
  private static final String ELEVE_DAO = &quot;eleveDao&quot;;
  private static final String COMPETENCE_DAO = &quot;competenceDao&quot;;
  private static final String REDIRECT_INDEX = &quot;redirect:/index&quot;;
  private static final String COMPETENCES = &quot;competences&quot;;
  @Autowired(required = true)
  private ConvoquerEtudiantForm convoquerEtudiantForm;
  @Autowired(required = true)
  private SuggererNouvelleCompetenceForm suggererNouvelleCompetenceForm;
  @Autowired(required = true)
  private SuggererAjouterCompetenceForm suggererAjouterCompetenceForm;

  @RequestMapping(value = &quot;/DirecteurEtudes/ConvoquerEtudiant&quot;, method = RequestMethod.GET)
  protected ModelAndView afficherConvoquerEtudiant() {
<span class="nc" id="L52">    final HashMap&lt;String, Object&gt; attributsRequete = new HashMap&lt;&gt;();</span>
    final BeanFactoryReference bf =
<span class="nc" id="L54">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(BEANS_DAO);</span>
<span class="nc" id="L55">    final List&lt;Eleve&gt; eleves = ((EleveDao) bf.getFactory().getBean(ELEVE_DAO)).recupererListe();</span>
<span class="nc" id="L56">    attributsRequete.put(ELEVES, eleves);</span>
<span class="nc" id="L57">    return new ModelAndView(VUE_CONVOQUER, attributsRequete);</span>
  }

  @RequestMapping(value = &quot;/DirecteurEtudes/ConvoquerEtudiant&quot;, method = RequestMethod.POST)
  protected ModelAndView convoquerEtudiant(HttpServletRequest request,
      @RequestParam(&quot;choixEleve&quot;) String eleve, @RequestParam(&quot;date&quot;) String date) {
<span class="nc" id="L63">    final HashMap&lt;String, Object&gt; attributsRequete = new HashMap&lt;&gt;();</span>
    @SuppressWarnings(&quot;unchecked&quot;)
<span class="nc" id="L65">    final List&lt;Utilisateur&gt; listeUtilisateur =</span>
<span class="nc" id="L66">        (List&lt;Utilisateur&gt;) request.getSession().getAttribute(ATT_SESSION_USER);</span>
<span class="nc" id="L67">    DirecteurEtudes de = null;</span>
<span class="nc bnc" id="L68" title="All 2 branches missed.">    for (final Utilisateur utilisateur : listeUtilisateur) {</span>
<span class="nc bnc" id="L69" title="All 2 branches missed.">      if (utilisateur.getClass().equals(DirecteurEtudes.class)) {</span>
<span class="nc" id="L70">        de = (DirecteurEtudes) utilisateur;</span>
      }
<span class="nc" id="L72">    }</span>
<span class="nc bnc" id="L73" title="All 2 branches missed.">    if (de != null) {</span>
<span class="nc" id="L74">      this.convoquerEtudiantForm.convoquerEleve(de, eleve, date);</span>
<span class="nc" id="L75">      attributsRequete.put(ATT_FORM, this.convoquerEtudiantForm);</span>
      final BeanFactoryReference bf =
<span class="nc" id="L77">          SingletonBeanFactoryLocator.getInstance().useBeanFactory(BEANS_DAO);</span>
<span class="nc" id="L78">      final List&lt;Eleve&gt; eleves = ((EleveDao) bf.getFactory().getBean(ELEVE_DAO)).recupererListe();</span>
<span class="nc" id="L79">      attributsRequete.put(ELEVES, eleves);</span>
<span class="nc" id="L80">      return new ModelAndView(VUE_CONVOQUER, attributsRequete);</span>
    }
<span class="nc" id="L82">    return new ModelAndView(REDIRECT_INDEX);</span>
  }

  @RequestMapping(value = &quot;/Eleve/SuggererCompetence&quot;, method = RequestMethod.GET)
  protected ModelAndView afficherSuggererCompetenceNouvelle() {
<span class="nc" id="L87">    return new ModelAndView(VUE_SUGGERER_NOUVELLE);</span>
  }

  @RequestMapping(value = &quot;/Eleve/SuggererCompetence&quot;, method = RequestMethod.POST)
  protected ModelAndView suggererNouvelleCompetence(HttpServletRequest request,
      @RequestParam(&quot;competence&quot;) String competence,
      @RequestParam(&quot;commentaire&quot;) String commentaire) {
<span class="nc" id="L94">    final HashMap&lt;String, Object&gt; attributsRequete = new HashMap&lt;&gt;();</span>
    @SuppressWarnings(&quot;unchecked&quot;)
<span class="nc" id="L96">    final List&lt;Utilisateur&gt; listeUtilisateur =</span>
<span class="nc" id="L97">        (List&lt;Utilisateur&gt;) request.getSession().getAttribute(ATT_SESSION_USER);</span>
<span class="nc" id="L98">    Eleve eleve = null;</span>
<span class="nc bnc" id="L99" title="All 2 branches missed.">    for (final Utilisateur utilisateur : listeUtilisateur) {</span>
<span class="nc bnc" id="L100" title="All 2 branches missed.">      if (utilisateur.getClass().equals(Eleve.class)) {</span>
<span class="nc" id="L101">        eleve = (Eleve) utilisateur;</span>
      }
<span class="nc" id="L103">    }</span>
<span class="nc bnc" id="L104" title="All 2 branches missed.">    if (eleve != null) {</span>
<span class="nc" id="L105">      this.suggererNouvelleCompetenceForm.suggererCompetence(eleve, competence, commentaire);</span>
<span class="nc" id="L106">      attributsRequete.put(ATT_FORM, this.suggererNouvelleCompetenceForm);</span>
<span class="nc" id="L107">      return new ModelAndView(VUE_SUGGERER_NOUVELLE, attributsRequete);</span>
    }
<span class="nc" id="L109">    return new ModelAndView(REDIRECT_INDEX);</span>
  }

  @RequestMapping(value = &quot;/EnseignantRefUE/SuggererCompetence&quot;, method = RequestMethod.GET)
  protected ModelAndView afficherSuggererCompetenceNouvelleRefUe() {
<span class="nc" id="L114">    return new ModelAndView(VUE_SUGGERER_NOUVELLE);</span>
  }

  @RequestMapping(value = &quot;/EnseignantRefUE/SuggererCompetence&quot;, method = RequestMethod.POST)
  protected ModelAndView suggererNouvelleCompetenceRefUe(HttpServletRequest request,
      @RequestParam(&quot;competence&quot;) String competence,
      @RequestParam(&quot;commentaire&quot;) String commentaire) {
<span class="nc" id="L121">    final HashMap&lt;String, Object&gt; attributsRequete = new HashMap&lt;&gt;();</span>
    @SuppressWarnings(&quot;unchecked&quot;)
<span class="nc" id="L123">    final List&lt;Utilisateur&gt; listeUtilisateur =</span>
<span class="nc" id="L124">        (List&lt;Utilisateur&gt;) request.getSession().getAttribute(ATT_SESSION_USER);</span>
<span class="nc" id="L125">    EnseignantRefUe eure = null;</span>
<span class="nc bnc" id="L126" title="All 2 branches missed.">    for (final Utilisateur utilisateur : listeUtilisateur) {</span>
<span class="nc bnc" id="L127" title="All 2 branches missed.">      if (utilisateur.getClass().equals(EnseignantRefUe.class)) {</span>
<span class="nc" id="L128">        eure = (EnseignantRefUe) utilisateur;</span>
      }
<span class="nc" id="L130">    }</span>
<span class="nc bnc" id="L131" title="All 2 branches missed.">    if (eure != null) {</span>
<span class="nc" id="L132">      this.suggererNouvelleCompetenceForm.suggererCompetence(eure, competence, commentaire);</span>
<span class="nc" id="L133">      attributsRequete.put(ATT_FORM, this.suggererNouvelleCompetenceForm);</span>
<span class="nc" id="L134">      return new ModelAndView(VUE_SUGGERER_NOUVELLE, attributsRequete);</span>
    }
<span class="nc" id="L136">    return new ModelAndView(REDIRECT_INDEX);</span>
  }

  @RequestMapping(value = &quot;/Enseignant/SuggererCompetence&quot;, method = RequestMethod.GET)
  protected ModelAndView afficherSuggererCompetenceNouvelleEnseignant() {
<span class="nc" id="L141">    final HashMap&lt;String, Object&gt; attributsRequete = new HashMap&lt;&gt;();</span>
    final BeanFactoryReference bf =
<span class="nc" id="L143">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(BEANS_DAO);</span>
<span class="nc" id="L144">    final List&lt;Competence&gt; competences =</span>
<span class="nc" id="L145">        ((CompetenceDao) bf.getFactory().getBean(COMPETENCE_DAO)).trouverToutesLesCompetences();</span>
<span class="nc" id="L146">    attributsRequete.put(COMPETENCES, competences);</span>
<span class="nc" id="L147">    return new ModelAndView(VUE_SUGGERER_AJOUTER, attributsRequete);</span>
  }

  @RequestMapping(value = &quot;/Enseignant/SuggererCompetence&quot;, method = RequestMethod.POST)
  protected ModelAndView suggererNouvelleCompetenceEnseignant(HttpServletRequest request,
      @RequestParam(&quot;choixCompetence&quot;) String competence,
      @RequestParam(&quot;commentaire&quot;) String commentaire) {
<span class="nc" id="L154">    final HashMap&lt;String, Object&gt; attributsRequete = new HashMap&lt;&gt;();</span>
    @SuppressWarnings(&quot;unchecked&quot;)
<span class="nc" id="L156">    final List&lt;Utilisateur&gt; listeUtilisateur =</span>
<span class="nc" id="L157">        (List&lt;Utilisateur&gt;) request.getSession().getAttribute(ATT_SESSION_USER);</span>
<span class="nc" id="L158">    Enseignant enseignant = null;</span>
    final BeanFactoryReference bf =
<span class="nc" id="L160">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(BEANS_DAO);</span>
<span class="nc" id="L161">    final List&lt;Competence&gt; competences =</span>
<span class="nc" id="L162">        ((CompetenceDao) bf.getFactory().getBean(COMPETENCE_DAO)).trouverToutesLesCompetences();</span>
<span class="nc" id="L163">    attributsRequete.put(COMPETENCES, competences);</span>
<span class="nc bnc" id="L164" title="All 2 branches missed.">    for (final Utilisateur utilisateur : listeUtilisateur) {</span>
<span class="nc bnc" id="L165" title="All 2 branches missed.">      if (utilisateur.getClass().equals(Enseignant.class)) {</span>
<span class="nc" id="L166">        enseignant = (Enseignant) utilisateur;</span>
      }
<span class="nc" id="L168">    }</span>
<span class="nc bnc" id="L169" title="All 2 branches missed.">    if (enseignant != null) {</span>
<span class="nc" id="L170">      this.suggererAjouterCompetenceForm.suggererCompetence(enseignant, competence, commentaire);</span>
<span class="nc" id="L171">      attributsRequete.put(ATT_FORM, this.suggererAjouterCompetenceForm);</span>
<span class="nc" id="L172">      return new ModelAndView(VUE_SUGGERER_AJOUTER, attributsRequete);</span>
    }
<span class="nc" id="L174">    return new ModelAndView(REDIRECT_INDEX);</span>
  }

  @RequestMapping(value = &quot;/EnseignantRefMatiere/SuggererCompetence&quot;, method = RequestMethod.GET)
  protected ModelAndView afficherSuggererAjouterCompetenceEnseignantRefMatiere() {
<span class="nc" id="L179">    final HashMap&lt;String, Object&gt; attributsRequete = new HashMap&lt;&gt;();</span>
    final BeanFactoryReference bf =
<span class="nc" id="L181">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(BEANS_DAO);</span>
<span class="nc" id="L182">    final List&lt;Competence&gt; competences =</span>
<span class="nc" id="L183">        ((CompetenceDao) bf.getFactory().getBean(COMPETENCE_DAO)).trouverToutesLesCompetences();</span>
<span class="nc" id="L184">    attributsRequete.put(COMPETENCES, competences);</span>
<span class="nc" id="L185">    return new ModelAndView(VUE_SUGGERER_AJOUTER, attributsRequete);</span>
  }

  @RequestMapping(value = &quot;/EnseignantRefMatiere/SuggererCompetence&quot;, method = RequestMethod.POST)
  protected ModelAndView suggererAjouterCompetenceEnseignantRefMatiere(HttpServletRequest request,
      @RequestParam(&quot;choixCompetence&quot;) String competence,
      @RequestParam(&quot;commentaire&quot;) String commentaire) {
<span class="nc" id="L192">    final HashMap&lt;String, Object&gt; attributsRequete = new HashMap&lt;&gt;();</span>
    @SuppressWarnings(&quot;unchecked&quot;)
<span class="nc" id="L194">    final List&lt;Utilisateur&gt; listeUtilisateur =</span>
<span class="nc" id="L195">        (List&lt;Utilisateur&gt;) request.getSession().getAttribute(ATT_SESSION_USER);</span>
<span class="nc" id="L196">    EnseignantRefMatiere enseignant = null;</span>
    final BeanFactoryReference bf =
<span class="nc" id="L198">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(BEANS_DAO);</span>
<span class="nc" id="L199">    final List&lt;Competence&gt; competences =</span>
<span class="nc" id="L200">        ((CompetenceDao) bf.getFactory().getBean(COMPETENCE_DAO)).trouverToutesLesCompetences();</span>
<span class="nc" id="L201">    attributsRequete.put(COMPETENCES, competences);</span>
<span class="nc bnc" id="L202" title="All 2 branches missed.">    for (final Utilisateur utilisateur : listeUtilisateur) {</span>
<span class="nc bnc" id="L203" title="All 2 branches missed.">      if (utilisateur.getClass().equals(EnseignantRefMatiere.class)) {</span>
<span class="nc" id="L204">        enseignant = (EnseignantRefMatiere) utilisateur;</span>
      }
<span class="nc" id="L206">    }</span>
<span class="nc bnc" id="L207" title="All 2 branches missed.">    if (enseignant != null) {</span>
<span class="nc" id="L208">      this.suggererAjouterCompetenceForm.suggererCompetence(enseignant, competence, commentaire);</span>
<span class="nc" id="L209">      attributsRequete.put(ATT_FORM, this.suggererAjouterCompetenceForm);</span>
<span class="nc" id="L210">      return new ModelAndView(VUE_SUGGERER_AJOUTER, attributsRequete);</span>
    }
<span class="nc" id="L212">    return new ModelAndView(REDIRECT_INDEX);</span>
  }

  public ConvoquerEtudiantForm getConvoquerEtudiantForm() {
<span class="nc" id="L216">    return this.convoquerEtudiantForm;</span>
  }

  public void setConvoquerEtudiantForm(ConvoquerEtudiantForm convoquerEtudiantForm) {
<span class="nc" id="L220">    this.convoquerEtudiantForm = convoquerEtudiantForm;</span>
<span class="nc" id="L221">  }</span>

  public SuggererNouvelleCompetenceForm getSuggererNouvelleCompetenceForm() {
<span class="nc" id="L224">    return this.suggererNouvelleCompetenceForm;</span>
  }

  public void setSuggererNouvelleCompetenceForm(
      SuggererNouvelleCompetenceForm suggererNouvelleCompetenceForm) {
<span class="nc" id="L229">    this.suggererNouvelleCompetenceForm = suggererNouvelleCompetenceForm;</span>
<span class="nc" id="L230">  }</span>

  public SuggererAjouterCompetenceForm getSuggererAjouterCompetenceForm() {
<span class="nc" id="L233">    return this.suggererAjouterCompetenceForm;</span>
  }

  public void setSuggererAjouterCompetenceForm(
      SuggererAjouterCompetenceForm suggererAjouterCompetenceForm) {
<span class="nc" id="L238">    this.suggererAjouterCompetenceForm = suggererAjouterCompetenceForm;</span>
<span class="nc" id="L239">  }</span>
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>