<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>FiltreLimiteurRequeteUtilisateur.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.filters</a> &gt; <span class="el_source">FiltreLimiteurRequeteUtilisateur.java</span></div><h1>FiltreLimiteurRequeteUtilisateur.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.filters;

import fr.eseo.atribus.beans.Mail;
import fr.eseo.atribus.beans.MessagesParDefaut;
import fr.eseo.atribus.dao.AdminSystDao;
import fr.eseo.atribus.entities.AdminSyst;
import fr.eseo.atribus.entities.Utilisateur;

import org.springframework.beans.factory.BeanCreationException;
import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.mail.MessagingException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 * Servlet Filre controlant le nombre maximal de requête en simultané par utilisateur.
 */
<span class="nc" id="L34">public class FiltreLimiteurRequeteUtilisateur extends FiltreLimiteurInit implements Filter {</span>
  private static final int LIMITE = 20;
  private int actuel;
  private ApplicationContext springContext;
<span class="nc" id="L38">  private final Object verrou = new Object();</span>

  @Autowired
  private Mail mail;
  @Autowired
  private MessagesParDefaut messages;

<span class="nc" id="L45">  private static final Logger LOGGER =</span>
<span class="nc" id="L46">      Logger.getLogger(FiltreLimiteurRequeteUtilisateur.class.getName());</span>

  @Override
  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
      throws IOException, ServletException {

<span class="nc" id="L52">    final HttpServletRequest requete = (HttpServletRequest) request;</span>
<span class="nc" id="L53">    final HttpServletResponse reponse = (HttpServletResponse) response;</span>

    /* Récupération de la session depuis la requête */
<span class="nc" id="L56">    final HttpSession session = requete.getSession();</span>
<span class="nc" id="L57">    final Utilisateur utilisateur = (Utilisateur) session.getAttribute(&quot;utilisateur&quot;);</span>

    // On récupére l'adresse IP de l'utilisateur
<span class="nc" id="L60">    String adresseIp = ((HttpServletRequest) request).getHeader(&quot;X-FORWARDED-FOR&quot;);</span>
<span class="nc bnc" id="L61" title="All 2 branches missed.">    if (adresseIp == null) {</span>
<span class="nc" id="L62">      adresseIp = request.getRemoteAddr();</span>
    }

    try {
      boolean ok;
      // Lors qu'on commence une requête, on augmente le nombre de requête en cours pour
      // l'utilisateur
<span class="nc" id="L69">      synchronized (this.verrou) {</span>
<span class="nc bnc" id="L70" title="All 2 branches missed.">        ok = this.actuel++ &lt; LIMITE;</span>
<span class="nc" id="L71">      }</span>
<span class="nc bnc" id="L72" title="All 2 branches missed.">      if (ok) {</span>
<span class="nc" id="L73">        chain.doFilter(request, response);</span>
      } else {
        // On vire l'utilisateur !
        // Ecriture des logs
<span class="nc" id="L77">        this.ecrireLog(utilisateur, adresseIp);</span>
<span class="nc" id="L78">        session.invalidate();</span>
<span class="nc" id="L79">        reponse.sendError(429, &quot;Trop de requête sur notre serveur ! Votre session est expirée !&quot;);</span>
      }
    } finally {
      // Lors qu'on a fini la requête, on réduit le nombre de requête en cours pour l'utilisateur
<span class="nc" id="L83">      synchronized (this.verrou) {</span>
<span class="nc" id="L84">        this.actuel--;</span>
<span class="nc" id="L85">      }</span>
<span class="nc" id="L86">    }</span>
<span class="nc" id="L87">  }</span>

  private void ecrireLog(Utilisateur utilisateur, String adresseIp) {
<span class="nc" id="L90">    try (ClassPathXmlApplicationContext context =</span>
        new ClassPathXmlApplicationContext(&quot;classpath:dispatcher-servlet.xml&quot;)) {
<span class="nc" id="L92">      this.springContext = context;</span>
<span class="nc" id="L93">      this.mail = (Mail) this.springContext.getBean(&quot;mail&quot;);</span>
<span class="nc" id="L94">      this.messages = (MessagesParDefaut) this.springContext.getBean(&quot;messagesParDefaut&quot;);</span>
<span class="nc" id="L95">      new Thread(() -&gt; this.prevenirLesAdministrateursSurchargeUtilisateur()).start();</span>
<span class="nc bnc" id="L96" title="All 8 branches missed.">    } catch (final BeanCreationException bce) {</span>
<span class="nc" id="L97">      FiltreLimiteurRequeteUtilisateur.LOGGER.log(Level.SEVERE, &quot;Exception&quot;, bce);</span>
<span class="nc" id="L98">    }</span>
<span class="nc bnc" id="L99" title="All 2 branches missed.">    if (utilisateur != null) {</span>
<span class="nc" id="L100">      FiltreLimiteurRequeteUtilisateur.LOGGER.setLevel(Level.SEVERE);</span>
<span class="nc" id="L101">      FiltreLimiteurRequeteUtilisateur.LOGGER.severe(&quot;L'utilisateur : &quot; + utilisateur</span>
          + &quot;, à l'adresse IP : &quot; + adresseIp + &quot; a soumis plus de 5 requêtes en simultané !&quot;);
    } else {
<span class="nc" id="L104">      FiltreLimiteurRequeteUtilisateur.LOGGER.setLevel(Level.SEVERE);</span>
<span class="nc" id="L105">      FiltreLimiteurRequeteUtilisateur.LOGGER</span>
<span class="nc" id="L106">          .severe(&quot;L'utilisateur non identifié, à l'adresse IP : &quot; + adresseIp</span>
              + &quot; a soumis plus de 20 requêtes en simultané !&quot;);
    }
<span class="nc" id="L109">  }</span>

  private void prevenirLesAdministrateursSurchargeUtilisateur() {
    final BeanFactoryReference bf =
<span class="nc" id="L113">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
<span class="nc" id="L114">    final List&lt;AdminSyst&gt; adminSyst =</span>
<span class="nc" id="L115">        ((AdminSystDao) bf.getFactory().getBean(&quot;adminSystDao&quot;)).recupererListe();</span>
<span class="nc bnc" id="L116" title="All 2 branches missed.">    for (final AdminSyst admin : adminSyst) {</span>
      try {
<span class="nc" id="L118">        this.mail.mailAutomatiqueSsl(admin.getEmail(), &quot;Avertissement !&quot;,</span>
<span class="nc" id="L119">            this.messages.getAdminSystProblemeDeux());</span>
<span class="nc" id="L120">      } catch (final MessagingException me) {</span>
<span class="nc" id="L121">        LOGGER.log(Level.INFO, &quot;Exception&quot;, me);</span>
<span class="nc" id="L122">      }</span>
<span class="nc" id="L123">    }</span>
<span class="nc" id="L124">  }</span>

}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>