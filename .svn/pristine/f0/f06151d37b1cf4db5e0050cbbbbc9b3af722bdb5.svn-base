<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>RepondreAutoEvaluationForm.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.forms</a> &gt; <span class="el_source">RepondreAutoEvaluationForm.java</span></div><h1>RepondreAutoEvaluationForm.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.forms;

import fr.eseo.atribus.dao.DaoException;
import fr.eseo.atribus.entities.Eleve;
import fr.eseo.atribus.entities.Examen;
import fr.eseo.atribus.entities.Exercice;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.regex.Pattern;

public class RepondreAutoEvaluationForm extends ExamenForm {

  public RepondreAutoEvaluationForm() {
<span class="nc" id="L19">    super();</span>
<span class="nc" id="L20">  }</span>

  public int repondre(Eleve eleve, List&lt;String&gt; reponses, String examenString,
      Boolean autoEvaluation) {
<span class="nc" id="L24">    final Examen examen = this.examenDao.trouverParNom(examenString);</span>
    try {
<span class="nc" id="L26">      Map&lt;Exercice, List&lt;String&gt;&gt; reponsesParser = new HashMap&lt;&gt;();</span>
<span class="nc bnc" id="L27" title="All 4 branches missed.">      if (examen == null || !examen.getAutoEvaluation()) {</span>
<span class="nc" id="L28">        this.erreurs.put(&quot;mauvaisAutoEval&quot;, &quot;Auto evaluation invalide&quot;);</span>
      } else {
<span class="nc bnc" id="L30" title="All 2 branches missed.">        for (Exercice exercice : examen.getExercices()) {</span>
<span class="nc" id="L31">          reponsesParser.put(exercice, new ArrayList&lt;&gt;());</span>
<span class="nc" id="L32">        }</span>
<span class="nc" id="L33">        this.traiterDonnees(eleve, reponses, examen, reponsesParser);</span>
      }
<span class="nc bnc" id="L35" title="All 2 branches missed.">      if (this.erreurs.isEmpty()) {</span>
<span class="nc" id="L36">        this.evaluationDao.repondre(eleve, reponsesParser, examen, autoEvaluation);</span>
<span class="nc" id="L37">        this.resultat = &quot;Succès de l'ajout des réponses l'auto evaluation.&quot;;</span>
<span class="nc" id="L38">        return 1;</span>
      } else {
<span class="nc" id="L40">        this.resultat = &quot;Échec de l'ajout des réponses l'auto evaluation.&quot;;</span>
      }
<span class="nc" id="L42">    } catch (final DaoException ebdd) {</span>
<span class="nc" id="L43">      this.resultat =</span>
          &quot;Échec de l'ajout des réponses de l'auto evaluation : une erreur imprévue est survenue,&quot;
              + &quot; merci de réessayer dans quelques instants.&quot;;
<span class="nc" id="L46">      RepondreAutoEvaluationForm.LOGGER.log(Level.INFO, EXCEPTION, ebdd);</span>
<span class="nc" id="L47">    }</span>
<span class="nc" id="L48">    return -1;</span>
  }

  private void traiterDonnees(Eleve eleve, List&lt;String&gt; reponses, Examen examen,
      Map&lt;Exercice, List&lt;String&gt;&gt; reponsesParser) {
<span class="nc bnc" id="L53" title="All 2 branches missed.">    if (reponses != null) {</span>
<span class="nc" id="L54">      traiterReponses(reponses, examen, reponsesParser);</span>
    }
    try {
<span class="nc" id="L57">      this.validationEleve(eleve);</span>
<span class="nc" id="L58">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L59">      RepondreAutoEvaluationForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L60">      this.setErreur(&quot;eleve&quot;, fve.getMessage());</span>
<span class="nc" id="L61">    }</span>
<span class="nc" id="L62">  }</span>

  private void traiterReponses(List&lt;String&gt; reponses, Examen examen,
      Map&lt;Exercice, List&lt;String&gt;&gt; reponsesParser) {
<span class="nc bnc" id="L66" title="All 2 branches missed.">    for (String string : reponses) {</span>
<span class="nc" id="L67">      List&lt;String&gt; parsing = new ArrayList&lt;&gt;(Arrays.asList(string.split(Pattern.quote(&quot;/////&quot;))));</span>
<span class="nc bnc" id="L68" title="All 2 branches missed.">      for (Exercice exercice : examen.getExercices()) {</span>
<span class="nc bnc" id="L69" title="All 2 branches missed.">        if (exercice.getQuestion().equals(parsing.get(0))) {</span>
<span class="nc" id="L70">          reponsesParser.get(exercice).add(parsing.get(1));</span>
        }
<span class="nc" id="L72">      }</span>
<span class="nc" id="L73">    }</span>
<span class="nc" id="L74">  }</span>

}

</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>