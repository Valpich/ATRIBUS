<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>UtilisateurDaoImpl.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.dao</a> &gt; <span class="el_source">UtilisateurDaoImpl.java</span></div><h1>UtilisateurDaoImpl.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.dao;

import fr.eseo.atribus.entities.Utilisateur;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class UtilisateurDaoImpl implements UtilisateurDao {
<span class="nc" id="L18">  private static final Logger LOGGER = Logger.getLogger(UtilisateurDaoImpl.class.getName());</span>
  private static final String EXCEPTION = &quot;Exception&quot;;

  private final DaoFactory daoFactory;
  private static final String SQL_INSERT =
      &quot;INSERT INTO utilisateur (login, password, nom, prenom, email, date_inscription) &quot;
          + &quot;VALUES (?, ?, ?, ?, ?, NOW())&quot;;
  private static final String SQL_SELECT_PAR_LOGIN = &quot;SELECT * FROM utilisateur WHERE login = ?&quot;;
  private static final String SQL_SELECT_PAR_LOGIN_MDP =
      &quot;SELECT * FROM utilisateur WHERE login = ? AND password = ?&quot;;
  private static final String SQL_SELECT_PAR_NOM_PRENOM =
      &quot;SELECT * FROM utilisateur WHERE nom = ? AND prenom = ?&quot;;
  private static final String SQL_DELETE_PAR_LOGIN = &quot;DELETE FROM utilisateur WHERE login = ?&quot;;
  private static final String SQL_SELECT_ALL = &quot;SELECT * FROM utilisateur&quot;;
  private static final String SQL_SELECT_ID = &quot;SELECT * FROM utilisateur WHERE id = ?&quot;;
  private static final String SQL_UPDATE_PROFIL =
      &quot;UPDATE utilisateur SET notification_active = ?, notification_mail = ?, &quot;
          + &quot;frequence_notification_mail = ? WHERE id = ?&quot;;

  private static final String SQL_UPDATE_LOGIN_MDP_AUTRES =
      &quot;UPDATE utilisateur SET login = ?, password = ?, &quot;
          + &quot;nom = ?, prenom = ?, email = ? WHERE login = ?&quot;;

  private static final String SQL_UPDATE_LOGIN_AUTRES =
      &quot;UPDATE utilisateur SET login = ?, nom = ?, prenom = ?, email = ? WHERE login = ?&quot;;

  private static final String SQL_UPDATE_MDP_AUTRES =
      &quot;UPDATE utilisateur SET password = ?, nom = ?, prenom = ?, email = ? WHERE login = ?&quot;;

  private static final String SQL_UPDATE_AUTRES =
      &quot;UPDATE utilisateur SET nom = ?, prenom = ?, email = ? WHERE login = ?&quot;;



<span class="nc" id="L52">  UtilisateurDaoImpl() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L54">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;contextDao&quot;);</span>
<span class="nc" id="L55">    this.daoFactory = (DaoFactory) bf.getFactory().getBean(&quot;daoFactory&quot;);</span>
<span class="nc" id="L56">  }</span>

  @Override
  public List&lt;Utilisateur&gt; recupererListe() {
<span class="nc" id="L60">    final List&lt;Utilisateur&gt; listeUtilisateur = new ArrayList&lt;&gt;();</span>
<span class="nc" id="L61">    Connection connexion = null;</span>
<span class="nc" id="L62">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L63">    ResultSet resultSet = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L67">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L68">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
          UtilisateurDaoImpl.SQL_SELECT_ALL, false);
<span class="nc" id="L70">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L72" title="All 2 branches missed.">      while (resultSet.next()) {</span>
<span class="nc" id="L73">        listeUtilisateur.add(UtilisateurDaoImpl.map(resultSet));</span>
      }
<span class="nc" id="L75">    } catch (final SQLException e) {</span>
<span class="nc" id="L76">      throw new DaoException(e);</span>
    } finally {
<span class="nc" id="L78">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L79">    }</span>

<span class="nc" id="L81">    return listeUtilisateur;</span>
  }


  @Override
  public int trouverIdParLogin(String login) {
<span class="nc" id="L87">    return DaoUtilitaire.trouverId(this.daoFactory, UtilisateurDaoImpl.SQL_SELECT_PAR_LOGIN, login);</span>
  }

  /* Implémentation de la méthode trouverParLogin() définie dans l'interface UtilisateurBdd */
  @Override
  public Utilisateur trouverParLogin(String login) {
<span class="nc" id="L93">    return this.trouver(UtilisateurDaoImpl.SQL_SELECT_PAR_LOGIN, login);</span>
  }

  /* Implémentation de la méthode trouverParId() définie dans l'interface UtilisateurBdd */
  @Override
  public Utilisateur trouverParId(int id) {
<span class="nc" id="L99">    return this.trouver(UtilisateurDaoImpl.SQL_SELECT_ID, id);</span>
  }

  /*
   * Implémentation de la méthode trouverParLoginPassword() définie dans l'interface UtilisateurBdd
   */
  @Override
  public Utilisateur trouverParLoginPassword(String login, String password) {
<span class="nc" id="L107">    return this.trouver(UtilisateurDaoImpl.SQL_SELECT_PAR_LOGIN_MDP, login, password);</span>
  }

  /*
   * Implémentation de la méthode trouverParNomPrenom() définie dans l'interface UtilisateurBdd
   */
  @Override
  public Utilisateur trouverParNomPrenom(String nom, String prenom) {
<span class="nc" id="L115">    return this.trouver(UtilisateurDaoImpl.SQL_SELECT_PAR_NOM_PRENOM, nom, prenom);</span>
  }

  /**
   * Méthode pour supprimer un utilisateur par son email en BDD.
   */
  @Override
  public int supprimerParLogin(String login) {

    int statut;
<span class="nc" id="L125">    Connection connexion = null;</span>
<span class="nc" id="L126">    PreparedStatement preparedStatement = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L130">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L131">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
          UtilisateurDaoImpl.SQL_DELETE_PAR_LOGIN, false, login);

<span class="nc" id="L134">      statut = preparedStatement.executeUpdate();</span>
      /* Analyse du statut retourné par la requête d'insertion */
<span class="nc bnc" id="L136" title="All 2 branches missed.">      if (statut == 0) {</span>
<span class="nc" id="L137">        throw new DaoException(&quot;Échec de la suppression de l'utilisateur, aucune &quot;</span>
            + &quot;ligne n'a été supprimée dans la table.&quot;);
      }
<span class="nc" id="L140">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L141">      UtilisateurDaoImpl.LOGGER.log(Level.INFO, UtilisateurDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L142">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L144">      DaoUtilitaire.fermeturesSilencieuses(preparedStatement, connexion);</span>
<span class="nc" id="L145">    }</span>

<span class="nc" id="L147">    return statut;</span>
  }

  /*
   * Implémentation de la méthode définie dans l'interface UtilisateurBdd Retourne l'utilisateur qui
   * a été ajouté (pour récupérer l'ID)
   */
  @Override
  public Utilisateur ajouter(Utilisateur utilisateur) {
<span class="nc" id="L156">    Connection connexion = null;</span>
<span class="nc" id="L157">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L158">    final ResultSet valeursAutoGenerees = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L162">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L163">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L164">          UtilisateurDaoImpl.SQL_INSERT, true, utilisateur.getLogin(), utilisateur.getPassword(),</span>
<span class="nc" id="L165">          utilisateur.getNom(), utilisateur.getPrenom(), utilisateur.getEmail());</span>

<span class="nc" id="L167">      final int statut = preparedStatement.executeUpdate();</span>
      /* Analyse du statut retourné par la requête d'insertion */
<span class="nc bnc" id="L169" title="All 2 branches missed.">      if (statut == 0) {</span>
<span class="nc" id="L170">        throw new DaoException(</span>
            &quot;Échec de la création de l'utilisateur, aucune ligne ajoutée dans la table.&quot;);
      }
<span class="nc" id="L173">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L174">      UtilisateurDaoImpl.LOGGER.log(Level.INFO, UtilisateurDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L175">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L177">      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);</span>
<span class="nc" id="L178">    }</span>
<span class="nc" id="L179">    return utilisateur;</span>
  }

  @Override
  public void update(Utilisateur utilisateur) {
<span class="nc" id="L184">    Connection connexion = null;</span>
<span class="nc" id="L185">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L186">    final ResultSet valeursAutoGenerees = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L190">      connexion = this.daoFactory.getConnection();</span>

<span class="nc" id="L192">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L193">          UtilisateurDaoImpl.SQL_UPDATE_PROFIL, true, utilisateur.isNotificationActive(),</span>
<span class="nc" id="L194">          utilisateur.isNotificationMail(), utilisateur.getFrequenceNotificationMail(),</span>
<span class="nc" id="L195">          utilisateur.getId());</span>

<span class="nc" id="L197">      final int statut = preparedStatement.executeUpdate();</span>
      /* Analyse du statut retourné par la requête d'insertion */
<span class="nc bnc" id="L199" title="All 2 branches missed.">      if (statut == 0) {</span>
<span class="nc" id="L200">        throw new DaoException(</span>
            &quot;Échec de la modification de l'utilisateur, aucune ligne modifiée dans la table.&quot;);
      }
<span class="nc" id="L203">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L204">      UtilisateurDaoImpl.LOGGER.log(Level.INFO, UtilisateurDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L205">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L207">      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);</span>
<span class="nc" id="L208">    }</span>
<span class="nc" id="L209">  }</span>

  @Override
  public Utilisateur modifier(String loginPrecedent, Utilisateur utilisateur) {
<span class="nc" id="L213">    Connection connexion = null;</span>
<span class="nc" id="L214">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L215">    final ResultSet valeursAutoGenerees = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L219">      connexion = this.daoFactory.getConnection();</span>

<span class="nc" id="L221">      preparedStatement = this.choixSqlModifier(loginPrecedent, utilisateur, connexion);</span>

<span class="nc" id="L223">      final int statut = preparedStatement.executeUpdate();</span>
      /* Analyse du statut retourné par la requête d'insertion */
<span class="nc bnc" id="L225" title="All 2 branches missed.">      if (statut == 0) {</span>
<span class="nc" id="L226">        throw new DaoException(</span>
            &quot;Échec de la modification de l'utilisateur, aucune ligne modifiée dans la table.&quot;);
      }
<span class="nc" id="L229">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L230">      UtilisateurDaoImpl.LOGGER.log(Level.INFO, UtilisateurDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L231">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L233">      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);</span>
<span class="nc" id="L234">    }</span>
<span class="nc" id="L235">    return utilisateur;</span>
  }

  private PreparedStatement choixSqlModifier(String loginPrecedent, Utilisateur utilisateur,
      Connection connexion) throws SQLException {
    PreparedStatement preparedStatement;
<span class="nc bnc" id="L241" title="All 4 branches missed.">    if (utilisateur.getLogin() != null &amp;&amp; utilisateur.getPassword() != null) {</span>
<span class="nc" id="L242">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L243">          UtilisateurDaoImpl.SQL_UPDATE_LOGIN_MDP_AUTRES, true, utilisateur.getLogin(),</span>
<span class="nc" id="L244">          utilisateur.getPassword(), utilisateur.getNom(), utilisateur.getPrenom(),</span>
<span class="nc" id="L245">          utilisateur.getEmail(), loginPrecedent);</span>
<span class="nc bnc" id="L246" title="All 4 branches missed.">    } else if (utilisateur.getLogin() != null &amp;&amp; utilisateur.getPassword() == null) {</span>
<span class="nc" id="L247">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L248">          UtilisateurDaoImpl.SQL_UPDATE_LOGIN_AUTRES, true, utilisateur.getLogin(),</span>
<span class="nc" id="L249">          utilisateur.getNom(), utilisateur.getPrenom(), utilisateur.getEmail(), loginPrecedent);</span>
<span class="nc bnc" id="L250" title="All 4 branches missed.">    } else if (utilisateur.getLogin() == null &amp;&amp; utilisateur.getPassword() != null) {</span>
<span class="nc" id="L251">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L252">          UtilisateurDaoImpl.SQL_UPDATE_MDP_AUTRES, true, utilisateur.getPassword(),</span>
<span class="nc" id="L253">          utilisateur.getNom(), utilisateur.getPrenom(), utilisateur.getEmail(), loginPrecedent);</span>
    } else {
<span class="nc" id="L255">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L256">          UtilisateurDaoImpl.SQL_UPDATE_AUTRES, true, utilisateur.getNom(), utilisateur.getPrenom(),</span>
<span class="nc" id="L257">          utilisateur.getEmail(), loginPrecedent);</span>
    }
<span class="nc" id="L259">    return preparedStatement;</span>
  }

  /*
   * Méthode générique utilisée pour retourner un utilisateur depuis la base de données,
   * correspondant à la requête SQL donnée prenant en paramètres les objets passés en argument.
   */
  private Utilisateur trouver(String sql, Object... objets) {
<span class="nc" id="L267">    Connection connexion = null;</span>
<span class="nc" id="L268">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L269">    ResultSet resultSet = null;</span>
<span class="nc" id="L270">    Utilisateur utilisateur = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L274">      connexion = this.daoFactory.getConnection();</span>
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
<span class="nc" id="L279">      preparedStatement =</span>
<span class="nc" id="L280">          DaoUtilitaire.initialisationRequetePreparee(connexion, sql, false, objets);</span>
<span class="nc" id="L281">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L283" title="All 2 branches missed.">      if (resultSet.next()) {</span>
<span class="nc" id="L284">        utilisateur = UtilisateurDaoImpl.map(resultSet);</span>
      }
<span class="nc" id="L286">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L287">      UtilisateurDaoImpl.LOGGER.log(Level.INFO, UtilisateurDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L288">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L290">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L291">    }</span>
<span class="nc" id="L292">    return utilisateur;</span>
  }

  /*
   * Simple méthode utilitaire permettant de faire la correspondance (le mapping) entre une ligne
   * issue de la table des utilisateurs (un ResultSet) et un bean Utilisateur.
   */
  private static Utilisateur map(ResultSet resultSet) throws SQLException {
<span class="nc" id="L300">    final Utilisateur utilisateur = new Utilisateur();</span>
<span class="nc" id="L301">    utilisateur.setId(resultSet.getInt(&quot;id&quot;));</span>
<span class="nc" id="L302">    utilisateur.setLogin(resultSet.getString(&quot;login&quot;));</span>
<span class="nc" id="L303">    utilisateur.setPassword(resultSet.getString(&quot;password&quot;));</span>
<span class="nc" id="L304">    utilisateur.setNom(resultSet.getString(&quot;nom&quot;));</span>
<span class="nc" id="L305">    utilisateur.setPrenom(resultSet.getString(&quot;prenom&quot;));</span>
<span class="nc" id="L306">    utilisateur.setEmail(resultSet.getString(&quot;email&quot;));</span>
<span class="nc" id="L307">    utilisateur.setDateInscription(resultSet.getTimestamp(&quot;date_inscription&quot;));</span>
<span class="nc" id="L308">    utilisateur.setNotificationActive(resultSet.getBoolean(&quot;notification_active&quot;));</span>
<span class="nc" id="L309">    utilisateur.setNotificationMail(resultSet.getBoolean(&quot;notification_mail&quot;));</span>
<span class="nc" id="L310">    utilisateur.setFrequenceNotificationMail(resultSet.getInt(&quot;frequence_notification_mail&quot;));</span>
    final BeanFactoryReference bf =
<span class="nc" id="L312">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
<span class="nc" id="L313">    final NotificationDao notificationDao =</span>
<span class="nc" id="L314">        (NotificationDao) bf.getFactory().getBean(&quot;notificationDao&quot;);</span>
<span class="nc" id="L315">    utilisateur.setNotifications(notificationDao.trouverToutesLesNotification(utilisateur));</span>
<span class="nc" id="L316">    return utilisateur;</span>
  }

}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>