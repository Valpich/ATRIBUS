<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>EnseignantRefUeDaoImpl.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.dao</a> &gt; <span class="el_source">EnseignantRefUeDaoImpl.java</span></div><h1>EnseignantRefUeDaoImpl.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.dao;

import fr.eseo.atribus.entities.EnseignantRefUe;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class EnseignantRefUeDaoImpl implements EnseignantRefUeDao {
  
<span class="nc" id="L19">  private static final Logger LOGGER = Logger.getLogger(EnseignantRefUeDaoImpl.class.getName());</span>
  private final DaoFactory daoFactory;
  private static final String EXCEPTION = &quot;exception&quot;;

  private static final String SQL_SELECT_PAR_LOGIN_HASH =
      &quot;SELECT enseignant_ref_ue.id AS id_enseignant_ref_ue, enseignant.id &quot;
          + &quot;AS id_enseignant, utilisateur.* &quot;
          + &quot;FROM enseignant_ref_ue &quot;
          + &quot;LEFT JOIN enseignant ON enseignant.id = enseignant_ref_ue.id_enseignant &quot;
          + &quot;LEFT JOIN utilisateur ON utilisateur.id = enseignant.id_utilisateur &quot;
          + &quot;WHERE utilisateur.login = ? &quot; + &quot;AND utilisateur.password = ?&quot;;

  private static final String SQL_INSERT =
      &quot;INSERT INTO enseignant_ref_ue (id_enseignant) VALUES (?)&quot;;

  private static final String SQL_SELECT_ALL =
      &quot;SELECT enseignant_ref_ue.id AS id_enseignant_ref_ue, enseignant.id &quot;
          + &quot;AS id_enseignant, utilisateur.*&quot;
          + &quot; FROM enseignant_ref_ue&quot;
          + &quot; LEFT JOIN enseignant ON enseignant.id = enseignant_ref_ue.id_enseignant&quot;
          + &quot; LEFT JOIN utilisateur ON utilisateur.id = enseignant.id_utilisateur&quot;;

  private static final String DELETE_ENSEIGNANT_REF_UE =
      &quot;DELETE FROM enseignant_ref_ue WHERE id = ?&quot;; 

<span class="nc" id="L44">  EnseignantRefUeDaoImpl() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L46">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;contextDao&quot;);</span>
<span class="nc" id="L47">    this.daoFactory = (DaoFactory) bf.getFactory().getBean(&quot;daoFactory&quot;);</span>
<span class="nc" id="L48">  }</span>

  @Override
  public List&lt;EnseignantRefUe&gt; recupererListe() {
<span class="nc" id="L52">    final List&lt;EnseignantRefUe&gt; listeEnseignantRefUe = new ArrayList&lt;&gt;();</span>
<span class="nc" id="L53">    Connection connexion = null;</span>
<span class="nc" id="L54">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L55">    ResultSet resultSet = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L59">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L60">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
          EnseignantRefUeDaoImpl.SQL_SELECT_ALL, false);
<span class="nc" id="L62">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L64" title="All 2 branches missed.">      while (resultSet.next()) {</span>
<span class="nc" id="L65">        listeEnseignantRefUe.add(EnseignantRefUeDaoImpl.map(resultSet));</span>
      }
<span class="nc" id="L67">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L68">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L70">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L71">    }</span>

<span class="nc" id="L73">    return listeEnseignantRefUe;</span>
  }

  /* Implémentation de la méthode trouverParLogin() définie dans l'interface UtilisateurBdd */
  @Override
  public EnseignantRefUe trouverParLoginHash(String login, String hash) {
<span class="nc" id="L79">    return this.trouver(EnseignantRefUeDaoImpl.SQL_SELECT_PAR_LOGIN_HASH, login, hash);</span>
  }

  @Override
  public EnseignantRefUe ajouter(EnseignantRefUe enseignantRefUe) {
<span class="nc" id="L84">    Connection connexion = null;</span>
<span class="nc" id="L85">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L86">    final ResultSet valeursAutoGenerees = null;</span>

    try {
      final BeanFactoryReference bf =
<span class="nc" id="L90">          SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
<span class="nc" id="L91">      final int idEnseignant = ((EnseignantDao) bf.getFactory().getBean(&quot;enseignantDao&quot;))</span>
<span class="nc" id="L92">          .trouverIdParLogin(enseignantRefUe.getLogin());</span>
<span class="nc" id="L93">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L94">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
<span class="nc" id="L95">          EnseignantRefUeDaoImpl.SQL_INSERT, true, idEnseignant);</span>
<span class="nc" id="L96">      final int statut = preparedStatement.executeUpdate();</span>
      /* Analyse du statut retourné par la requête d'insertion */
<span class="nc bnc" id="L98" title="All 2 branches missed.">      if (statut == 0) {</span>
<span class="nc" id="L99">        throw new DaoException(</span>
            &quot;Échec de la création de l'enseignantRefUe, aucune ligne ajoutée dans la table.&quot;);
      }
<span class="nc" id="L102">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L103">      EnseignantRefUeDaoImpl.LOGGER.log(Level.INFO, &quot;Exception&quot;, sqle);</span>
<span class="nc" id="L104">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L106">      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);</span>
<span class="nc" id="L107">    }</span>

<span class="nc" id="L109">    return enseignantRefUe;</span>
  }


  /*
   * Méthode générique utilisée pour retourner un adminsys depuis la base de données, correspondant
   * à la requête SQL donnée prenant en paramètres les objets passés en argument.
   */
  private EnseignantRefUe trouver(String sql, Object... objets) {
<span class="nc" id="L118">    Connection connexion = null;</span>
<span class="nc" id="L119">    PreparedStatement preparedStatement = null;</span>
<span class="nc" id="L120">    ResultSet resultSet = null;</span>
<span class="nc" id="L121">    EnseignantRefUe enseignantRefUe = null;</span>

    try {
      /* Récupération d'une connexion depuis la Factory */
<span class="nc" id="L125">      connexion = this.daoFactory.getConnection();</span>
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
<span class="nc" id="L130">      preparedStatement =</span>
<span class="nc" id="L131">          DaoUtilitaire.initialisationRequetePreparee(connexion, sql, false, objets);</span>
<span class="nc" id="L132">      resultSet = preparedStatement.executeQuery();</span>
      /* Parcours de la ligne de données retournée dans le ResultSet */
<span class="nc bnc" id="L134" title="All 2 branches missed.">      if (resultSet.next()) {</span>
<span class="nc" id="L135">        enseignantRefUe = EnseignantRefUeDaoImpl.map(resultSet);</span>
      }
<span class="nc" id="L137">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L138">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L140">      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);</span>
<span class="nc" id="L141">    }</span>
<span class="nc" id="L142">    return enseignantRefUe;</span>
  }
  
  /**
   * Suppression d'un enseignant référant à un UE par son ID.
   */
  public void supprimerEnseignantRefUeParId(EnseignantRefUe enseignantRefUe) {
    
<span class="nc" id="L150">    Connection connexion = null;</span>
<span class="nc" id="L151">    PreparedStatement preparedStatement = null;</span>

    try {
<span class="nc" id="L154">      connexion = this.daoFactory.getConnection();</span>
<span class="nc" id="L155">      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,</span>
          EnseignantRefUeDaoImpl.DELETE_ENSEIGNANT_REF_UE, false,
<span class="nc" id="L157">          enseignantRefUe.getIdEnseignantRefUe());</span>

<span class="nc" id="L159">      preparedStatement.executeUpdate();</span>

<span class="nc" id="L161">    } catch (final SQLException sqle) {</span>
<span class="nc" id="L162">      EnseignantRefUeDaoImpl.LOGGER.log(Level.INFO, EnseignantRefUeDaoImpl.EXCEPTION, sqle);</span>
<span class="nc" id="L163">      throw new DaoException(sqle);</span>
    } finally {
<span class="nc" id="L165">      DaoUtilitaire.fermeturesSilencieuses(preparedStatement, connexion);</span>
<span class="nc" id="L166">    }</span>
    
<span class="nc" id="L168">  }</span>

  /*
   * Simple méthode utilitaire permettant de faire la correspondance (le mapping) entre une ligne
   * issue de la table des adminsyss (un ResultSet) et un bean Utilisateur.
   */
  private static EnseignantRefUe map(ResultSet resultSet) throws SQLException {
<span class="nc" id="L175">    final EnseignantRefUe enseignantRefUe = new EnseignantRefUe();</span>
<span class="nc" id="L176">    enseignantRefUe.setId(resultSet.getInt(&quot;id&quot;));</span>
<span class="nc" id="L177">    enseignantRefUe.setIdEnseignant(resultSet.getInt(&quot;id_enseignant&quot;));</span>
<span class="nc" id="L178">    enseignantRefUe.setIdEnseignantRefUe(resultSet.getInt(&quot;id_enseignant_ref_ue&quot;));</span>
<span class="nc" id="L179">    enseignantRefUe.setLogin(resultSet.getString(&quot;login&quot;));</span>
<span class="nc" id="L180">    enseignantRefUe.setPassword(resultSet.getString(&quot;password&quot;));</span>
<span class="nc" id="L181">    enseignantRefUe.setNom(resultSet.getString(&quot;nom&quot;));</span>
<span class="nc" id="L182">    enseignantRefUe.setPrenom(resultSet.getString(&quot;prenom&quot;));</span>
<span class="nc" id="L183">    enseignantRefUe.setEmail(resultSet.getString(&quot;email&quot;));</span>
<span class="nc" id="L184">    enseignantRefUe.setDateInscription(resultSet.getTimestamp(&quot;date_inscription&quot;));</span>
<span class="nc" id="L185">    enseignantRefUe.setNotificationActive(resultSet.getBoolean(&quot;notification_active&quot;));</span>
<span class="nc" id="L186">    enseignantRefUe.setNotificationMail(resultSet.getBoolean(&quot;notification_mail&quot;));</span>
<span class="nc" id="L187">    enseignantRefUe.setFrequenceNotificationMail(resultSet.getInt(&quot;frequence_notification_mail&quot;));</span>
<span class="nc" id="L188">    return enseignantRefUe;</span>
  }
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>