<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>MailForm.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.forms</a> &gt; <span class="el_source">MailForm.java</span></div><h1>MailForm.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.forms;

import fr.eseo.atribus.beans.Mail;
import fr.eseo.atribus.beans.MessagesParDefaut;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.mail.MessagingException;

public class MailForm {
  protected static final String EXCEPTION = &quot;Exception&quot;;
  protected static final String ERROR = &quot;error&quot;;
<span class="nc" id="L16">  protected static final Logger LOGGER = Logger.getLogger(MailForm.class.getName());</span>
  protected String resultat;
<span class="nc" id="L18">  protected final Map&lt;String, String&gt; erreurs = new HashMap&lt;&gt;();</span>

  protected Mail mail;
  protected MessagesParDefaut messages;

  public MailForm() {
<span class="nc" id="L24">    super();</span>
<span class="nc" id="L25">  }</span>

  public Mail getMail() {
<span class="nc" id="L28">    return this.mail;</span>
  }

  public void setMail(Mail mail) {
<span class="nc" id="L32">    this.mail = mail;</span>
<span class="nc" id="L33">  }</span>

  public MessagesParDefaut getMessages() {
<span class="nc" id="L36">    return this.messages;</span>
  }

  public void setMessages(MessagesParDefaut messages) {
<span class="nc" id="L40">    this.messages = messages;</span>
<span class="nc" id="L41">  }</span>

  public Map&lt;String, String&gt; getErreurs() {
<span class="nc" id="L44">    return this.erreurs;</span>
  }

  protected void setResultat(String resultat) {
<span class="nc" id="L48">    this.resultat = resultat;</span>
<span class="nc" id="L49">  }</span>

  public String getResultat() {
<span class="nc" id="L52">    return resultat;</span>
  }

  protected void envoyerMail(String objet, String contenu, String destinataire) {
    try {
<span class="nc bnc" id="L57" title="All 2 branches missed.">      if (this.erreurs.isEmpty()) {</span>
<span class="nc" id="L58">        this.mail.mailAutomatique(destinataire, objet, contenu);</span>
<span class="nc" id="L59">        this.resultat = &quot;success&quot;;</span>
      } else {
<span class="nc" id="L61">        this.resultat = &quot;error&quot;;</span>
      }
<span class="nc" id="L63">    } catch (final MessagingException mesesx) {</span>
<span class="nc" id="L64">      this.resultat = &quot;errorMail&quot;;</span>
<span class="nc" id="L65">      MailForm.LOGGER.log(Level.INFO, EXCEPTION, mesesx);</span>
<span class="nc" id="L66">    }</span>
<span class="nc" id="L67">  }</span>

  protected void traiterDonnees(String competence, String commentaire) {
    try {
<span class="nc" id="L71">      this.validationCommentaire(commentaire);</span>
<span class="nc" id="L72">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L73">      MailForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L74">      this.setErreur(&quot;commentaire&quot;, &quot;Aucun commentaire saisi.&quot;);</span>
<span class="nc" id="L75">    }</span>
    try {
<span class="nc" id="L77">      this.validationCompetence(competence);</span>
<span class="nc" id="L78">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L79">      MailForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L80">      this.setErreur(&quot;competence&quot;, &quot;Aucune compétence saisie.&quot;);</span>
<span class="nc" id="L81">    }</span>
<span class="nc" id="L82">  }</span>

  protected void validationCompetence(String competence) throws FormValidationException {
<span class="nc bnc" id="L85" title="All 2 branches missed.">    if (competence == null) {</span>
<span class="nc" id="L86">      throw new FormValidationException(&quot;Merci de saisir une competence.&quot;);</span>
    }
<span class="nc" id="L88">  }</span>

  protected void validationCommentaire(String commentaire) throws FormValidationException {
<span class="nc bnc" id="L91" title="All 2 branches missed.">    if (commentaire == null) {</span>
<span class="nc" id="L92">      throw new FormValidationException(&quot;Merci de saisir un commentaire.&quot;);</span>
    }
<span class="nc" id="L94">  }</span>


  /**
   * Ajoute un message correspondant au champ spécifié à la map des erreurs.
   */
  protected void setErreur(String champ, String message) {
<span class="nc" id="L101">    this.erreurs.put(champ, message);</span>
<span class="nc" id="L102">  }</span>

}
</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>