<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>ModifierRessourceForm.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.forms</a> &gt; <span class="el_source">ModifierRessourceForm.java</span></div><h1>ModifierRessourceForm.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.forms;

import fr.eseo.atribus.dao.DaoException;
import fr.eseo.atribus.dao.RessourceDao;
import fr.eseo.atribus.entities.EnseignantRefMatiere;
import fr.eseo.atribus.entities.Ressource;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

public class ModifierRessourceForm {
<span class="nc" id="L18">  private static final Logger LOGGER = Logger.getLogger(ModifierRessourceForm.class.getName());</span>
  private static final String EXCEPTION = &quot;Exception&quot;;

  private String resultat;
<span class="nc" id="L22">  private final Map&lt;String, String&gt; erreurs = new HashMap&lt;&gt;();</span>
  private final RessourceDao ressourceDao;

<span class="nc" id="L25">  public ModifierRessourceForm() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L27">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Ressource */
<span class="nc" id="L29">    this.ressourceDao = (RessourceDao) bf.getFactory().getBean(&quot;ressourceDao&quot;);</span>
<span class="nc" id="L30">  }</span>

  public String getResultat() {
<span class="nc" id="L33">    return this.resultat;</span>
  }

  public Map&lt;String, String&gt; getErreurs() {
<span class="nc" id="L37">    return this.erreurs;</span>
  }

  public void supprimerRessource(EnseignantRefMatiere erm, String choixRessource, String filePath) {
    try {
<span class="nc" id="L42">      final Ressource ressource = this.traiterDonnees(erm, choixRessource);</span>
<span class="nc bnc" id="L43" title="All 2 branches missed.">      if (this.erreurs.isEmpty()) {</span>
<span class="nc" id="L44">        this.ressourceDao.supprimer(ressource);</span>
<span class="nc" id="L45">        this.supprimerFichierPhysique(filePath, ressource);</span>
<span class="nc" id="L46">        this.resultat = &quot;Succès de la suppression de la ressource.&quot;;</span>
      } else {
<span class="nc" id="L48">        this.resultat = &quot;Échec de la suppression de la ressource.&quot;;</span>
      }
<span class="nc" id="L50">    } catch (final DaoException ebdd) {</span>
<span class="nc" id="L51">      this.resultat = &quot;Échec de la suppression de la ressource : une erreur imprévue est survenue,&quot;</span>
          + &quot; merci de réessayer dans quelques instants.&quot;;
<span class="nc" id="L53">      ModifierRessourceForm.LOGGER.log(Level.INFO, EXCEPTION, ebdd);</span>
<span class="nc" id="L54">    }</span>
<span class="nc" id="L55">  }</span>

  private void supprimerFichierPhysique(String filePath, Ressource ressource) {
    try {
<span class="nc" id="L59">      final File file = new File(filePath + ressource.getPath());</span>
<span class="nc" id="L60">      file.delete();</span>
<span class="nc" id="L61">    } catch (final Exception exc) {</span>
<span class="nc" id="L62">      this.ressourceDao.ajouter(ressource, ressource.getPath());</span>
<span class="nc" id="L63">      ModifierRessourceForm.LOGGER.log(Level.INFO, EXCEPTION, exc);</span>
<span class="nc" id="L64">    }</span>
<span class="nc" id="L65">  }</span>

  public void modifierRessource(EnseignantRefMatiere erm, String nomRessource,
      String choixRessource) {
    try {
<span class="nc" id="L70">      final Ressource ressource = this.traiterDonnees(erm, nomRessource, choixRessource);</span>
<span class="nc bnc" id="L71" title="All 2 branches missed.">      if (this.erreurs.isEmpty()) {</span>
<span class="nc" id="L72">        this.ressourceDao.modifier(ressource);</span>
<span class="nc" id="L73">        this.resultat = &quot;Succès de la mise à jour de la ressource.&quot;;</span>
      } else {
<span class="nc" id="L75">        this.resultat = &quot;Échec de la mise à jour de la ressource.&quot;;</span>
      }
<span class="nc" id="L77">    } catch (final DaoException ebdd) {</span>
<span class="nc" id="L78">      this.resultat = &quot;Échec de la mise à jour de la ressource : une erreur imprévue est survenue,&quot;</span>
          + &quot; merci de réessayer dans quelques instants.&quot;;
<span class="nc" id="L80">      ModifierRessourceForm.LOGGER.log(Level.INFO, EXCEPTION, ebdd);</span>
<span class="nc" id="L81">    }</span>
<span class="nc" id="L82">  }</span>


  private Ressource traiterDonnees(EnseignantRefMatiere erm, String choixRessource) {
    Ressource ressource;
    try {
<span class="nc" id="L88">      this.validationRessource(erm, choixRessource);</span>
<span class="nc" id="L89">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L90">      ModifierRessourceForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L91">      this.setErreur(&quot;choixRessource&quot;, fve.getMessage());</span>
<span class="nc" id="L92">    }</span>
<span class="nc" id="L93">    ressource = this.ressourceDao.trouverParNomEtType(</span>
<span class="nc" id="L94">        choixRessource.substring(0, choixRessource.indexOf('.')),</span>
<span class="nc" id="L95">        choixRessource.substring(choixRessource.indexOf('.') + 1));</span>
<span class="nc" id="L96">    return ressource;</span>
  }


  private Ressource traiterDonnees(EnseignantRefMatiere erm, String nomRessource,
      String choixRessource) {
    Ressource ressource;
    try {
<span class="nc" id="L104">      this.validationRessource(erm, choixRessource);</span>
<span class="nc" id="L105">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L106">      ModifierRessourceForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L107">      this.setErreur(&quot;choixRessource&quot;, fve.getMessage());</span>
<span class="nc" id="L108">    }</span>
<span class="nc" id="L109">    ressource = this.ressourceDao.trouverParNomEtType(</span>
<span class="nc" id="L110">        choixRessource.substring(0, choixRessource.indexOf('.')),</span>
<span class="nc" id="L111">        choixRessource.substring(choixRessource.indexOf('.') + 1));</span>
    try {
<span class="nc" id="L113">      this.validationNom(nomRessource);</span>
<span class="nc" id="L114">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L115">      ModifierRessourceForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L116">      this.setErreur(&quot;nom&quot;, fve.getMessage());</span>
<span class="nc" id="L117">    }</span>
<span class="nc" id="L118">    ressource.setNom(nomRessource);</span>
<span class="nc" id="L119">    return ressource;</span>
  }

  private void validationNom(String nom) throws FormValidationException {
<span class="nc bnc" id="L123" title="All 4 branches missed.">    if (nom == null || nom.length() &lt; 3) {</span>
<span class="nc" id="L124">      throw new FormValidationException(&quot;Le nom de la ressource doit avoir au moins 3 caractères.&quot;);</span>
    }
<span class="nc" id="L126">  }</span>

  private void validationRessource(EnseignantRefMatiere erm, String choixRessource)
      throws FormValidationException {
    Ressource ressource;
    try {
<span class="nc" id="L132">      ressource = this.ressourceDao.trouverParNomEtType(</span>
<span class="nc" id="L133">          choixRessource.substring(0, choixRessource.indexOf('.')),</span>
<span class="nc" id="L134">          choixRessource.substring(choixRessource.indexOf('.') + 1));</span>
<span class="nc" id="L135">    } catch (final Exception exc) {</span>
<span class="nc" id="L136">      ModifierRessourceForm.LOGGER.log(Level.INFO, EXCEPTION, exc);</span>
<span class="nc" id="L137">      throw new FormValidationException(&quot;Cette ressource n'existe pas&quot;);</span>
<span class="nc" id="L138">    }</span>
<span class="nc bnc" id="L139" title="All 2 branches missed.">    if (erm.getMatiere().getId() != ressource.getMatiere().getId()) {</span>
<span class="nc" id="L140">      throw new FormValidationException(</span>
          &quot;Cette ressource ne peut pas être modifiée par cet ERM, elle appartient à la matiere : &quot;
<span class="nc" id="L142">              + ressource.getMatiere().getNom());</span>
    }
<span class="nc" id="L144">  }</span>

  /*
   * Ajoute un message correspondant au champ spécifié à la map des erreurs.
   */
  private void setErreur(String champ, String message) {
<span class="nc" id="L150">    this.erreurs.put(champ, message);</span>
<span class="nc" id="L151">  }</span>

}

</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>