<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>ModifierUtilisateurForm.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.forms</a> &gt; <span class="el_source">ModifierUtilisateurForm.java</span></div><h1>ModifierUtilisateurForm.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.forms;

import fr.eseo.atribus.beans.PasswordStorage;
import fr.eseo.atribus.dao.DaoException;
import fr.eseo.atribus.dao.UtilisateurDao;
import fr.eseo.atribus.entities.AdminSyst;
import fr.eseo.atribus.entities.DirecteurEtudes;
import fr.eseo.atribus.entities.DirecteurProgrammes;
import fr.eseo.atribus.entities.Eleve;
import fr.eseo.atribus.entities.Enseignant;
import fr.eseo.atribus.entities.Utilisateur;

import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;

public class ModifierUtilisateurForm extends UtilisateurForm {
<span class="nc" id="L20">  private static final Logger LOGGER = Logger.getLogger(ModifierUtilisateurForm.class.getName());</span>

  /**
   * Traitement du formulaire de modification d'un utilisateur.
   */
  public ModifierUtilisateurForm() {
<span class="nc" id="L26">    super();</span>
<span class="nc" id="L27">  }</span>

  public String getResultat() {
<span class="nc" id="L30">    return this.resultat;</span>
  }

  public Map&lt;String, String&gt; getErreurs() {
<span class="nc" id="L34">    return this.erreurs;</span>
  }

  /**
   * Suppression d'un utilisateur.
   * 
   * @param request .
   */
  public void modifierUtilisateur(HttpServletRequest request) {
<span class="nc" id="L43">    final String loginPrecedent =</span>
<span class="nc" id="L44">        UtilisateurForm.getValeurChamp(request, UtilisateurForm.NOM_BOUTON_SUPPRIMER);</span>
<span class="nc" id="L45">    final String nouveauLogin =</span>
<span class="nc" id="L46">        UtilisateurForm.getValeurChamp(request, UtilisateurForm.CHAMP_LOGIN);</span>
<span class="nc" id="L47">    final String password = UtilisateurForm.getValeurChamp(request, UtilisateurForm.CHAMP_PASS);</span>
<span class="nc" id="L48">    final String nom = UtilisateurForm.getValeurChamp(request, UtilisateurForm.CHAMP_NOM);</span>
<span class="nc" id="L49">    final String prenom = UtilisateurForm.getValeurChamp(request, UtilisateurForm.CHAMP_PRENOM);</span>
<span class="nc" id="L50">    final String email = UtilisateurForm.getValeurChamp(request, UtilisateurForm.CHAMP_EMAIL);</span>

<span class="nc" id="L52">    final String cbAdminSyst =</span>
<span class="nc" id="L53">        ModifierUtilisateurForm.getValeurChamp(request, ModifierUtilisateurForm.CB_AS);</span>
<span class="nc" id="L54">    final String cbDirecteurEtudes =</span>
<span class="nc" id="L55">        ModifierUtilisateurForm.getValeurChamp(request, ModifierUtilisateurForm.CB_DE);</span>
<span class="nc" id="L56">    final String cbDirecteurProgrammes =</span>
<span class="nc" id="L57">        ModifierUtilisateurForm.getValeurChamp(request, ModifierUtilisateurForm.CB_DP);</span>
<span class="nc" id="L58">    final String cbEnseignant =</span>
<span class="nc" id="L59">        ModifierUtilisateurForm.getValeurChamp(request, ModifierUtilisateurForm.CB_EN);</span>
<span class="nc" id="L60">    final String cbEnseignantRefUe =</span>
<span class="nc" id="L61">        ModifierUtilisateurForm.getValeurChamp(request, ModifierUtilisateurForm.CB_EURE);</span>
<span class="nc" id="L62">    final String cbEnseignantRefMat =</span>
<span class="nc" id="L63">        ModifierUtilisateurForm.getValeurChamp(request, ModifierUtilisateurForm.CB_ERM);</span>
<span class="nc" id="L64">    final String cbEleve =</span>
<span class="nc" id="L65">        ModifierUtilisateurForm.getValeurChamp(request, ModifierUtilisateurForm.CB_EL);</span>

<span class="nc" id="L67">    String hash = null;</span>
<span class="nc" id="L68">    String login = null;</span>

    try {
<span class="nc" id="L71">      this.traiterLoginPrecedent(loginPrecedent);</span>
<span class="nc bnc" id="L72" title="All 2 branches missed.">      if (!loginPrecedent.equals(nouveauLogin)) {</span>
<span class="nc" id="L73">        this.traiterLoginNouveau(nouveauLogin);</span>
<span class="nc" id="L74">        login = nouveauLogin;</span>
      }
<span class="nc bnc" id="L76" title="All 2 branches missed.">      if (password != null) {</span>
<span class="nc" id="L77">        hash = this.traiterPassword(password);</span>
      }
<span class="nc" id="L79">      this.traiterEmail(email);</span>

<span class="nc bnc" id="L81" title="All 2 branches missed.">      if (this.erreurs.isEmpty()) {</span>
<span class="nc" id="L82">        final Utilisateur utilisateur = new Utilisateur();</span>
<span class="nc" id="L83">        utilisateur.setLogin(login);</span>
<span class="nc" id="L84">        utilisateur.setPassword(hash);</span>
<span class="nc" id="L85">        utilisateur.setNom(nom);</span>
<span class="nc" id="L86">        utilisateur.setPrenom(prenom);</span>
<span class="nc" id="L87">        utilisateur.setEmail(email);</span>

        /** Attention il faut modifier l'utilisateur avant de modifier les droits */
<span class="nc" id="L90">        this.utilisateurDao.modifier(loginPrecedent, utilisateur);</span>

        /** Ensuite on remet le login a jour **/
<span class="nc bnc" id="L93" title="All 2 branches missed.">        if (!loginPrecedent.equals(nouveauLogin)) {</span>
<span class="nc" id="L94">          utilisateur.setLogin(nouveauLogin);</span>
        } else {
<span class="nc" id="L96">          utilisateur.setLogin(loginPrecedent);</span>
        }

        /** Puis on modifie les droits */



<span class="nc" id="L103">        final AdminSyst adminSyst = new AdminSyst(utilisateur);</span>
<span class="nc bnc" id="L104" title="All 2 branches missed.">        if (cbAdminSyst != null) { </span>
<span class="nc" id="L105">          this.adminSystDao.ajouter(adminSyst);</span>
        } else {
<span class="nc" id="L107">          this.adminSystDao.supprimer(adminSyst);</span>
        }
        
<span class="nc" id="L110">        final DirecteurEtudes directeurEtudes = new DirecteurEtudes(utilisateur);</span>
<span class="nc bnc" id="L111" title="All 2 branches missed.">        if (cbDirecteurEtudes != null) { </span>
<span class="nc" id="L112">          this.directeurEtudesDao.ajouter(directeurEtudes);</span>
        } else {
<span class="nc" id="L114">          this.directeurEtudesDao.supprimer(directeurEtudes);</span>
        }
        
<span class="nc" id="L117">        final DirecteurProgrammes directeurProgrammes = new DirecteurProgrammes(utilisateur);</span>
<span class="nc bnc" id="L118" title="All 2 branches missed.">        if (cbDirecteurProgrammes != null) { </span>
<span class="nc" id="L119">          this.directeurProgrammesDao.ajouter(directeurProgrammes);</span>
        } else {
<span class="nc" id="L121">          this.directeurProgrammesDao.supprimer(directeurProgrammes);</span>
        }
        
<span class="nc" id="L124">        final Enseignant enseignant = new Enseignant(utilisateur);</span>
<span class="nc bnc" id="L125" title="All 2 branches missed.">        if (cbEnseignant != null) { </span>
<span class="nc" id="L126">          this.enseignantDao.ajouter(enseignant);</span>
        } else {
<span class="nc" id="L128">          this.enseignantDao.supprimer(enseignant);</span>
        }
        
<span class="nc" id="L131">        final Eleve eleve = new Eleve(utilisateur);</span>
<span class="nc bnc" id="L132" title="All 2 branches missed.">        if (cbEleve != null) { </span>
<span class="nc" id="L133">          this.eleveDao.ajouter(eleve);</span>
        } else {
<span class="nc" id="L135">          this.eleveDao.supprimer(eleve);</span>
        }


<span class="nc" id="L139">        this.resultat = &quot;Succès de la modification.&quot;;</span>
<span class="nc" id="L140">      } else {</span>
<span class="nc" id="L141">        this.resultat = &quot;Échec de la modification&quot;;</span>
      }
<span class="nc" id="L143">    } catch (final DaoException bdde) {</span>
<span class="nc" id="L144">      ModifierUtilisateurForm.LOGGER.log(Level.INFO, &quot;Exception&quot;, bdde);</span>
<span class="nc" id="L145">      this.resultat = &quot;Échec de la suppression : une erreur imprévue est survenue,&quot;</span>
          + &quot; merci de réessayer dans quelques instants.&quot;;
<span class="nc" id="L147">    }</span>
<span class="nc" id="L148">  }</span>


  private void traiterLoginPrecedent(String login) {
    try {
<span class="nc" id="L153">      this.validationLoginPrecedent(login);</span>
<span class="nc" id="L154">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L155">      ModifierUtilisateurForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L156">      this.setErreur(UtilisateurForm.NOM_BOUTON_SUPPRIMER, fve.getMessage());</span>
<span class="nc" id="L157">    }</span>
<span class="nc" id="L158">  }</span>

  private void traiterLoginNouveau(String login) {
    try {
<span class="nc" id="L162">      this.validationLoginNouveau(login);</span>
<span class="nc" id="L163">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L164">      ModifierUtilisateurForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L165">      this.setErreur(UtilisateurForm.NOM_BOUTON_SUPPRIMER, fve.getMessage());</span>
<span class="nc" id="L166">    }</span>
<span class="nc" id="L167">  }</span>

  private String traiterPassword(String password) {
<span class="nc" id="L170">    String passwordHash = null;</span>
    try {
<span class="nc" id="L172">      this.validationPassword(password);</span>
<span class="nc" id="L173">      passwordHash = PasswordStorage.createHash(password);</span>
<span class="nc" id="L174">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L175">      ModifierUtilisateurForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L176">      this.setErreur(UtilisateurForm.CHAMP_PASS, fve.getMessage());</span>
<span class="nc" id="L177">    } catch (final Exception exc) {</span>
<span class="nc" id="L178">      ModifierUtilisateurForm.LOGGER.log(Level.INFO, EXCEPTION, exc);</span>
<span class="nc" id="L179">      this.setErreur(UtilisateurForm.CHAMP_PASS, &quot;Impossible de générer le hash du mot de passe.&quot;);</span>
<span class="nc" id="L180">    }</span>

<span class="nc" id="L182">    return passwordHash;</span>
  }

  private void traiterEmail(String email) {
    try {
<span class="nc" id="L187">      this.validationEmail(email);</span>
<span class="nc" id="L188">    } catch (final Exception exc) {</span>
<span class="nc" id="L189">      ModifierUtilisateurForm.LOGGER.log(Level.INFO, EXCEPTION, exc);</span>
<span class="nc" id="L190">      this.setErreur(UtilisateurForm.CHAMP_EMAIL, exc.getMessage());</span>
<span class="nc" id="L191">    }</span>
<span class="nc" id="L192">  }</span>

  private void validationEmail(String email) throws FormValidationException {
<span class="nc bnc" id="L195" title="All 2 branches missed.">    if (email == null) {</span>
<span class="nc" id="L196">      throw new FormValidationException(&quot;Merci de saisir une adresse mail.&quot;);</span>
    }
<span class="nc bnc" id="L198" title="All 2 branches missed.">    if (!email.matches(&quot;([^.@]+)(\\.[^.@]+)*@([^.@]+\\.)+([^.@]+)&quot;)) {</span>
<span class="nc" id="L199">      throw new FormValidationException(&quot;Merci de saisir une adresse mail valide.&quot;);</span>
    }
<span class="nc" id="L201">  }</span>

  private void validationPassword(String password) throws FormValidationException {
<span class="nc bnc" id="L204" title="All 2 branches missed.">    if (password != null) {</span>
<span class="nc bnc" id="L205" title="All 2 branches missed.">      if (password.length() &lt; 5) {</span>
<span class="nc" id="L206">        throw new FormValidationException(</span>
            &quot;Les mots de passe doivent contenir au moins 5 caractères.&quot;);
      }
    } else {
<span class="nc" id="L210">      throw new FormValidationException(&quot;Merci de saisir un mot de passe.&quot;);</span>
    }
<span class="nc" id="L212">  }</span>



  private void validationLoginPrecedent(String login) throws FormValidationException {
<span class="nc bnc" id="L217" title="All 4 branches missed.">    if (login == null || login.length() &lt; 5) {</span>
<span class="nc" id="L218">      throw new FormValidationException(</span>
          &quot;Le nom d'utilisateur doit contenir au moins 5 caractères.&quot;);
<span class="nc bnc" id="L220" title="All 2 branches missed.">    } else if (this.utilisateurDao.trouverParLogin(login) == null) {</span>
<span class="nc" id="L221">      throw new FormValidationException(&quot;Utilisateur non trouvé dans la base de données.&quot;);</span>
    }
<span class="nc" id="L223">  }</span>

  private void validationLoginNouveau(String login) throws FormValidationException {
<span class="nc bnc" id="L226" title="All 4 branches missed.">    if (login == null || login.length() &lt; 5) {</span>
<span class="nc" id="L227">      throw new FormValidationException(</span>
          &quot;Le nom d'utilisateur doit contenir au moins 5 caractères.&quot;);
<span class="nc bnc" id="L229" title="All 2 branches missed.">    } else if (this.utilisateurDao.trouverParLogin(login) != null) {</span>
<span class="nc" id="L230">      throw new FormValidationException(&quot;Le login existe déjà dans la base de données.&quot;);</span>
    }
<span class="nc" id="L232">  }</span>

  public UtilisateurDao getUtilisateurBdd() {
<span class="nc" id="L235">    return this.utilisateurDao;</span>
  }

  public void setResultat(String resultat) {
<span class="nc" id="L239">    this.resultat = resultat;</span>
<span class="nc" id="L240">  }</span>
}

</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>