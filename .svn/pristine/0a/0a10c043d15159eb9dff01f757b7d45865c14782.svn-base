<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="fr"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../.resources/report.css" type="text/css"/><link rel="shortcut icon" href="../.resources/report.gif" type="image/gif"/><title>ModifierExamenForm.java</title><link rel="stylesheet" href="../.resources/prettify.css" type="text/css"/><script type="text/javascript" src="../.resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../.sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Atribus</a> &gt; <a href="index.source.html" class="el_package">fr.eseo.atribus.forms</a> &gt; <span class="el_source">ModifierExamenForm.java</span></div><h1>ModifierExamenForm.java</h1><pre class="source lang-java linenums">package fr.eseo.atribus.forms;

import fr.eseo.atribus.controller.ExamenController;
import fr.eseo.atribus.dao.DaoException;
import fr.eseo.atribus.dao.ExamenDao;
import fr.eseo.atribus.dao.MatiereDao;
import fr.eseo.atribus.entities.Examen;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;

public class ModifierExamenForm {
  private static final String CHAMP_NOM = &quot;nomExamen&quot;;
  private static final String CHAMP_CHOIX_MATIERE = &quot;choixMatiere&quot;;
<span class="nc" id="L22">  private static final Logger LOGGER = Logger.getLogger(ModifierExamenForm.class.getName());</span>
  private static final String EXCEPTION = &quot;Exception&quot;;

  private String resultat;
<span class="nc" id="L26">  private final Map&lt;String, String&gt; erreurs = new HashMap&lt;&gt;();</span>
  private final ExamenDao examenDao;
  private final MatiereDao matiereDao;

<span class="nc" id="L30">  public ModifierExamenForm() {</span>
    final BeanFactoryReference bf =
<span class="nc" id="L32">        SingletonBeanFactoryLocator.getInstance().useBeanFactory(&quot;beansDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Examen */
<span class="nc" id="L34">    this.examenDao = (ExamenDao) bf.getFactory().getBean(&quot;examenDao&quot;);</span>
    /* Récupération d'une instance de notre DAO Matiere */
<span class="nc" id="L36">    this.matiereDao = (MatiereDao) bf.getFactory().getBean(&quot;matiereDao&quot;);</span>
<span class="nc" id="L37">  }</span>

  public String getResultat() {
<span class="nc" id="L40">    return this.resultat;</span>
  }

  public Map&lt;String, String&gt; getErreurs() {
<span class="nc" id="L44">    return this.erreurs;</span>
  }

  public Examen modifierExamen(HttpServletRequest request) {
<span class="nc" id="L48">    final String nom = ModifierExamenForm.getValeurChamp(request, ModifierExamenForm.CHAMP_NOM);</span>
<span class="nc" id="L49">    final String matiere =</span>
<span class="nc" id="L50">        ModifierExamenForm.getValeurChamp(request, ModifierExamenForm.CHAMP_CHOIX_MATIERE);</span>
<span class="nc" id="L51">    final Examen examen = (Examen) request.getSession().getAttribute(ExamenController.ATT_EXAMEN);</span>
<span class="nc" id="L52">    final String ancienNom = examen.getNom();</span>
    try {
<span class="nc" id="L54">      this.traiterDonnees(nom, matiere, examen);</span>
<span class="nc bnc" id="L55" title="All 2 branches missed.">      if (this.erreurs.isEmpty()) {</span>
<span class="nc" id="L56">        this.examenDao.update(examen, ancienNom);</span>
<span class="nc" id="L57">        this.resultat = &quot;success&quot;;</span>
      } else {
<span class="nc" id="L59">        this.resultat = &quot;error&quot;;</span>
      }
<span class="nc" id="L61">    } catch (final DaoException ebdd) {</span>
<span class="nc" id="L62">      this.resultat = &quot;errorDao&quot;;</span>
<span class="nc" id="L63">      ModifierExamenForm.LOGGER.log(Level.INFO, EXCEPTION, ebdd);</span>
<span class="nc" id="L64">    }</span>
<span class="nc" id="L65">    return examen;</span>
  }

  private void traiterDonnees(String nom, String matiere, Examen examen) {
    try {
<span class="nc" id="L70">      this.validationNom(nom);</span>
<span class="nc" id="L71">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L72">      ModifierExamenForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L73">      this.setErreur(&quot;nom&quot;, fve.getMessage());</span>
<span class="nc" id="L74">    }</span>
<span class="nc" id="L75">    examen.setNom(nom);</span>
    try {
<span class="nc" id="L77">      this.validationMatiere(matiere);</span>
<span class="nc" id="L78">    } catch (final FormValidationException fve) {</span>
<span class="nc" id="L79">      ModifierExamenForm.LOGGER.log(Level.INFO, EXCEPTION, fve);</span>
<span class="nc" id="L80">      this.setErreur(&quot;choixMatiere&quot;, &quot;Choix de matière invalide ou inexistant.&quot;);</span>
<span class="nc" id="L81">    }</span>
<span class="nc" id="L82">    examen.setMatiere(this.matiereDao.trouverParNom(matiere));</span>
<span class="nc" id="L83">  }</span>

  private void validationNom(String nom) throws FormValidationException {
<span class="nc bnc" id="L86" title="All 4 branches missed.">    if (nom == null || nom.length() &lt; 3) {</span>
<span class="nc" id="L87">      throw new FormValidationException(&quot;Le nom de l'examen doit avoir au moins 3 caractères.&quot;);</span>
    }
<span class="nc" id="L89">  }</span>

  private void validationMatiere(String matiere) throws FormValidationException {
<span class="nc bnc" id="L92" title="All 2 branches missed.">    if (this.matiereDao.trouverParNom(matiere) == null) {</span>
<span class="nc" id="L93">      throw new FormValidationException(&quot;Cette matière n'existe pas&quot;);</span>
    }
<span class="nc" id="L95">  }</span>

  /*
   * Ajoute un message correspondant au champ spécifié à la map des erreurs.
   */
  private void setErreur(String champ, String message) {
<span class="nc" id="L101">    this.erreurs.put(champ, message);</span>
<span class="nc" id="L102">  }</span>

  /*
   * Méthode utilitaire qui retourne null si un champ est vide, et son contenu sinon.
   */
  private static String getValeurChamp(HttpServletRequest request, String nomChamp) {
<span class="nc" id="L108">    final String valeur = request.getParameter(nomChamp);</span>
<span class="nc bnc" id="L109" title="All 4 branches missed.">    if (valeur == null || valeur.trim().length() == 0) {</span>
<span class="nc" id="L110">      return null;</span>
    } else {
<span class="nc" id="L112">      return valeur.trim();</span>
    }
  }
}

</pre><div class="footer"><span class="right">Created with <a href="http://www.eclemma.org/jacoco">JaCoCo</a> 0.7.6.201602180812</span></div></body></html>