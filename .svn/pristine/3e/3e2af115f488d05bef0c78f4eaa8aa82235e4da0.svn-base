package fr.eseo.atribus.dao;

import fr.eseo.atribus.entities.DirecteurProgrammes;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.beans.factory.access.SingletonBeanFactoryLocator;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DirecteurProgrammesDaoImpl implements DirecteurProgrammesDao {
  private static final Logger LOGGER = Logger.getLogger(DirecteurProgrammesDaoImpl.class.getName());
  private static final String EXCEPTION = "Exception";
  private final DaoFactory daoFactory;
  
  private static final String SELECT_1 =
      "SELECT directeur_programmes.id AS id_directeur_programmes, utilisateur.* ";
  
  private static final String SELECT_2 = " FROM directeur_programmes ";
  
  private static final String SELECT_3 =
      " LEFT JOIN utilisateur ON utilisateur.id = directeur_programmes.id_utilisateur ";

  private static final String SQL_SELECT_PAR_LOGIN_HASH = SELECT_1 + SELECT_2 + SELECT_3
          + " WHERE utilisateur.login = ?" + " AND utilisateur.password = ?";

  private static final String SQL_INSERT =
      "INSERT INTO directeur_programmes (id_utilisateur) VALUES (?)";

  private static final String SQL_SELECT_ALL = SELECT_1 + SELECT_2 + SELECT_3;
  
  private static final String SQL_SELECT_PAR_ID_UTILISATEUR = SELECT_1 + SELECT_2 + SELECT_3
          + " WHERE id_utilisateur = ?";

  private static final String SQL_DELETE_PAR_ID_UTILISATEUR =
      "DELETE FROM directeur_programmes WHERE id_utilisateur = ?";

  DirecteurProgrammesDaoImpl() {
    final BeanFactoryReference bf =
        SingletonBeanFactoryLocator.getInstance().useBeanFactory("contextDao");
    this.daoFactory = (DaoFactory) bf.getFactory().getBean("daoFactory");
  }

  @Override
  public List<DirecteurProgrammes> recupererListe() {
    final List<DirecteurProgrammes> listeDirecteurProgrammes = new ArrayList<>();
    Connection connexion = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;

    try {
      /* Récupération d'une connexion depuis la Factory */
      connexion = this.daoFactory.getConnection();
      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,
          DirecteurProgrammesDaoImpl.SQL_SELECT_ALL, false);
      resultSet = preparedStatement.executeQuery();
      /* Parcours de la ligne de données retournée dans le ResultSet */
      while (resultSet.next()) {
        listeDirecteurProgrammes.add(DirecteurProgrammesDaoImpl.map(resultSet));
      }
    } catch (final SQLException sqle) {
      throw new DaoException(sqle);
    } finally {
      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);
    }

    return listeDirecteurProgrammes;
  }

  /* Implémentation de la méthode trouverParLogin() définie dans l'interface UtilisateurBdd */
  @Override
  public DirecteurProgrammes trouverParLoginHash(String login, String hash) {
    return this.trouver(DirecteurProgrammesDaoImpl.SQL_SELECT_PAR_LOGIN_HASH, login, hash);
  }
  
  private DirecteurProgrammes trouverParIdUtilisateur(int idUtilisateur) {
    return this.trouver(DirecteurProgrammesDaoImpl.SQL_SELECT_PAR_ID_UTILISATEUR, idUtilisateur);
  }

  @Override
  public DirecteurProgrammes ajouter(DirecteurProgrammes directeurProgrammes) {
    Connection connexion = null;
    PreparedStatement preparedStatement = null;
    final ResultSet valeursAutoGenerees = null;

    try {
      final BeanFactoryReference bf =
          SingletonBeanFactoryLocator.getInstance().useBeanFactory("beansDao");
      final int idUtilisateur = ((UtilisateurDao) bf.getFactory().getBean("utilisateurDao"))
          .trouverIdParLogin(directeurProgrammes.getLogin());
      
      // Si il n'y a pas déja l'utilisateur associé
      if (this.trouverParIdUtilisateur(idUtilisateur) == null) {
        connexion = this.daoFactory.getConnection();
        preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,
            DirecteurProgrammesDaoImpl.SQL_INSERT, true, idUtilisateur);

        final int statut = preparedStatement.executeUpdate();
        /* Analyse du statut retourné par la requête d'insertion */
        if (statut == 0) {
          throw new DaoException(
              "Échec de la création du directeurProgrammes, aucune ligne ajoutée dans la table.");
        }
      }
      
      /* Récupération de l'id auto-généré par la requête d'insertion */
    } catch (final SQLException sqle) {
      DirecteurProgrammesDaoImpl.LOGGER.log(Level.INFO, "Exception", sqle);
      throw new DaoException(sqle);
    } finally {
      DaoUtilitaire.fermeturesSilencieuses(valeursAutoGenerees, preparedStatement, connexion);
    }

    return directeurProgrammes;
  }
  
  @Override
  public int supprimer(DirecteurProgrammes directeurProgrammes) {

    int statut;
    Connection connexion = null;
    PreparedStatement preparedStatement = null;


    try {
      /* Récupération de l'id_utilisateur */
      final BeanFactoryReference bf =
          SingletonBeanFactoryLocator.getInstance().useBeanFactory("beansDao");
      final int idUtilisateur = ((UtilisateurDao) bf.getFactory().getBean("utilisateurDao"))
          .trouverIdParLogin(directeurProgrammes.getLogin());

      /* Récupération d'une connexion depuis la Factory */
      connexion = this.daoFactory.getConnection();
      preparedStatement = DaoUtilitaire.initialisationRequetePreparee(connexion,
          DirecteurProgrammesDaoImpl.SQL_DELETE_PAR_ID_UTILISATEUR, false, idUtilisateur);

      statut = preparedStatement.executeUpdate();

    } catch (final SQLException sqle) {
      DirecteurProgrammesDaoImpl.LOGGER.log(Level.INFO, DirecteurProgrammesDaoImpl.EXCEPTION, sqle);
      throw new DaoException(sqle);
    } finally {
      DaoUtilitaire.fermeturesSilencieuses(preparedStatement, connexion);
    }

    return statut;
  }


  /*
   * Méthode générique utilisée pour retourner un adminsys depuis la base de données, correspondant
   * à la requête SQL donnée prenant en paramètres les objets passés en argument.
   */
  private DirecteurProgrammes trouver(String sql, Object... objets) {
    Connection connexion = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;
    DirecteurProgrammes directeurProgrammes = null;

    try {
      /* Récupération d'une connexion depuis la Factory */
      connexion = this.daoFactory.getConnection();
      /*
       * Préparation de la requête avec les objets passés en arguments (ici, uniquement un id) et
       * exécution.
       */
      preparedStatement =
          DaoUtilitaire.initialisationRequetePreparee(connexion, sql, false, objets);
      resultSet = preparedStatement.executeQuery();
      /* Parcours de la ligne de données retournée dans le ResultSet */
      if (resultSet.next()) {
        directeurProgrammes = DirecteurProgrammesDaoImpl.map(resultSet);
      }
    } catch (final SQLException sqle) {
      throw new DaoException(sqle);
    } finally {
      DaoUtilitaire.fermeturesSilencieuses(resultSet, preparedStatement, connexion);
    }
    return directeurProgrammes;
  }

  /*
   * Simple méthode utilitaire permettant de faire la correspondance (le mapping) entre une ligne
   * issue de la table des adminsyss (un ResultSet) et un bean Utilisateur.
   */
  private static DirecteurProgrammes map(ResultSet resultSet) throws SQLException {
    final DirecteurProgrammes directeurProgrammes = new DirecteurProgrammes();
    directeurProgrammes.setId(resultSet.getInt("id"));
    directeurProgrammes.setIdDirecteurProgrammes(resultSet.getInt("id_directeur_programmes"));
    directeurProgrammes.setLogin(resultSet.getString("login"));
    directeurProgrammes.setPassword(resultSet.getString("password"));
    directeurProgrammes.setNom(resultSet.getString("nom"));
    directeurProgrammes.setPrenom(resultSet.getString("prenom"));
    directeurProgrammes.setEmail(resultSet.getString("email"));
    directeurProgrammes.setDateInscription(resultSet.getTimestamp("date_inscription"));
    directeurProgrammes.setNotificationActive(resultSet.getBoolean("notification_active"));
    directeurProgrammes.setNotificationMail(resultSet.getBoolean("notification_mail"));
    directeurProgrammes
        .setFrequenceNotificationMail(resultSet.getInt("frequence_notification_mail"));
    return directeurProgrammes;
  }
}
